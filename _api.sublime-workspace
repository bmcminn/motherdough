{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"recent",
				"recentActiveStep"
			],
			[
				"current",
				"currentStep"
			],
			[
				"step",
				"stepFourSeriesPreviewModal"
			],
			[
				"show",
				"showEstimateDisclaimer"
			],
			[
				"list",
				"listRecipients"
			],
			[
				"area",
				"areaRecipients"
			],
			[
				"total",
				"total_product_cost"
			],
			[
				"rec",
				"recipientMetrics"
			],
			[
				"_t",
				"_publishSeriesDataUpdate"
			],
			[
				"sel",
				"selectedLists"
			],
			[
				"Recipi",
				"RecipientsTableService"
			],
			[
				"update",
				"updateSeriesData"
			],
			[
				"Emi",
				"MailingClickedEmitter"
			],
			[
				"curernt",
				"currentStep"
			],
			[
				"curern",
				"currentIndex"
			],
			[
				"get",
				"getCampaignLabel"
			],
			[
				"address",
				"address_color"
			],
			[
				"init",
				"initNewClientFollowupSteps"
			],
			[
				"isNew",
				"isNewClientFollowup"
			],
			[
				"ProgressSte",
				"ProgressStepModel"
			],
			[
				"word-",
				"word-break\tproperty"
			],
			[
				"full",
				"fullcardUploadTemplates"
			],
			[
				"_sto",
				"_storageGetItemData"
			],
			[
				"slowMo",
				"slowmoFrames"
			],
			[
				"slow",
				"slowmoFrames"
			],
			[
				"acto",
				"actorsList"
			],
			[
				"remove",
				"removeEventListener"
			],
			[
				"isCompany",
				"isCompanySplitExpanded"
			],
			[
				"iScheduled",
				"iScheduledCampaignId"
			],
			[
				"selec",
				"selectedSeries"
			],
			[
				"map",
				"mapUpdatedMailings"
			],
			[
				"_",
				"_debugPromoCode"
			],
			[
				"func_get",
				"func_get_args"
			],
			[
				"sAFE",
				"SafeHtmlPipe"
			],
			[
				"form",
				"formstatevalue"
			],
			[
				"mb_convert",
				"mb_convert_encoding"
			],
			[
				"break",
				"breakpoints"
			],
			[
				"formstat",
				"formstatexml"
			],
			[
				"array_merge",
				"array_merge_recursive"
			],
			[
				"fil",
				"FILENAME"
			],
			[
				"_label",
				"_labelHistoricalMailings"
			],
			[
				"isLaoding",
				"isLoadingHistorical"
			],
			[
				"color-bu",
				"color-button-default"
			],
			[
				"layout",
				"layoutLabelsWidth"
			],
			[
				"upcoming",
				"upcomingMailings"
			],
			[
				"historical",
				"historicalMailings"
			],
			[
				"isLodin",
				"isLoadingUpcoming"
			],
			[
				"isLoad",
				"isLoadingHistorical"
			],
			[
				"upcom",
				"upcomingMailings"
			],
			[
				"isLoading",
				"isLoadingMailings"
			],
			[
				"iSche",
				"iScheduledCampaignId"
			],
			[
				"time",
				"TIME_DIFF"
			],
			[
				"confirm",
				"confirmButtonClass"
			],
			[
				"FILTER_SANIIT",
				"FILTER_SANITIZE_BOOLEAN"
			],
			[
				"campaign",
				"CampaignsService"
			],
			[
				"_init",
				"_initUpcomingMailings"
			],
			[
				"acti",
				"activeRoute"
			],
			[
				"campagin",
				"campaignId"
			],
			[
				"Local",
				"LocalMarketReportURL"
			],
			[
				"table",
				"tableItemsPerPage"
			],
			[
				"appswit",
				"appswitchtermenu"
			],
			[
				"format",
				"routeFormat"
			],
			[
				"responses",
				"Responses"
			],
			[
				"cFOrm",
				"cFormFirstname"
			],
			[
				"isSele",
				"isSelectable"
			],
			[
				"JSON",
				"JSON_PRETTY_PRINT"
			],
			[
				"selected",
				"selectedMailing"
			],
			[
				"_qx",
				"_qxpBackOfCardUpdates"
			],
			[
				"campa",
				"campaignId"
			],
			[
				"polif",
				"polyfillURI"
			],
			[
				"poliy",
				"polyfillURI"
			],
			[
				"pol",
				"polyfillSrc"
			],
			[
				"recipei",
				"recipientsList"
			],
			[
				"JSO",
				"JSON_PRETTY_PRINT"
			],
			[
				"sleect",
				"selectedLists"
			],
			[
				"CampaignController",
				"CampaignsController"
			],
			[
				"original",
				"originalLists"
			],
			[
				"recipi",
				"recipientsList"
			],
			[
				"for",
				"forb\t(Improved Native For-Loop) for (…; i--) {…}"
			],
			[
				"activeLi",
				"activeLists"
			],
			[
				"mailing",
				"mailing_year"
			],
			[
				"isOrder",
				"isOrderSuccess"
			],
			[
				"order",
				"isOrderSuccess"
			],
			[
				"isCa",
				"isCancelled"
			],
			[
				"backgorund",
				"background-color"
			],
			[
				"min",
				"minRecipientCount"
			],
			[
				"submit",
				"submitCampaignOrder"
			],
			[
				"api",
				"_apiPost"
			],
			[
				"postOrder",
				"postOrderEstimate"
			],
			[
				"malin",
				"mailingsData"
			],
			[
				"Camp",
				"CampaignStart_Dt"
			],
			[
				"mailnig",
				"mailingTargetDate"
			],
			[
				"mailng",
				"mailingTargetDate"
			],
			[
				"breacru",
				"breadcrumb"
			],
			[
				"breadc",
				"breadcrumbLinks"
			],
			[
				"isOr",
				"isOrderSuccess"
			],
			[
				"swal",
				"nativeSwal"
			],
			[
				"back",
				"backOfCardUpdates"
			],
			[
				"__init",
				"__initAutomator"
			],
			[
				"First",
				"firstMailingYear"
			],
			[
				"message",
				"error_message"
			],
			[
				"_reset",
				"_resetList"
			],
			[
				"rece",
				"recipientLists"
			],
			[
				"config",
				"configuration"
			],
			[
				"campaignDescir",
				"campaignsDescriptionStep2"
			],
			[
				"recipie",
				"recipientLists"
			],
			[
				"User",
				"USER"
			],
			[
				"firstmaili",
				"firstMailingDate"
			],
			[
				"first",
				"firstMailingMonth"
			],
			[
				"num",
				"numRecipients"
			],
			[
				"Radius",
				"RadiusList"
			],
			[
				"cat_",
				"card_cat"
			],
			[
				"validate",
				"validatePromocode"
			],
			[
				"QD_DOMAIN",
				"QD_ORDER_DOMAIN"
			],
			[
				"getSe",
				"getCampaignOrderEstiamte"
			],
			[
				"recip",
				"recipientLists"
			],
			[
				"reci",
				"recipientLists"
			],
			[
				"List",
				"ListsController"
			],
			[
				"validateStep",
				"validateStep2"
			],
			[
				"color-breadc",
				"color-breadcrumb-disabled"
			],
			[
				"cur",
				"currentStage"
			],
			[
				"series-list-",
				"series-list-container"
			],
			[
				"pwLen",
				"pwLengthTest"
			],
			[
				"search",
				"search_api_views_fulltext"
			],
			[
				"flex",
				"flexgrid"
			],
			[
				"qd-teal",
				"qd-teal-03"
			],
			[
				"pr",
				"progress-breadcrumbs"
			],
			[
				"lcaol",
				"localStorage"
			]
		]
	},
	"buffers":
	[
		{
			"file": "app/bootstrap.php",
			"settings":
			{
				"buffer_size": 1637,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": ".env",
			"settings":
			{
				"buffer_size": 423,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 3154 files for \"ENV\" (regex)\n\nC:\\Users\\bmcminn\\github\\starter-api\\.env:\n    2  # APP PARAMS CONFIG\n    3      # How to pick timezone - https://www.php.net/manual/en/timezones.america.php\n    4: APP_ENV=\"local\"\n    5  APP_TIMEZONE=\"America/Chicago\"\n    6  APP_TITLE=\"Starter API\"\n\nC:\\Users\\bmcminn\\github\\starter-api\\.env.example:\n    1: ENV=\"local\"\n    2  \n    3  \n\nC:\\Users\\bmcminn\\github\\starter-api\\.gitignore:\n    7  __*\n    8  *.db\n    9: .env*\n   10: !.env.example\n   11  \n\nC:\\Users\\bmcminn\\github\\starter-api\\.travis.yml:\n    8    - php: 7.2\n    9    - php: 7.3\n   10:     env: ANALYSIS='true'\n   11    - php: nightly\n   12  \n\nC:\\Users\\bmcminn\\github\\starter-api\\composer.json:\n   22          \"slim/psr7\": \"^0.5\",\n   23          \"slim/slim\": \"^4.1\",\n   24:         \"vlucas/phpdotenv\": \"^3.5\"\n   25      },\n   26      \"require-dev\": {\n\nC:\\Users\\bmcminn\\github\\starter-api\\composer.lock:\n 1422          },\n 1423          {\n 1424:             \"name\": \"vlucas/phpdotenv\",\n 1425              \"version\": \"v3.5.0\",\n 1426              \"source\": {\n 1427                  \"type\": \"git\",\n 1428:                 \"url\": \"https://github.com/vlucas/phpdotenv.git\",\n 1429                  \"reference\": \"95cb0fa6c025f7f0db7fc60f81e9fb231eb2d222\"\n 1430              },\n 1431              \"dist\": {\n 1432                  \"type\": \"zip\",\n 1433:                 \"url\": \"https://api.github.com/repos/vlucas/phpdotenv/zipball/95cb0fa6c025f7f0db7fc60f81e9fb231eb2d222\",\n 1434                  \"reference\": \"95cb0fa6c025f7f0db7fc60f81e9fb231eb2d222\",\n 1435                  \"shasum\": \"\"\n ....\n 1451              \"autoload\": {\n 1452                  \"psr-4\": {\n 1453:                     \"Dotenv\\\\\": \"src/\"\n 1454                  }\n 1455              },\n ....\n 1470                  }\n 1471              ],\n 1472:             \"description\": \"Loads environment variables from `.env` to `getenv()`, `$_ENV` and `$_SERVER` automagically.\",\n 1473              \"keywords\": [\n 1474:                 \"dotenv\",\n 1475:                 \"env\",\n 1476:                 \"environment\"\n 1477              ],\n 1478              \"time\": \"2019-08-27T17:00:38+00:00\"\n ....\n 1923                  \"phpunit/php-token-stream\": \"^3.0\",\n 1924                  \"sebastian/code-unit-reverse-lookup\": \"^1.0.1\",\n 1925:                 \"sebastian/environment\": \"^3.1 || ^4.0\",\n 1926                  \"sebastian/version\": \"^2.0.1\",\n 1927                  \"theseer/tokenizer\": \"^1.1\"\n ....\n 2185                  \"sebastian/comparator\": \"^3.0\",\n 2186                  \"sebastian/diff\": \"^3.0\",\n 2187:                 \"sebastian/environment\": \"^4.0\",\n 2188                  \"sebastian/exporter\": \"^3.1\",\n 2189                  \"sebastian/global-state\": \"^2.0\",\n ....\n 2403          },\n 2404          {\n 2405:             \"name\": \"sebastian/environment\",\n 2406              \"version\": \"4.2.2\",\n 2407              \"source\": {\n 2408                  \"type\": \"git\",\n 2409:                 \"url\": \"https://github.com/sebastianbergmann/environment.git\",\n 2410                  \"reference\": \"f2a2c8e1c97c11ace607a7a667d73d47c19fe404\"\n 2411              },\n 2412              \"dist\": {\n 2413                  \"type\": \"zip\",\n 2414:                 \"url\": \"https://api.github.com/repos/sebastianbergmann/environment/zipball/f2a2c8e1c97c11ace607a7a667d73d47c19fe404\",\n 2415                  \"reference\": \"f2a2c8e1c97c11ace607a7a667d73d47c19fe404\",\n 2416                  \"shasum\": \"\"\n ....\n 2446                  }\n 2447              ],\n 2448:             \"description\": \"Provides functionality to handle HHVM/PHP environments\",\n 2449:             \"homepage\": \"http://www.github.com/sebastianbergmann/environment\",\n 2450              \"keywords\": [\n 2451                  \"Xdebug\",\n 2452:                 \"environment\",\n 2453                  \"hhvm\"\n 2454              ],\n\nC:\\Users\\bmcminn\\github\\starter-api\\docker-compose.yml:\n   10          working_dir: /var/www\n   11          command: php -S 0.0.0.0:8080 -t public\n   12:         environment:\n   13              docker: \"true\"\n   14          ports:\n\nC:\\Users\\bmcminn\\github\\starter-api\\app\\bootstrap.php:\n   11  \n   12  \n   13: // DEV LOAD ENVIRONMENT\n   14  // ----------------------------------------------------------------------\n   15  \n   16: $dotenv = Dotenv\\Dotenv::create(ROOT_DIR);\n   17: // $dotenv->load();\n   18: $dotenv->overload();\n   19  \n   20: $dotenv->required([\n   21      'APP_TIMEZONE',\n   22      'DB_DATABASE',\n   23      'DB_HOSTNAME',\n   24:     'ENV',\n   25      // 'DB_PASSWORD',\n   26      // 'DB_USERNAME',\n   ..\n   29  \n   30  \n   31: // DEFINE ENVIRONMENT CONSTANTS\n   32  // ----------------------------------------------------------------------\n   33  \n   34: $IS_DEV = env('ENV') !== 'production';\n   35  \n   36  define('IS_DEV',  $IS_DEV);\n   ..\n   42  // ----------------------------------------------------------------------\n   43  \n   44: date_default_timezone_set(env('APP_TIMEZONE'));\n   45  \n   46  \n   ..\n   58  // ----------------------------------------------------------------------\n   59  \n   60: $DB_DATABASE = env('DB_DATABASE', 'sqlite');\n   61: $DB_PATH     = buildPath(DATA_DIR, env('DB_FILEPATH', ''));\n   62  \n   63  $db = Db\\PdoDatabase::fromDsn(\n   64      new Db\\PdoDsn(\n   65          \"{$DB_DATABASE}:{$DB_PATH}\",\n   66:         env('DB_USERNAME', null),\n   67:         env('DB_PASSWORD', null)\n   68      )\n   69  );\n\nC:\\Users\\bmcminn\\github\\starter-api\\app\\helpers.php:\n   41  \n   42  \n   43: //  ENVIRONMENT HELPER FUNCITON(S)\n   44  // ===================================\n   45  \n   46: function env($key, $default=null) {\n   47:     $value = getenv($key);\n   48  \n   49      if (!$value && $default) {\n\nC:\\Users\\bmcminn\\github\\starter-api\\app\\settings.php:\n   16              'logger' => [\n   17                  'name'  => 'slim-app',\n   18:                 'path'  => env('docker') ? 'php://stdout' : __DIR__ . '/../logs/app.log',\n   19                  'level' => Logger::DEBUG,\n   20              ],\n\nC:\\Users\\bmcminn\\github\\starter-api\\public\\.htaccess:\n    3  \n    4    # Some hosts may require you to use the `RewriteBase` directive.\n    5:   # Determine the RewriteBase automatically and set it as environment variable.\n    6    # If you are using Apache aliases to do mass virtual hosting or installed the\n    7    # project in a subdirectory, the base path will be prepended to allow proper\n    8    # resolution of the index.php file and to redirect to the correct URI. It will\n    9:   # work in environments without path prefix as well, providing a safe, one-size\n   10    # fits all solution. But as you do not need it in this case, you can comment\n   11    # the following 2 lines to eliminate the overhead.\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\bin\\php-parse:\n    1: #!/usr/bin/env sh\n    2  \n    3  dir=$(cd \"${0%[/\\\\]*}\" > /dev/null; cd \"../nikic/php-parser/bin\" && pwd)\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\bin\\phpunit:\n    1: #!/usr/bin/env sh\n    2  \n    3  dir=$(cd \"${0%[/\\\\]*}\" > /dev/null; cd \"../phpunit/phpunit\" && pwd)\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\composer\\autoload_classmap.php:\n  517      'SebastianBergmann\\\\Diff\\\\Parser' => $vendorDir . '/sebastian/diff/src/Parser.php',\n  518      'SebastianBergmann\\\\Diff\\\\TimeEfficientLongestCommonSubsequenceCalculator' => $vendorDir . '/sebastian/diff/src/TimeEfficientLongestCommonSubsequenceCalculator.php',\n  519:     'SebastianBergmann\\\\Environment\\\\Console' => $vendorDir . '/sebastian/environment/src/Console.php',\n  520:     'SebastianBergmann\\\\Environment\\\\OperatingSystem' => $vendorDir . '/sebastian/environment/src/OperatingSystem.php',\n  521:     'SebastianBergmann\\\\Environment\\\\Runtime' => $vendorDir . '/sebastian/environment/src/Runtime.php',\n  522      'SebastianBergmann\\\\Exporter\\\\Exporter' => $vendorDir . '/sebastian/exporter/src/Exporter.php',\n  523      'SebastianBergmann\\\\FileIterator\\\\Facade' => $vendorDir . '/phpunit/php-file-iterator/src/Facade.php',\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\composer\\autoload_psr4.php:\n   29      'Fig\\\\Http\\\\Message\\\\' => array($vendorDir . '/fig/http-message-util/src'),\n   30      'FastRoute\\\\' => array($vendorDir . '/nikic/fast-route/src'),\n   31:     'Dotenv\\\\' => array($vendorDir . '/vlucas/phpdotenv/src'),\n   32      'Doctrine\\\\Instantiator\\\\' => array($vendorDir . '/doctrine/instantiator/src/Doctrine/Instantiator'),\n   33      'Delight\\\\Http\\\\' => array($vendorDir . '/delight-im/http/src'),\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\composer\\autoload_static.php:\n   67          'D' => \n   68          array (\n   69:             'Dotenv\\\\' => 7,\n   70              'Doctrine\\\\Instantiator\\\\' => 22,\n   71              'Delight\\\\Http\\\\' => 13,\n   ..\n  176              0 => __DIR__ . '/..' . '/nikic/fast-route/src',\n  177          ),\n  178:         'Dotenv\\\\' => \n  179          array (\n  180:             0 => __DIR__ . '/..' . '/vlucas/phpdotenv/src',\n  181          ),\n  182          'Doctrine\\\\Instantiator\\\\' => \n  ...\n  739          'SebastianBergmann\\\\Diff\\\\Parser' => __DIR__ . '/..' . '/sebastian/diff/src/Parser.php',\n  740          'SebastianBergmann\\\\Diff\\\\TimeEfficientLongestCommonSubsequenceCalculator' => __DIR__ . '/..' . '/sebastian/diff/src/TimeEfficientLongestCommonSubsequenceCalculator.php',\n  741:         'SebastianBergmann\\\\Environment\\\\Console' => __DIR__ . '/..' . '/sebastian/environment/src/Console.php',\n  742:         'SebastianBergmann\\\\Environment\\\\OperatingSystem' => __DIR__ . '/..' . '/sebastian/environment/src/OperatingSystem.php',\n  743:         'SebastianBergmann\\\\Environment\\\\Runtime' => __DIR__ . '/..' . '/sebastian/environment/src/Runtime.php',\n  744          'SebastianBergmann\\\\Exporter\\\\Exporter' => __DIR__ . '/..' . '/sebastian/exporter/src/Exporter.php',\n  745          'SebastianBergmann\\\\FileIterator\\\\Facade' => __DIR__ . '/..' . '/phpunit/php-file-iterator/src/Facade.php',\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\composer\\installed.json:\n 1230              \"phpunit/php-token-stream\": \"^3.0\",\n 1231              \"sebastian/code-unit-reverse-lookup\": \"^1.0.1\",\n 1232:             \"sebastian/environment\": \"^3.1 || ^4.0\",\n 1233              \"sebastian/version\": \"^2.0.1\",\n 1234              \"theseer/tokenizer\": \"^1.1\"\n ....\n 1502              \"sebastian/comparator\": \"^3.0\",\n 1503              \"sebastian/diff\": \"^3.0\",\n 1504:             \"sebastian/environment\": \"^4.0\",\n 1505              \"sebastian/exporter\": \"^3.1\",\n 1506              \"sebastian/global-state\": \"^2.0\",\n ....\n 2085      },\n 2086      {\n 2087:         \"name\": \"sebastian/environment\",\n 2088          \"version\": \"4.2.2\",\n 2089          \"version_normalized\": \"4.2.2.0\",\n 2090          \"source\": {\n 2091              \"type\": \"git\",\n 2092:             \"url\": \"https://github.com/sebastianbergmann/environment.git\",\n 2093              \"reference\": \"f2a2c8e1c97c11ace607a7a667d73d47c19fe404\"\n 2094          },\n 2095          \"dist\": {\n 2096              \"type\": \"zip\",\n 2097:             \"url\": \"https://api.github.com/repos/sebastianbergmann/environment/zipball/f2a2c8e1c97c11ace607a7a667d73d47c19fe404\",\n 2098              \"reference\": \"f2a2c8e1c97c11ace607a7a667d73d47c19fe404\",\n 2099              \"shasum\": \"\"\n ....\n 2131              }\n 2132          ],\n 2133:         \"description\": \"Provides functionality to handle HHVM/PHP environments\",\n 2134:         \"homepage\": \"http://www.github.com/sebastianbergmann/environment\",\n 2135          \"keywords\": [\n 2136              \"Xdebug\",\n 2137:             \"environment\",\n 2138              \"hhvm\"\n 2139          ]\n ....\n 2884      },\n 2885      {\n 2886:         \"name\": \"vlucas/phpdotenv\",\n 2887          \"version\": \"v3.5.0\",\n 2888          \"version_normalized\": \"3.5.0.0\",\n 2889          \"source\": {\n 2890              \"type\": \"git\",\n 2891:             \"url\": \"https://github.com/vlucas/phpdotenv.git\",\n 2892              \"reference\": \"95cb0fa6c025f7f0db7fc60f81e9fb231eb2d222\"\n 2893          },\n 2894          \"dist\": {\n 2895              \"type\": \"zip\",\n 2896:             \"url\": \"https://api.github.com/repos/vlucas/phpdotenv/zipball/95cb0fa6c025f7f0db7fc60f81e9fb231eb2d222\",\n 2897              \"reference\": \"95cb0fa6c025f7f0db7fc60f81e9fb231eb2d222\",\n 2898              \"shasum\": \"\"\n ....\n 2916          \"autoload\": {\n 2917              \"psr-4\": {\n 2918:                 \"Dotenv\\\\\": \"src/\"\n 2919              }\n 2920          },\n ....\n 2935              }\n 2936          ],\n 2937:         \"description\": \"Loads environment variables from `.env` to `getenv()`, `$_ENV` and `$_SERVER` automagically.\",\n 2938          \"keywords\": [\n 2939:             \"dotenv\",\n 2940:             \"env\",\n 2941:             \"environment\"\n 2942          ]\n 2943      },\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\delight-im\\cookie\\.travis.yml:\n   18    - sudo apt-get update\n   19    - sudo apt-get install apache2 libapache2-mod-fastcgi\n   20:   - sudo cp ~/.phpenv/versions/$(phpenv version-name)/etc/php-fpm.conf.default ~/.phpenv/versions/$(phpenv version-name)/etc/php-fpm.conf\n   21:   - if [[ ${TRAVIS_PHP_VERSION:0:2} == \"7.\" ]]; then sudo cp ~/.phpenv/versions/$(phpenv version-name)/etc/php-fpm.d/www.conf.default ~/.phpenv/versions/$(phpenv version-name)/etc/php-fpm.d/www.conf; fi\n   22:   - sudo cp ~/.phpenv/versions/$(phpenv version-name)/etc/php-fpm.conf.default ~/.phpenv/versions/$(phpenv version-name)/etc/php-fpm.conf\n   23    - sudo a2enmod actions fastcgi alias\n   24:   - ~/.phpenv/versions/$(phpenv version-name)/sbin/php-fpm\n   25    - sudo cp -f .travis-ci-apache /etc/apache2/sites-available/default\n   26    - sudo sed -e \"s?%TRAVIS_BUILD_DIR%?$(pwd)?g\" --in-place /etc/apache2/sites-available/default\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\filp\\whoops\\src\\Whoops\\Handler\\PrettyPageHandler.php:\n   81          '_SESSION' => [],\n   82          '_SERVER' => [],\n   83:         '_ENV' => [],\n   84      ];\n   85  \n   ..\n  171                  // Help users who have been relying on an internal test value\n  172                  // fix their code to the proper method\n  173:                 if (isset($_ENV['whoops-test'])) {\n  174                      throw new \\Exception(\n  175                          'Use handleUnconditionally instead of whoops-test'\n  176:                         .' environment variable'\n  177                      );\n  178                  }\n  ...\n  219              \"panel_left_outer\"           => $this->getResource(\"views/panel_left_outer.html.php\"),\n  220              \"frame_code\"                 => $this->getResource(\"views/frame_code.html.php\"),\n  221:             \"env_details\"                => $this->getResource(\"views/env_details.html.php\"),\n  222  \n  223              \"title\"            => $this->getPageTitle(),\n  ...\n  244                  \"Session\"               => isset($_SESSION) ? $this->masked($_SESSION, '_SESSION') :  [],\n  245                  \"Server/Request Data\"   => $this->masked($_SERVER, '_SERVER'),\n  246:                 \"Environment Variables\" => $this->masked($_ENV, '_ENV'),\n  247              ],\n  248          ];\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\filp\\whoops\\src\\Whoops\\Resources\\views\\env_details.html.php:\n    1  <?php /* List data-table values, i.e: $_SERVER, $_GET, .... */ ?>\n    2  <div class=\"details\">\n    3:   <h2 class=\"details-heading\">Environment &amp; details:</h2>\n    4  \n    5    <div class=\"data-table-container\" id=\"data-tables\">\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\filp\\whoops\\src\\Whoops\\Resources\\views\\panel_details.html.php:\n    1  <?php $tpl->render($frame_code) ?>\n    2: <?php $tpl->render($env_details) ?>\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\monolog\\monolog\\src\\Monolog\\Handler\\SamplingHandler.php:\n   16   *\n   17   * A sampled event stream can be useful for logging high frequency events in\n   18:  * a production environment where you only need an idea of what is happening\n   19   * and are not concerned with capturing every occurrence. Since the decision to\n   20   * handle or not handle a particular event is determined randomly, the\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\nikic\\fast-route\\README.md:\n  294  from HEAD responses so this behavior has no effect on the vast majority of users.\n  295  \n  296: However, implementers using FastRoute outside the web SAPI environment (e.g. a custom server) MUST\n  297  NOT send entity bodies generated in response to HEAD requests. If you are a non-SAPI user this is\n  298  *your responsibility*; FastRoute has no purview to prevent you from breaking HTTP in such cases.\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\nikic\\php-parser\\CHANGELOG.md:\n  601    `null`.\n  602  * Magic constants are now supported as semi-reserved keywords.\n  603: * A shebang line like `#!/usr/bin/env php` is now allowed at the start of a namespaced file.\n  604    Previously this generated an exception.\n  605  * The `prettyPrintFile()` method will not strip a trailing `?>` from the raw data that follows a\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\nikic\\php-parser\\bin\\php-parse:\n    1: #!/usr/bin/env php\n    2  <?php\n    3  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\nikic\\php-parser\\doc\\component\\Name_resolution.markdown:\n   80  \n   81  Next to name resolution, the `NameContext` also supports the reverse operation of finding a short\n   82: representation of a name given the current name resolution environment.\n   83  \n   84  The name context is intended to be used for name resolution operations outside the AST itself, such\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\nikic\\php-parser\\grammar\\tokens.template:\n   12  final class Tokens\n   13  {\n   14: #tokenval\n   15      const %s = %n;\n   16: #endtokenval\n   17  }\n   18  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\nikic\\php-parser\\lib\\PhpParser\\Lexer.php:\n  169              }\n  170  \n  171:             $tokenValue = \\is_string($token) ? $token : $token[1];\n  172:             $tokenLen = \\strlen($tokenValue);\n  173  \n  174:             if (substr($this->code, $filePos, $tokenLen) !== $tokenValue) {\n  175                  // Something is missing, must be an invalid character\n  176:                 $nextFilePos = strpos($this->code, $tokenValue, $filePos);\n  177                  $badCharTokens = $this->handleInvalidCharacterRange(\n  178                      $filePos, $nextFilePos, $line, $errorHandler);\n  ...\n  185  \n  186              $filePos += $tokenLen;\n  187:             $line += substr_count($tokenValue, \"\\n\");\n  188          }\n  189  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\nikic\\php-parser\\lib\\PhpParser\\ParserAbstract.php:\n  206                      // shifted (not during read). Otherwise you would sometimes get off-by-one errors, when a rule is\n  207                      // reduced after a token was read but not yet shifted.\n  208:                     $tokenId = $this->lexer->getNextToken($tokenValue, $startAttributes, $endAttributes);\n  209  \n  210                      // map the lexer token id to the internally used symbols\n  ...\n  216                          throw new \\RangeException(sprintf(\n  217                              'The lexer returned an invalid token (id=%d, value=%s)',\n  218:                             $tokenId, $tokenValue\n  219                          ));\n  220                      }\n  ...\n  248                          ++$stackPos;\n  249                          $stateStack[$stackPos] = $state = $action;\n  250:                         $this->semStack[$stackPos] = $tokenValue;\n  251                          $this->startAttributeStack[$stackPos] = $startAttributes;\n  252                          $this->endAttributeStack[$stackPos] = $endAttributes;\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\nikic\\php-parser\\test\\code\\parser\\stmt\\hashbang.test:\n    1  Hashbang line\n    2  -----\n    3: #!/usr/bin/env php\n    4  <?php\n    5  \n    .\n    7  \n    8  ?>\n    9: #!/usr/bin/env php\n   10  -----\n   11  array(\n   12      0: Stmt_InlineHTML(\n   13:         value: #!/usr/bin/env php\n   14  \n   15      )\n   ..\n   22      )\n   23      2: Stmt_InlineHTML(\n   24:         value: #!/usr/bin/env php\n   25      )\n   26  )\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\nikic\\php-parser\\test\\code\\parser\\stmt\\namespace\\nsAfterHashbang.test:\n    1  Hashbang followed by namespace declaration\n    2  -----\n    3: #!/usr/bin/env php\n    4  <?php\n    5  \n    .\n    8  array(\n    9      0: Stmt_InlineHTML(\n   10:         value: #!/usr/bin/env php\n   11  \n   12      )\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phar-io\\manifest\\build.xml:\n   17      <target name=\"install-dependencies\" unless=\"dependencies-installed\" depends=\"-dependencies-installed\" description=\"Install dependencies with Composer\">\n   18          <exec executable=\"composer\" taskname=\"composer\">\n   19:             <env key=\"COMPOSER_DISABLE_XDEBUG_WARN\" value=\"1\"/>\n   20              <arg value=\"update\"/>\n   21              <arg value=\"--no-interaction\"/>\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phar-io\\manifest\\tests\\_fixture\\phpunit-5.6.5.xml:\n   34          <component name=\"sebastian/comparator\" version=\"1.2.2\"/>\n   35          <component name=\"sebastian/diff\" version=\"1.4.1\"/>\n   36:         <component name=\"sebastian/environment\" version=\"1.3.8\"/>\n   37          <component name=\"sebastian/exporter\" version=\"2.0.0\"/>\n   38          <component name=\"sebastian/global-state\" version=\"1.1.1\"/>\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phar-io\\manifest\\tests\\_fixture\\test.phar:\n    <binary>\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phar-io\\manifest\\tests\\xml\\ContainsElementTest.php:\n   28      }\n   29  \n   30:     public function testThrowsExceptionWhenVersionAttributeIsMissing() {\n   31          $this->domElement->removeAttribute('version');\n   32          $this->expectException(ManifestElementException::class);\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\php-di\\php-di\\.travis.yml:\n   19    include:\n   20      - php: 7.0\n   21:       env: dependencies=lowest\n   22  \n   23  cache:\n   ..\n   26  \n   27  before_script:\n   28:   - if [[ $(phpenv version-name) == '7.1' ]]; then composer require satooshi/php-coveralls '~1.0' -n ; fi\n   29:   - if [[ $(phpenv version-name) != '7.1' ]]; then composer install -n ; fi\n   30    - if [ \"$dependencies\" = \"lowest\" ]; then composer update --prefer-lowest --prefer-stable -n; fi;\n   31  \n   32  script:\n   33:   - if [[ $(phpenv version-name) == '7.1' ]]; then vendor/bin/phpunit --coverage-clover clover.xml ; fi\n   34:   - if [[ $(phpenv version-name) != '7.1' ]]; then vendor/bin/phpunit ; fi\n   35:   - if [[ $(phpenv version-name) != '7.1' ]]; then vendor/bin/phpstan analyse -l 6 -c phpstan.neon src ; fi\n   36  \n   37  after_script:\n   38:   - if [[ $(phpenv version-name) == '7.1' ]]; then php vendor/bin/coveralls -v ; fi\n   39  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\php-di\\php-di\\change-log.md:\n  215  Read the [news entry](news/11-php-di-4-3-released.md).\n  216  \n  217: - [#176](https://github.com/PHP-DI/PHP-DI/pull/176) New definition type for reading environment variables: `DI\\env()`\n  218  - [#181](https://github.com/PHP-DI/PHP-DI/pull/181) `DI\\FactoryInterface` and `DI\\InvokerInterface` are now auto-registered inside the container so that you can inject them without any configuration needed\n  219  - [#173](https://github.com/PHP-DI/PHP-DI/pull/173) `$container->call(['MyClass', 'method]);` will get `MyClass` from the container if `method()` is not a static method\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\php-di\\php-di\\couscous.yml:\n   92                      text: Inject on an existing instance\n   93                      url: doc/inject-on-instance.html\n   94:                 environments:\n   95:                     text: Injections depending on the environment\n   96:                     url: doc/environments.html\n   97                  ide-integration:\n   98                      text: IDE integration\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\php-di\\php-di\\src\\ContainerBuilder.php:\n   21   * Helper to create and configure a Container.\n   22   *\n   23:  * With the default options, the container created is appropriate for the development environment.\n   24   *\n   25   * Example:\n   ..\n  102  \n  103      /**\n  104:      * Build a container configured for the dev environment.\n  105       */\n  106      public static function buildDevContainer() : Container\n  ...\n  266       * Configure the proxy generation.\n  267       *\n  268:      * For dev environment, use `writeProxiesToFile(false)` (default configuration)\n  269:      * For production environment, use `writeProxiesToFile(true, 'tmp/proxies')`\n  270       *\n  271       * @see http://php-di.org/doc/lazy-injection.html\n  ...\n  347       *\n  348       * Remember to clear APCu on each deploy else your application will have a stale cache. Do not enable the cache\n  349:      * in development environment: any change you will make to the code will be ignored because of the cache.\n  350       *\n  351       * @see http://php-di.org/doc/performances.html\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\php-di\\php-di\\src\\functions.php:\n    6  \n    7  use DI\\Definition\\ArrayDefinitionExtension;\n    8: use DI\\Definition\\EnvironmentVariableDefinition;\n    9  use DI\\Definition\\Helper\\AutowireDefinitionHelper;\n   10  use DI\\Definition\\Helper\\CreateDefinitionHelper;\n   ..\n   94  }\n   95  \n   96: if (! function_exists('DI\\env')) {\n   97      /**\n   98:      * Helper for referencing environment variables.\n   99       *\n  100:      * @param string $variableName The name of the environment variable.\n  101:      * @param mixed $defaultValue The default value to be used if the environment variable is not defined.\n  102       */\n  103:     function env(string $variableName, $defaultValue = null) : EnvironmentVariableDefinition\n  104      {\n  105          // Only mark as optional if the default value was *explicitly* provided.\n  106          $isOptional = 2 === func_num_args();\n  107  \n  108:         return new EnvironmentVariableDefinition($variableName, $isOptional, $defaultValue);\n  109      }\n  110  }\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\php-di\\php-di\\src\\Compiler\\Compiler.php:\n    8  use DI\\Definition\\DecoratorDefinition;\n    9  use DI\\Definition\\Definition;\n   10: use DI\\Definition\\EnvironmentVariableDefinition;\n   11  use DI\\Definition\\Exception\\InvalidDefinition;\n   12  use DI\\Definition\\FactoryDefinition;\n   ..\n  187                  $code = 'return \\DI\\Definition\\StringDefinition::resolveExpression(' . $entryName . ', ' . $expression . ', $this->delegateContainer);';\n  188                  break;\n  189:             case $definition instanceof EnvironmentVariableDefinition:\n  190                  $variableName = $this->compileValue($definition->getVariableName());\n  191                  $isOptional = $this->compileValue($definition->isOptional());\n  192                  $defaultValue = $this->compileValue($definition->getDefaultValue());\n  193                  $code = <<<PHP\n  194:         \\$value = getenv($variableName);\n  195          if (false !== \\$value) return \\$value;\n  196          if (!$isOptional) {\n  197:             throw new \\DI\\Definition\\Exception\\InvalidDefinition(\"The environment variable '{$definition->getVariableName()}' has not been defined\");\n  198          }\n  199          return $defaultValue;\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\php-di\\php-di\\src\\Definition\\EnvironmentVariableDefinition.php:\n    6  \n    7  /**\n    8:  * Defines a reference to an environment variable, with fallback to a default\n    9:  * value if the environment variable is not defined.\n   10   *\n   11   * @author James Harris <james.harris@icecave.com.au>\n   12   */\n   13: class EnvironmentVariableDefinition implements Definition\n   14  {\n   15      /**\n   ..\n   20  \n   21      /**\n   22:      * The name of the environment variable.\n   23       * @var string\n   24       */\n   ..\n   26  \n   27      /**\n   28:      * Whether or not the environment variable definition is optional.\n   29       *\n   30:      * If true and the environment variable given by $variableName has not been\n   31       * defined, $defaultValue is used.\n   32       *\n   ..\n   36  \n   37      /**\n   38:      * The default value to use if the environment variable is optional and not provided.\n   39       * @var mixed\n   40       */\n   ..\n   42  \n   43      /**\n   44:      * @param string $variableName The name of the environment variable\n   45:      * @param bool $isOptional Whether or not the environment variable definition is optional\n   46:      * @param mixed $defaultValue The default value to use if the environment variable is optional and not provided\n   47       */\n   48      public function __construct(string $variableName, bool $isOptional = false, $defaultValue = null)\n   ..\n   64  \n   65      /**\n   66:      * @return string The name of the environment variable\n   67       */\n   68      public function getVariableName() : string\n   ..\n   72  \n   73      /**\n   74:      * @return bool Whether or not the environment variable definition is optional\n   75       */\n   76      public function isOptional() : bool\n   ..\n   80  \n   81      /**\n   82:      * @return mixed The default value to use if the environment variable is optional and not provided\n   83       */\n   84      public function getDefaultValue()\n   ..\n  108          }\n  109  \n  110:         return sprintf('Environment variable (' . PHP_EOL . '%s' . PHP_EOL . ')', $str);\n  111      }\n  112  }\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\php-di\\php-di\\src\\Definition\\Resolver\\EnvironmentVariableResolver.php:\n    6  \n    7  use DI\\Definition\\Definition;\n    8: use DI\\Definition\\EnvironmentVariableDefinition;\n    9  use DI\\Definition\\Exception\\InvalidDefinition;\n   10  \n   11  /**\n   12:  * Resolves a environment variable definition to a value.\n   13   *\n   14   * @author James Harris <james.harris@icecave.com.au>\n   15   */\n   16: class EnvironmentVariableResolver implements DefinitionResolver\n   17  {\n   18      /**\n   ..\n   26      private $variableReader;\n   27  \n   28:     public function __construct(DefinitionResolver $definitionResolver, $variableReader = 'getenv')\n   29      {\n   30          $this->definitionResolver = $definitionResolver;\n   ..\n   33  \n   34      /**\n   35:      * Resolve an environment variable definition to a value.\n   36       *\n   37:      * @param EnvironmentVariableDefinition $definition\n   38       */\n   39      public function resolve(Definition $definition, array $parameters = [])\n   ..\n   47          if (!$definition->isOptional()) {\n   48              throw new InvalidDefinition(sprintf(\n   49:                 \"The environment variable '%s' has not been defined\",\n   50                  $definition->getVariableName()\n   51              ));\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\php-di\\php-di\\src\\Definition\\Resolver\\ResolverDispatcher.php:\n   35      private $objectResolver;\n   36      private $instanceResolver;\n   37:     private $envVariableResolver;\n   38  \n   39      public function __construct(ContainerInterface $container, ProxyFactory $proxyFactory)\n   ..\n  109  \n  110                  return $this->arrayResolver;\n  111:             case $definition instanceof \\DI\\Definition\\EnvironmentVariableDefinition:\n  112:                 if (! $this->envVariableResolver) {\n  113:                     $this->envVariableResolver = new EnvironmentVariableResolver($this);\n  114                  }\n  115  \n  116:                 return $this->envVariableResolver;\n  117              case $definition instanceof \\DI\\Definition\\InstanceDefinition:\n  118                  if (! $this->instanceResolver) {\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpspec\\prophecy\\README.md:\n  130  \n  131  A stub is an object double, which doesn't have any expectations about the object behavior,\n  132: but when put in specific environment, behaves in specific way. Ok, I know, it's cryptic,\n  133  but bear with me for a minute. Simply put, a stub is a dummy, which depending on the called\n  134  method signature does different things (has logic). To create stubs in Prophecy:\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpspec\\prophecy\\src\\Prophecy\\Doubler\\Generator\\ClassCreator.php:\n   16  /**\n   17   * Class creator.\n   18:  * Creates specific class in current environment.\n   19   *\n   20   * @author Konstantin Kudryashov <ever.zet@gmail.com>\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\php-code-coverage\\.travis.yml:\n   14    fast_finish: true\n   15  \n   16: env:\n   17    matrix:\n   18      - DEPENDENCIES=\"high\"\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\php-code-coverage\\ChangeLog-6.1.md:\n   13  ### Changed\n   14  \n   15: * Use `^3.1` of `sebastian/environment` again due to [regression](https://github.com/sebastianbergmann/environment/issues/31)\n   16  \n   17  ## [6.1.2] - 2018-10-23\n   ..\n   25  ### Changed\n   26  \n   27: * This component now allows `^4` of `sebastian/environment`\n   28  \n   29  ## [6.1.0] - 2018-10-16\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\php-code-coverage\\composer.json:\n   33          \"phpunit/php-text-template\": \"^1.2.1\",\n   34          \"sebastian/code-unit-reverse-lookup\": \"^1.0.1\",\n   35:         \"sebastian/environment\": \"^3.1 || ^4.0\",\n   36          \"sebastian/version\": \"^2.0.1\",\n   37          \"theseer/tokenizer\": \"^1.1\"\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\php-code-coverage\\src\\CodeCoverage.php:\n   19  use SebastianBergmann\\CodeCoverage\\Node\\Directory;\n   20  use SebastianBergmann\\CodeUnitReverseLookup\\Wizard;\n   21: use SebastianBergmann\\Environment\\Runtime;\n   22  \n   23  /**\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\php-code-coverage\\src\\Report\\Html\\Renderer.php:\n   14  use SebastianBergmann\\CodeCoverage\\Node\\File as FileNode;\n   15  use SebastianBergmann\\CodeCoverage\\Version;\n   16: use SebastianBergmann\\Environment\\Runtime;\n   17  \n   18  /**\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\php-code-coverage\\src\\Report\\Html\\Renderer\\Template\\js\\bootstrap.min.js:\n    4    * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n    5    */\n    6: !function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?e(exports,require(\"jquery\"),require(\"popper.js\")):\"function\"==typeof define&&define.amd?define([\"exports\",\"jquery\",\"popper.js\"],e):e(t.bootstrap={},t.jQuery,t.Popper)}(this,function(t,e,h){\"use strict\";function i(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function s(t,e,n){return e&&i(t.prototype,e),n&&i(t,n),t}function l(r){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{},e=Object.keys(o);\"function\"==typeof Object.getOwnPropertySymbols&&(e=e.concat(Object.getOwnPropertySymbols(o).filter(function(t){return Object.getOwnPropertyDescriptor(o,t).enumerable}))),e.forEach(function(t){var e,n,i;e=r,i=o[n=t],n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i})}return r}e=e&&e.hasOwnProperty(\"default\")?e.default:e,h=h&&h.hasOwnProperty(\"default\")?h.default:h;var r,n,o,a,c,u,f,d,g,_,m,p,v,y,E,C,T,b,S,I,A,D,w,N,O,k,P,j,H,L,R,x,W,U,q,F,K,M,Q,B,V,Y,z,J,Z,G,$,X,tt,et,nt,it,rt,ot,st,at,lt,ct,ht,ut,ft,dt,gt,_t,mt,pt,vt,yt,Et,Ct,Tt,bt,St,It,At,Dt,wt,Nt,Ot,kt,Pt,jt,Ht,Lt,Rt,xt,Wt,Ut,qt,Ft,Kt,Mt,Qt,Bt,Vt,Yt,zt,Jt,Zt,Gt,$t,Xt,te,ee,ne,ie,re,oe,se,ae,le,ce,he,ue,fe,de,ge,_e,me,pe,ve,ye,Ee,Ce,Te,be,Se,Ie,Ae,De,we,Ne,Oe,ke,Pe,je,He,Le,Re,xe,We,Ue,qe,Fe,Ke,Me,Qe,Be,Ve,Ye,ze,Je,Ze,Ge,$e,Xe,tn,en,nn,rn,on,sn,an,ln,cn,hn,un,fn,dn,gn,_n,mn,pn,vn,yn,En,Cn,Tn,bn,Sn,In,An,Dn,wn,Nn,On,kn,Pn,jn,Hn,Ln,Rn,xn,Wn,Un,qn,Fn=function(i){var e=\"transitionend\";function t(t){var e=this,n=!1;return i(this).one(l.TRANSITION_END,function(){n=!0}),setTimeout(function(){n||l.triggerTransitionEnd(e)},t),this}var l={TRANSITION_END:\"bsTransitionEnd\",getUID:function(t){for(;t+=~~(1e6*Math.random()),document.getElementById(t););return t},getSelectorFromElement:function(t){var e=t.getAttribute(\"data-target\");e&&\"#\"!==e||(e=t.getAttribute(\"href\")||\"\");try{return document.querySelector(e)?e:null}catch(t){return null}},getTransitionDurationFromElement:function(t){if(!t)return 0;var e=i(t).css(\"transition-duration\");return parseFloat(e)?(e=e.split(\",\")[0],1e3*parseFloat(e)):0},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(t){i(t).trigger(e)},supportsTransitionEnd:function(){return Boolean(e)},isElement:function(t){return(t[0]||t).nodeType},typeCheckConfig:function(t,e,n){for(var i in n)if(Object.prototype.hasOwnProperty.call(n,i)){var r=n[i],o=e[i],s=o&&l.isElement(o)?\"element\":(a=o,{}.toString.call(a).match(/\\s([a-z]+)/i)[1].toLowerCase());if(!new RegExp(r).test(s))throw new Error(t.toUpperCase()+': Option \"'+i+'\" provided type \"'+s+'\" but expected type \"'+r+'\".')}var a}};return i.fn.emulateTransitionEnd=t,i.event.special[l.TRANSITION_END]={bindType:e,delegateType:e,handle:function(t){if(i(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}},l}(e),Kn=(n=\"alert\",a=\".\"+(o=\"bs.alert\"),c=(r=e).fn[n],u={CLOSE:\"close\"+a,CLOSED:\"closed\"+a,CLICK_DATA_API:\"click\"+a+\".data-api\"},f=\"alert\",d=\"fade\",g=\"show\",_=function(){function i(t){this._element=t}var t=i.prototype;return t.close=function(t){var e=this._element;t&&(e=this._getRootElement(t)),this._triggerCloseEvent(e).isDefaultPrevented()||this._removeElement(e)},t.dispose=function(){r.removeData(this._element,o),this._element=null},t._getRootElement=function(t){var e=Fn.getSelectorFromElement(t),n=!1;return e&&(n=document.querySelector(e)),n||(n=r(t).closest(\".\"+f)[0]),n},t._triggerCloseEvent=function(t){var e=r.Event(u.CLOSE);return r(t).trigger(e),e},t._removeElement=function(e){var n=this;if(r(e).removeClass(g),r(e).hasClass(d)){var t=Fn.getTransitionDurationFromElement(e);r(e).one(Fn.TRANSITION_END,function(t){return n._destroyElement(e,t)}).emulateTransitionEnd(t)}else this._destroyElement(e)},t._destroyElement=function(t){r(t).detach().trigger(u.CLOSED).remove()},i._jQueryInterface=function(n){return this.each(function(){var t=r(this),e=t.data(o);e||(e=new i(this),t.data(o,e)),\"close\"===n&&e[n](this)})},i._handleDismiss=function(e){return function(t){t&&t.preventDefault(),e.close(this)}},s(i,null,[{key:\"VERSION\",get:function(){return\"4.1.3\"}}]),i}(),r(document).on(u.CLICK_DATA_API,'[data-dismiss=\"alert\"]',_._handleDismiss(new _)),r.fn[n]=_._jQueryInterface,r.fn[n].Constructor=_,r.fn[n].noConflict=function(){return r.fn[n]=c,_._jQueryInterface},_),Mn=(p=\"button\",y=\".\"+(v=\"bs.button\"),E=\".data-api\",C=(m=e).fn[p],T=\"active\",b=\"btn\",I='[data-toggle^=\"button\"]',A='[data-toggle=\"buttons\"]',D=\"input\",w=\".active\",N=\".btn\",O={CLICK_DATA_API:\"click\"+y+E,FOCUS_BLUR_DATA_API:(S=\"focus\")+y+E+\" blur\"+y+E},k=function(){function n(t){this._element=t}var t=n.prototype;return t.toggle=function(){var t=!0,e=!0,n=m(this._element).closest(A)[0];if(n){var i=this._element.querySelector(D);if(i){if(\"radio\"===i.type)if(i.checked&&this._element.classList.contains(T))t=!1;else{var r=n.querySelector(w);r&&m(r).removeClass(T)}if(t){if(i.hasAttribute(\"disabled\")||n.hasAttribute(\"disabled\")||i.classList.contains(\"disabled\")||n.classList.contains(\"disabled\"))return;i.checked=!this._element.classList.contains(T),m(i).trigger(\"change\")}i.focus(),e=!1}}e&&this._element.setAttribute(\"aria-pressed\",!this._element.classList.contains(T)),t&&m(this._element).toggleClass(T)},t.dispose=function(){m.removeData(this._element,v),this._element=null},n._jQueryInterface=function(e){return this.each(function(){var t=m(this).data(v);t||(t=new n(this),m(this).data(v,t)),\"toggle\"===e&&t[e]()})},s(n,null,[{key:\"VERSION\",get:function(){return\"4.1.3\"}}]),n}(),m(document).on(O.CLICK_DATA_API,I,function(t){t.preventDefault();var e=t.target;m(e).hasClass(b)||(e=m(e).closest(N)),k._jQueryInterface.call(m(e),\"toggle\")}).on(O.FOCUS_BLUR_DATA_API,I,function(t){var e=m(t.target).closest(N)[0];m(e).toggleClass(S,/^focus(in)?$/.test(t.type))}),m.fn[p]=k._jQueryInterface,m.fn[p].Constructor=k,m.fn[p].noConflict=function(){return m.fn[p]=C,k._jQueryInterface},k),Qn=(j=\"carousel\",L=\".\"+(H=\"bs.carousel\"),R=\".data-api\",x=(P=e).fn[j],W={interval:5e3,keyboard:!0,slide:!1,pause:\"hover\",wrap:!0},U={interval:\"(number|boolean)\",keyboard:\"boolean\",slide:\"(boolean|string)\",pause:\"(string|boolean)\",wrap:\"boolean\"},q=\"next\",F=\"prev\",K=\"left\",M=\"right\",Q={SLIDE:\"slide\"+L,SLID:\"slid\"+L,KEYDOWN:\"keydown\"+L,MOUSEENTER:\"mouseenter\"+L,MOUSELEAVE:\"mouseleave\"+L,TOUCHEND:\"touchend\"+L,LOAD_DATA_API:\"load\"+L+R,CLICK_DATA_API:\"click\"+L+R},B=\"carousel\",V=\"active\",Y=\"slide\",z=\"carousel-item-right\",J=\"carousel-item-left\",Z=\"carousel-item-next\",G=\"carousel-item-prev\",$=\".active\",X=\".active.carousel-item\",tt=\".carousel-item\",et=\".carousel-item-next, .carousel-item-prev\",nt=\".carousel-indicators\",it=\"[data-slide], [data-slide-to]\",rt='[data-ride=\"carousel\"]',ot=function(){function o(t,e){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this._config=this._getConfig(e),this._element=P(t)[0],this._indicatorsElement=this._element.querySelector(nt),this._addEventListeners()}var t=o.prototype;return t.next=function(){this._isSliding||this._slide(q)},t.nextWhenVisible=function(){!document.hidden&&P(this._element).is(\":visible\")&&\"hidden\"!==P(this._element).css(\"visibility\")&&this.next()},t.prev=function(){this._isSliding||this._slide(F)},t.pause=function(t){t||(this._isPaused=!0),this._element.querySelector(et)&&(Fn.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},t.cycle=function(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},t.to=function(t){var e=this;this._activeElement=this._element.querySelector(X);var n=this._getItemIndex(this._activeElement);if(!(t>this._items.length-1||t<0))if(this._isSliding)P(this._element).one(Q.SLID,function(){return e.to(t)});else{if(n===t)return this.pause(),void this.cycle();var i=n<t?q:F;this._slide(i,this._items[t])}},t.dispose=function(){P(this._element).off(L),P.removeData(this._element,H),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},t._getConfig=function(t){return t=l({},W,t),Fn.typeCheckConfig(j,t,U),t},t._addEventListeners=function(){var e=this;this._config.keyboard&&P(this._element).on(Q.KEYDOWN,function(t){return e._keydown(t)}),\"hover\"===this._config.pause&&(P(this._element).on(Q.MOUSEENTER,function(t){return e.pause(t)}).on(Q.MOUSELEAVE,function(t){return e.cycle(t)}),\"ontouchstart\"in document.documentElement&&P(this._element).on(Q.TOUCHEND,function(){e.pause(),e.touchTimeout&&clearTimeout(e.touchTimeout),e.touchTimeout=setTimeout(function(t){return e.cycle(t)},500+e._config.interval)}))},t._keydown=function(t){if(!/input|textarea/i.test(t.target.tagName))switch(t.which){case 37:t.preventDefault(),this.prev();break;case 39:t.preventDefault(),this.next()}},t._getItemIndex=function(t){return this._items=t&&t.parentNode?[].slice.call(t.parentNode.querySelectorAll(tt)):[],this._items.indexOf(t)},t._getItemByDirection=function(t,e){var n=t===q,i=t===F,r=this._getItemIndex(e),o=this._items.length-1;if((i&&0===r||n&&r===o)&&!this._config.wrap)return e;var s=(r+(t===F?-1:1))%this._items.length;return-1===s?this._items[this._items.length-1]:this._items[s]},t._triggerSlideEvent=function(t,e){var n=this._getItemIndex(t),i=this._getItemIndex(this._element.querySelector(X)),r=P.Event(Q.SLIDE,{relatedTarget:t,direction:e,from:i,to:n});return P(this._element).trigger(r),r},t._setActiveIndicatorElement=function(t){if(this._indicatorsElement){var e=[].slice.call(this._indicatorsElement.querySelectorAll($));P(e).removeClass(V);var n=this._indicatorsElement.children[this._getItemIndex(t)];n&&P(n).addClass(V)}},t._slide=function(t,e){var n,i,r,o=this,s=this._element.querySelector(X),a=this._getItemIndex(s),l=e||s&&this._getItemByDirection(t,s),c=this._getItemIndex(l),h=Boolean(this._interval);if(t===q?(n=J,i=Z,r=K):(n=z,i=G,r=M),l&&P(l).hasClass(V))this._isSliding=!1;else if(!this._triggerSlideEvent(l,r).isDefaultPrevented()&&s&&l){this._isSliding=!0,h&&this.pause(),this._setActiveIndicatorElement(l);var u=P.Event(Q.SLID,{relatedTarget:l,direction:r,from:a,to:c});if(P(this._element).hasClass(Y)){P(l).addClass(i),Fn.reflow(l),P(s).addClass(n),P(l).addClass(n);var f=Fn.getTransitionDurationFromElement(s);P(s).one(Fn.TRANSITION_END,function(){P(l).removeClass(n+\" \"+i).addClass(V),P(s).removeClass(V+\" \"+i+\" \"+n),o._isSliding=!1,setTimeout(function(){return P(o._element).trigger(u)},0)}).emulateTransitionEnd(f)}else P(s).removeClass(V),P(l).addClass(V),this._isSliding=!1,P(this._element).trigger(u);h&&this.cycle()}},o._jQueryInterface=function(i){return this.each(function(){var t=P(this).data(H),e=l({},W,P(this).data());\"object\"==typeof i&&(e=l({},e,i));var n=\"string\"==typeof i?i:e.slide;if(t||(t=new o(this,e),P(this).data(H,t)),\"number\"==typeof i)t.to(i);else if(\"string\"==typeof n){if(\"undefined\"==typeof t[n])throw new TypeError('No method named \"'+n+'\"');t[n]()}else e.interval&&(t.pause(),t.cycle())})},o._dataApiClickHandler=function(t){var e=Fn.getSelectorFromElement(this);if(e){var n=P(e)[0];if(n&&P(n).hasClass(B)){var i=l({},P(n).data(),P(this).data()),r=this.getAttribute(\"data-slide-to\");r&&(i.interval=!1),o._jQueryInterface.call(P(n),i),r&&P(n).data(H).to(r),t.preventDefault()}}},s(o,null,[{key:\"VERSION\",get:function(){return\"4.1.3\"}},{key:\"Default\",get:function(){return W}}]),o}(),P(document).on(Q.CLICK_DATA_API,it,ot._dataApiClickHandler),P(window).on(Q.LOAD_DATA_API,function(){for(var t=[].slice.call(document.querySelectorAll(rt)),e=0,n=t.length;e<n;e++){var i=P(t[e]);ot._jQueryInterface.call(i,i.data())}}),P.fn[j]=ot._jQueryInterface,P.fn[j].Constructor=ot,P.fn[j].noConflict=function(){return P.fn[j]=x,ot._jQueryInterface},ot),Bn=(at=\"collapse\",ct=\".\"+(lt=\"bs.collapse\"),ht=(st=e).fn[at],ut={toggle:!0,parent:\"\"},ft={toggle:\"boolean\",parent:\"(string|element)\"},dt={SHOW:\"show\"+ct,SHOWN:\"shown\"+ct,HIDE:\"hide\"+ct,HIDDEN:\"hidden\"+ct,CLICK_DATA_API:\"click\"+ct+\".data-api\"},gt=\"show\",_t=\"collapse\",mt=\"collapsing\",pt=\"collapsed\",vt=\"width\",yt=\"height\",Et=\".show, .collapsing\",Ct='[data-toggle=\"collapse\"]',Tt=function(){function a(e,t){this._isTransitioning=!1,this._element=e,this._config=this._getConfig(t),this._triggerArray=st.makeArray(document.querySelectorAll('[data-toggle=\"collapse\"][href=\"#'+e.id+'\"],[data-toggle=\"collapse\"][data-target=\"#'+e.id+'\"]'));for(var n=[].slice.call(document.querySelectorAll(Ct)),i=0,r=n.length;i<r;i++){var o=n[i],s=Fn.getSelectorFromElement(o),a=[].slice.call(document.querySelectorAll(s)).filter(function(t){return t===e});null!==s&&0<a.length&&(this._selector=s,this._triggerArray.push(o))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var t=a.prototype;return t.toggle=function(){st(this._element).hasClass(gt)?this.hide():this.show()},t.show=function(){var t,e,n=this;if(!this._isTransitioning&&!st(this._element).hasClass(gt)&&(this._parent&&0===(t=[].slice.call(this._parent.querySelectorAll(Et)).filter(function(t){return t.getAttribute(\"data-parent\")===n._config.parent})).length&&(t=null),!(t&&(e=st(t).not(this._selector).data(lt))&&e._isTransitioning))){var i=st.Event(dt.SHOW);if(st(this._element).trigger(i),!i.isDefaultPrevented()){t&&(a._jQueryInterface.call(st(t).not(this._selector),\"hide\"),e||st(t).data(lt,null));var r=this._getDimension();st(this._element).removeClass(_t).addClass(mt),this._element.style[r]=0,this._triggerArray.length&&st(this._triggerArray).removeClass(pt).attr(\"aria-expanded\",!0),this.setTransitioning(!0);var o=\"scroll\"+(r[0].toUpperCase()+r.slice(1)),s=Fn.getTransitionDurationFromElement(this._element);st(this._element).one(Fn.TRANSITION_END,function(){st(n._element).removeClass(mt).addClass(_t).addClass(gt),n._element.style[r]=\"\",n.setTransitioning(!1),st(n._element).trigger(dt.SHOWN)}).emulateTransitionEnd(s),this._element.style[r]=this._element[o]+\"px\"}}},t.hide=function(){var t=this;if(!this._isTransitioning&&st(this._element).hasClass(gt)){var e=st.Event(dt.HIDE);if(st(this._element).trigger(e),!e.isDefaultPrevented()){var n=this._getDimension();this._element.style[n]=this._element.getBoundingClientRect()[n]+\"px\",Fn.reflow(this._element),st(this._element).addClass(mt).removeClass(_t).removeClass(gt);var i=this._triggerArray.length;if(0<i)for(var r=0;r<i;r++){var o=this._triggerArray[r],s=Fn.getSelectorFromElement(o);if(null!==s)st([].slice.call(document.querySelectorAll(s))).hasClass(gt)||st(o).addClass(pt).attr(\"aria-expanded\",!1)}this.setTransitioning(!0);this._element.style[n]=\"\";var a=Fn.getTransitionDurationFromElement(this._element);st(this._element).one(Fn.TRANSITION_END,function(){t.setTransitioning(!1),st(t._element).removeClass(mt).addClass(_t).trigger(dt.HIDDEN)}).emulateTransitionEnd(a)}}},t.setTransitioning=function(t){this._isTransitioning=t},t.dispose=function(){st.removeData(this._element,lt),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},t._getConfig=function(t){return(t=l({},ut,t)).toggle=Boolean(t.toggle),Fn.typeCheckConfig(at,t,ft),t},t._getDimension=function(){return st(this._element).hasClass(vt)?vt:yt},t._getParent=function(){var n=this,t=null;Fn.isElement(this._config.parent)?(t=this._config.parent,\"undefined\"!=typeof this._config.parent.jquery&&(t=this._config.parent[0])):t=document.querySelector(this._config.parent);var e='[data-toggle=\"collapse\"][data-parent=\"'+this._config.parent+'\"]',i=[].slice.call(t.querySelectorAll(e));return st(i).each(function(t,e){n._addAriaAndCollapsedClass(a._getTargetFromElement(e),[e])}),t},t._addAriaAndCollapsedClass=function(t,e){if(t){var n=st(t).hasClass(gt);e.length&&st(e).toggleClass(pt,!n).attr(\"aria-expanded\",n)}},a._getTargetFromElement=function(t){var e=Fn.getSelectorFromElement(t);return e?document.querySelector(e):null},a._jQueryInterface=function(i){return this.each(function(){var t=st(this),e=t.data(lt),n=l({},ut,t.data(),\"object\"==typeof i&&i?i:{});if(!e&&n.toggle&&/show|hide/.test(i)&&(n.toggle=!1),e||(e=new a(this,n),t.data(lt,e)),\"string\"==typeof i){if(\"undefined\"==typeof e[i])throw new TypeError('No method named \"'+i+'\"');e[i]()}})},s(a,null,[{key:\"VERSION\",get:function(){return\"4.1.3\"}},{key:\"Default\",get:function(){return ut}}]),a}(),st(document).on(dt.CLICK_DATA_API,Ct,function(t){\"A\"===t.currentTarget.tagName&&t.preventDefault();var n=st(this),e=Fn.getSelectorFromElement(this),i=[].slice.call(document.querySelectorAll(e));st(i).each(function(){var t=st(this),e=t.data(lt)?\"toggle\":n.data();Tt._jQueryInterface.call(t,e)})}),st.fn[at]=Tt._jQueryInterface,st.fn[at].Constructor=Tt,st.fn[at].noConflict=function(){return st.fn[at]=ht,Tt._jQueryInterface},Tt),Vn=(St=\"dropdown\",At=\".\"+(It=\"bs.dropdown\"),Dt=\".data-api\",wt=(bt=e).fn[St],Nt=new RegExp(\"38|40|27\"),Ot={HIDE:\"hide\"+At,HIDDEN:\"hidden\"+At,SHOW:\"show\"+At,SHOWN:\"shown\"+At,CLICK:\"click\"+At,CLICK_DATA_API:\"click\"+At+Dt,KEYDOWN_DATA_API:\"keydown\"+At+Dt,KEYUP_DATA_API:\"keyup\"+At+Dt},kt=\"disabled\",Pt=\"show\",jt=\"dropup\",Ht=\"dropright\",Lt=\"dropleft\",Rt=\"dropdown-menu-right\",xt=\"position-static\",Wt='[data-toggle=\"dropdown\"]',Ut=\".dropdown form\",qt=\".dropdown-menu\",Ft=\".navbar-nav\",Kt=\".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)\",Mt=\"top-start\",Qt=\"top-end\",Bt=\"bottom-start\",Vt=\"bottom-end\",Yt=\"right-start\",zt=\"left-start\",Jt={offset:0,flip:!0,boundary:\"scrollParent\",reference:\"toggle\",display:\"dynamic\"},Zt={offset:\"(number|string|function)\",flip:\"boolean\",boundary:\"(string|element)\",reference:\"(string|element)\",display:\"string\"},Gt=function(){function c(t,e){this._element=t,this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var t=c.prototype;return t.toggle=function(){if(!this._element.disabled&&!bt(this._element).hasClass(kt)){var t=c._getParentFromElement(this._element),e=bt(this._menu).hasClass(Pt);if(c._clearMenus(),!e){var n={relatedTarget:this._element},i=bt.Event(Ot.SHOW,n);if(bt(t).trigger(i),!i.isDefaultPrevented()){if(!this._inNavbar){if(\"undefined\"==typeof h)throw new TypeError(\"Bootstrap dropdown require Popper.js (https://popper.js.org)\");var r=this._element;\"parent\"===this._config.reference?r=t:Fn.isElement(this._config.reference)&&(r=this._config.reference,\"undefined\"!=typeof this._config.reference.jquery&&(r=this._config.reference[0])),\"scrollParent\"!==this._config.boundary&&bt(t).addClass(xt),this._popper=new h(r,this._menu,this._getPopperConfig())}\"ontouchstart\"in document.documentElement&&0===bt(t).closest(Ft).length&&bt(document.body).children().on(\"mouseover\",null,bt.noop),this._element.focus(),this._element.setAttribute(\"aria-expanded\",!0),bt(this._menu).toggleClass(Pt),bt(t).toggleClass(Pt).trigger(bt.Event(Ot.SHOWN,n))}}}},t.dispose=function(){bt.removeData(this._element,It),bt(this._element).off(At),this._element=null,(this._menu=null)!==this._popper&&(this._popper.destroy(),this._popper=null)},t.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},t._addEventListeners=function(){var e=this;bt(this._element).on(Ot.CLICK,function(t){t.preventDefault(),t.stopPropagation(),e.toggle()})},t._getConfig=function(t){return t=l({},this.constructor.Default,bt(this._element).data(),t),Fn.typeCheckConfig(St,t,this.constructor.DefaultType),t},t._getMenuElement=function(){if(!this._menu){var t=c._getParentFromElement(this._element);t&&(this._menu=t.querySelector(qt))}return this._menu},t._getPlacement=function(){var t=bt(this._element.parentNode),e=Bt;return t.hasClass(jt)?(e=Mt,bt(this._menu).hasClass(Rt)&&(e=Qt)):t.hasClass(Ht)?e=Yt:t.hasClass(Lt)?e=zt:bt(this._menu).hasClass(Rt)&&(e=Vt),e},t._detectNavbar=function(){return 0<bt(this._element).closest(\".navbar\").length},t._getPopperConfig=function(){var e=this,t={};\"function\"==typeof this._config.offset?t.fn=function(t){return t.offsets=l({},t.offsets,e._config.offset(t.offsets)||{}),t}:t.offset=this._config.offset;var n={placement:this._getPlacement(),modifiers:{offset:t,flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return\"static\"===this._config.display&&(n.modifiers.applyStyle={enabled:!1}),n},c._jQueryInterface=function(e){return this.each(function(){var t=bt(this).data(It);if(t||(t=new c(this,\"object\"==typeof e?e:null),bt(this).data(It,t)),\"string\"==typeof e){if(\"undefined\"==typeof t[e])throw new TypeError('No method named \"'+e+'\"');t[e]()}})},c._clearMenus=function(t){if(!t||3!==t.which&&(\"keyup\"!==t.type||9===t.which))for(var e=[].slice.call(document.querySelectorAll(Wt)),n=0,i=e.length;n<i;n++){var r=c._getParentFromElement(e[n]),o=bt(e[n]).data(It),s={relatedTarget:e[n]};if(t&&\"click\"===t.type&&(s.clickEvent=t),o){var a=o._menu;if(bt(r).hasClass(Pt)&&!(t&&(\"click\"===t.type&&/input|textarea/i.test(t.target.tagName)||\"keyup\"===t.type&&9===t.which)&&bt.contains(r,t.target))){var l=bt.Event(Ot.HIDE,s);bt(r).trigger(l),l.isDefaultPrevented()||(\"ontouchstart\"in document.documentElement&&bt(document.body).children().off(\"mouseover\",null,bt.noop),e[n].setAttribute(\"aria-expanded\",\"false\"),bt(a).removeClass(Pt),bt(r).removeClass(Pt).trigger(bt.Event(Ot.HIDDEN,s)))}}}},c._getParentFromElement=function(t){var e,n=Fn.getSelectorFromElement(t);return n&&(e=document.querySelector(n)),e||t.parentNode},c._dataApiKeydownHandler=function(t){if((/input|textarea/i.test(t.target.tagName)?!(32===t.which||27!==t.which&&(40!==t.which&&38!==t.which||bt(t.target).closest(qt).length)):Nt.test(t.which))&&(t.preventDefault(),t.stopPropagation(),!this.disabled&&!bt(this).hasClass(kt))){var e=c._getParentFromElement(this),n=bt(e).hasClass(Pt);if((n||27===t.which&&32===t.which)&&(!n||27!==t.which&&32!==t.which)){var i=[].slice.call(e.querySelectorAll(Kt));if(0!==i.length){var r=i.indexOf(t.target);38===t.which&&0<r&&r--,40===t.which&&r<i.length-1&&r++,r<0&&(r=0),i[r].focus()}}else{if(27===t.which){var o=e.querySelector(Wt);bt(o).trigger(\"focus\")}bt(this).trigger(\"click\")}}},s(c,null,[{key:\"VERSION\",get:function(){return\"4.1.3\"}},{key:\"Default\",get:function(){return Jt}},{key:\"DefaultType\",get:function(){return Zt}}]),c}(),bt(document).on(Ot.KEYDOWN_DATA_API,Wt,Gt._dataApiKeydownHandler).on(Ot.KEYDOWN_DATA_API,qt,Gt._dataApiKeydownHandler).on(Ot.CLICK_DATA_API+\" \"+Ot.KEYUP_DATA_API,Gt._clearMenus).on(Ot.CLICK_DATA_API,Wt,function(t){t.preventDefault(),t.stopPropagation(),Gt._jQueryInterface.call(bt(this),\"toggle\")}).on(Ot.CLICK_DATA_API,Ut,function(t){t.stopPropagation()}),bt.fn[St]=Gt._jQueryInterface,bt.fn[St].Constructor=Gt,bt.fn[St].noConflict=function(){return bt.fn[St]=wt,Gt._jQueryInterface},Gt),Yn=(Xt=\"modal\",ee=\".\"+(te=\"bs.modal\"),ne=($t=e).fn[Xt],ie={backdrop:!0,keyboard:!0,focus:!0,show:!0},re={backdrop:\"(boolean|string)\",keyboard:\"boolean\",focus:\"boolean\",show:\"boolean\"},oe={HIDE:\"hide\"+ee,HIDDEN:\"hidden\"+ee,SHOW:\"show\"+ee,SHOWN:\"shown\"+ee,FOCUSIN:\"focusin\"+ee,RESIZE:\"resize\"+ee,CLICK_DISMISS:\"click.dismiss\"+ee,KEYDOWN_DISMISS:\"keydown.dismiss\"+ee,MOUSEUP_DISMISS:\"mouseup.dismiss\"+ee,MOUSEDOWN_DISMISS:\"mousedown.dismiss\"+ee,CLICK_DATA_API:\"click\"+ee+\".data-api\"},se=\"modal-scrollbar-measure\",ae=\"modal-backdrop\",le=\"modal-open\",ce=\"fade\",he=\"show\",ue=\".modal-dialog\",fe='[data-toggle=\"modal\"]',de='[data-dismiss=\"modal\"]',ge=\".fixed-top, .fixed-bottom, .is-fixed, .sticky-top\",_e=\".sticky-top\",me=function(){function r(t,e){this._config=this._getConfig(e),this._element=t,this._dialog=t.querySelector(ue),this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._scrollbarWidth=0}var t=r.prototype;return t.toggle=function(t){return this._isShown?this.hide():this.show(t)},t.show=function(t){var e=this;if(!this._isTransitioning&&!this._isShown){$t(this._element).hasClass(ce)&&(this._isTransitioning=!0);var n=$t.Event(oe.SHOW,{relatedTarget:t});$t(this._element).trigger(n),this._isShown||n.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),$t(document.body).addClass(le),this._setEscapeEvent(),this._setResizeEvent(),$t(this._element).on(oe.CLICK_DISMISS,de,function(t){return e.hide(t)}),$t(this._dialog).on(oe.MOUSEDOWN_DISMISS,function(){$t(e._element).one(oe.MOUSEUP_DISMISS,function(t){$t(t.target).is(e._element)&&(e._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return e._showElement(t)}))}},t.hide=function(t){var e=this;if(t&&t.preventDefault(),!this._isTransitioning&&this._isShown){var n=$t.Event(oe.HIDE);if($t(this._element).trigger(n),this._isShown&&!n.isDefaultPrevented()){this._isShown=!1;var i=$t(this._element).hasClass(ce);if(i&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),$t(document).off(oe.FOCUSIN),$t(this._element).removeClass(he),$t(this._element).off(oe.CLICK_DISMISS),$t(this._dialog).off(oe.MOUSEDOWN_DISMISS),i){var r=Fn.getTransitionDurationFromElement(this._element);$t(this._element).one(Fn.TRANSITION_END,function(t){return e._hideModal(t)}).emulateTransitionEnd(r)}else this._hideModal()}}},t.dispose=function(){$t.removeData(this._element,te),$t(window,document,this._element,this._backdrop).off(ee),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._scrollbarWidth=null},t.handleUpdate=function(){this._adjustDialog()},t._getConfig=function(t){return t=l({},ie,t),Fn.typeCheckConfig(Xt,t,re),t},t._showElement=function(t){var e=this,n=$t(this._element).hasClass(ce);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display=\"block\",this._element.removeAttribute(\"aria-hidden\"),this._element.scrollTop=0,n&&Fn.reflow(this._element),$t(this._element).addClass(he),this._config.focus&&this._enforceFocus();var i=$t.Event(oe.SHOWN,{relatedTarget:t}),r=function(){e._config.focus&&e._element.focus(),e._isTransitioning=!1,$t(e._element).trigger(i)};if(n){var o=Fn.getTransitionDurationFromElement(this._element);$t(this._dialog).one(Fn.TRANSITION_END,r).emulateTransitionEnd(o)}else r()},t._enforceFocus=function(){var e=this;$t(document).off(oe.FOCUSIN).on(oe.FOCUSIN,function(t){document!==t.target&&e._element!==t.target&&0===$t(e._element).has(t.target).length&&e._element.focus()})},t._setEscapeEvent=function(){var e=this;this._isShown&&this._config.keyboard?$t(this._element).on(oe.KEYDOWN_DISMISS,function(t){27===t.which&&(t.preventDefault(),e.hide())}):this._isShown||$t(this._element).off(oe.KEYDOWN_DISMISS)},t._setResizeEvent=function(){var e=this;this._isShown?$t(window).on(oe.RESIZE,function(t){return e.handleUpdate(t)}):$t(window).off(oe.RESIZE)},t._hideModal=function(){var t=this;this._element.style.display=\"none\",this._element.setAttribute(\"aria-hidden\",!0),this._isTransitioning=!1,this._showBackdrop(function(){$t(document.body).removeClass(le),t._resetAdjustments(),t._resetScrollbar(),$t(t._element).trigger(oe.HIDDEN)})},t._removeBackdrop=function(){this._backdrop&&($t(this._backdrop).remove(),this._backdrop=null)},t._showBackdrop=function(t){var e=this,n=$t(this._element).hasClass(ce)?ce:\"\";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement(\"div\"),this._backdrop.className=ae,n&&this._backdrop.classList.add(n),$t(this._backdrop).appendTo(document.body),$t(this._element).on(oe.CLICK_DISMISS,function(t){e._ignoreBackdropClick?e._ignoreBackdropClick=!1:t.target===t.currentTarget&&(\"static\"===e._config.backdrop?e._element.focus():e.hide())}),n&&Fn.reflow(this._backdrop),$t(this._backdrop).addClass(he),!t)return;if(!n)return void t();var i=Fn.getTransitionDurationFromElement(this._backdrop);$t(this._backdrop).one(Fn.TRANSITION_END,t).emulateTransitionEnd(i)}else if(!this._isShown&&this._backdrop){$t(this._backdrop).removeClass(he);var r=function(){e._removeBackdrop(),t&&t()};if($t(this._element).hasClass(ce)){var o=Fn.getTransitionDurationFromElement(this._backdrop);$t(this._backdrop).one(Fn.TRANSITION_END,r).emulateTransitionEnd(o)}else r()}else t&&t()},t._adjustDialog=function(){var t=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&t&&(this._element.style.paddingLeft=this._scrollbarWidth+\"px\"),this._isBodyOverflowing&&!t&&(this._element.style.paddingRight=this._scrollbarWidth+\"px\")},t._resetAdjustments=function(){this._element.style.paddingLeft=\"\",this._element.style.paddingRight=\"\"},t._checkScrollbar=function(){var t=document.body.getBoundingClientRect();this._isBodyOverflowing=t.left+t.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},t._setScrollbar=function(){var r=this;if(this._isBodyOverflowing){var t=[].slice.call(document.querySelectorAll(ge)),e=[].slice.call(document.querySelectorAll(_e));$t(t).each(function(t,e){var n=e.style.paddingRight,i=$t(e).css(\"padding-right\");$t(e).data(\"padding-right\",n).css(\"padding-right\",parseFloat(i)+r._scrollbarWidth+\"px\")}),$t(e).each(function(t,e){var n=e.style.marginRight,i=$t(e).css(\"margin-right\");$t(e).data(\"margin-right\",n).css(\"margin-right\",parseFloat(i)-r._scrollbarWidth+\"px\")});var n=document.body.style.paddingRight,i=$t(document.body).css(\"padding-right\");$t(document.body).data(\"padding-right\",n).css(\"padding-right\",parseFloat(i)+this._scrollbarWidth+\"px\")}},t._resetScrollbar=function(){var t=[].slice.call(document.querySelectorAll(ge));$t(t).each(function(t,e){var n=$t(e).data(\"padding-right\");$t(e).removeData(\"padding-right\"),e.style.paddingRight=n||\"\"});var e=[].slice.call(document.querySelectorAll(\"\"+_e));$t(e).each(function(t,e){var n=$t(e).data(\"margin-right\");\"undefined\"!=typeof n&&$t(e).css(\"margin-right\",n).removeData(\"margin-right\")});var n=$t(document.body).data(\"padding-right\");$t(document.body).removeData(\"padding-right\"),document.body.style.paddingRight=n||\"\"},t._getScrollbarWidth=function(){var t=document.createElement(\"div\");t.className=se,document.body.appendChild(t);var e=t.getBoundingClientRect().width-t.clientWidth;return document.body.removeChild(t),e},r._jQueryInterface=function(n,i){return this.each(function(){var t=$t(this).data(te),e=l({},ie,$t(this).data(),\"object\"==typeof n&&n?n:{});if(t||(t=new r(this,e),$t(this).data(te,t)),\"string\"==typeof n){if(\"undefined\"==typeof t[n])throw new TypeError('No method named \"'+n+'\"');t[n](i)}else e.show&&t.show(i)})},s(r,null,[{key:\"VERSION\",get:function(){return\"4.1.3\"}},{key:\"Default\",get:function(){return ie}}]),r}(),$t(document).on(oe.CLICK_DATA_API,fe,function(t){var e,n=this,i=Fn.getSelectorFromElement(this);i&&(e=document.querySelector(i));var r=$t(e).data(te)?\"toggle\":l({},$t(e).data(),$t(this).data());\"A\"!==this.tagName&&\"AREA\"!==this.tagName||t.preventDefault();var o=$t(e).one(oe.SHOW,function(t){t.isDefaultPrevented()||o.one(oe.HIDDEN,function(){$t(n).is(\":visible\")&&n.focus()})});me._jQueryInterface.call($t(e),r,this)}),$t.fn[Xt]=me._jQueryInterface,$t.fn[Xt].Constructor=me,$t.fn[Xt].noConflict=function(){return $t.fn[Xt]=ne,me._jQueryInterface},me),zn=(ve=\"tooltip\",Ee=\".\"+(ye=\"bs.tooltip\"),Ce=(pe=e).fn[ve],Te=\"bs-tooltip\",be=new RegExp(\"(^|\\\\s)\"+Te+\"\\\\S+\",\"g\"),Ae={animation:!0,template:'<div class=\"tooltip\" role=\"tooltip\"><div class=\"arrow\"></div><div class=\"tooltip-inner\"></div></div>',trigger:\"hover focus\",title:\"\",delay:0,html:!(Ie={AUTO:\"auto\",TOP:\"top\",RIGHT:\"right\",BOTTOM:\"bottom\",LEFT:\"left\"}),selector:!(Se={animation:\"boolean\",template:\"string\",title:\"(string|element|function)\",trigger:\"string\",delay:\"(number|object)\",html:\"boolean\",selector:\"(string|boolean)\",placement:\"(string|function)\",offset:\"(number|string)\",container:\"(string|element|boolean)\",fallbackPlacement:\"(string|array)\",boundary:\"(string|element)\"}),placement:\"top\",offset:0,container:!1,fallbackPlacement:\"flip\",boundary:\"scrollParent\"},we=\"out\",Ne={HIDE:\"hide\"+Ee,HIDDEN:\"hidden\"+Ee,SHOW:(De=\"show\")+Ee,SHOWN:\"shown\"+Ee,INSERTED:\"inserted\"+Ee,CLICK:\"click\"+Ee,FOCUSIN:\"focusin\"+Ee,FOCUSOUT:\"focusout\"+Ee,MOUSEENTER:\"mouseenter\"+Ee,MOUSELEAVE:\"mouseleave\"+Ee},Oe=\"fade\",ke=\"show\",Pe=\".tooltip-inner\",je=\".arrow\",He=\"hover\",Le=\"focus\",Re=\"click\",xe=\"manual\",We=function(){function i(t,e){if(\"undefined\"==typeof h)throw new TypeError(\"Bootstrap tooltips require Popper.js (https://popper.js.org)\");this._isEnabled=!0,this._timeout=0,this._hoverState=\"\",this._activeTrigger={},this._popper=null,this.element=t,this.config=this._getConfig(e),this.tip=null,this._setListeners()}var t=i.prototype;return t.enable=function(){this._isEnabled=!0},t.disable=function(){this._isEnabled=!1},t.toggleEnabled=function(){this._isEnabled=!this._isEnabled},t.toggle=function(t){if(this._isEnabled)if(t){var e=this.constructor.DATA_KEY,n=pe(t.currentTarget).data(e);n||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),pe(t.currentTarget).data(e,n)),n._activeTrigger.click=!n._activeTrigger.click,n._isWithActiveTrigger()?n._enter(null,n):n._leave(null,n)}else{if(pe(this.getTipElement()).hasClass(ke))return void this._leave(null,this);this._enter(null,this)}},t.dispose=function(){clearTimeout(this._timeout),pe.removeData(this.element,this.constructor.DATA_KEY),pe(this.element).off(this.constructor.EVENT_KEY),pe(this.element).closest(\".modal\").off(\"hide.bs.modal\"),this.tip&&pe(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,(this._activeTrigger=null)!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},t.show=function(){var e=this;if(\"none\"===pe(this.element).css(\"display\"))throw new Error(\"Please use show on visible elements\");var t=pe.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){pe(this.element).trigger(t);var n=pe.contains(this.element.ownerDocument.documentElement,this.element);if(t.isDefaultPrevented()||!n)return;var i=this.getTipElement(),r=Fn.getUID(this.constructor.NAME);i.setAttribute(\"id\",r),this.element.setAttribute(\"aria-describedby\",r),this.setContent(),this.config.animation&&pe(i).addClass(Oe);var o=\"function\"==typeof this.config.placement?this.config.placement.call(this,i,this.element):this.config.placement,s=this._getAttachment(o);this.addAttachmentClass(s);var a=!1===this.config.container?document.body:pe(document).find(this.config.container);pe(i).data(this.constructor.DATA_KEY,this),pe.contains(this.element.ownerDocument.documentElement,this.tip)||pe(i).appendTo(a),pe(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new h(this.element,i,{placement:s,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:je},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(t){t.originalPlacement!==t.placement&&e._handlePopperPlacementChange(t)},onUpdate:function(t){e._handlePopperPlacementChange(t)}}),pe(i).addClass(ke),\"ontouchstart\"in document.documentElement&&pe(document.body).children().on(\"mouseover\",null,pe.noop);var l=function(){e.config.animation&&e._fixTransition();var t=e._hoverState;e._hoverState=null,pe(e.element).trigger(e.constructor.Event.SHOWN),t===we&&e._leave(null,e)};if(pe(this.tip).hasClass(Oe)){var c=Fn.getTransitionDurationFromElement(this.tip);pe(this.tip).one(Fn.TRANSITION_END,l).emulateTransitionEnd(c)}else l()}},t.hide=function(t){var e=this,n=this.getTipElement(),i=pe.Event(this.constructor.Event.HIDE),r=function(){e._hoverState!==De&&n.parentNode&&n.parentNode.removeChild(n),e._cleanTipClass(),e.element.removeAttribute(\"aria-describedby\"),pe(e.element).trigger(e.constructor.Event.HIDDEN),null!==e._popper&&e._popper.destroy(),t&&t()};if(pe(this.element).trigger(i),!i.isDefaultPrevented()){if(pe(n).removeClass(ke),\"ontouchstart\"in document.documentElement&&pe(document.body).children().off(\"mouseover\",null,pe.noop),this._activeTrigger[Re]=!1,this._activeTrigger[Le]=!1,this._activeTrigger[He]=!1,pe(this.tip).hasClass(Oe)){var o=Fn.getTransitionDurationFromElement(n);pe(n).one(Fn.TRANSITION_END,r).emulateTransitionEnd(o)}else r();this._hoverState=\"\"}},t.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},t.isWithContent=function(){return Boolean(this.getTitle())},t.addAttachmentClass=function(t){pe(this.getTipElement()).addClass(Te+\"-\"+t)},t.getTipElement=function(){return this.tip=this.tip||pe(this.config.template)[0],this.tip},t.setContent=function(){var t=this.getTipElement();this.setElementContent(pe(t.querySelectorAll(Pe)),this.getTitle()),pe(t).removeClass(Oe+\" \"+ke)},t.setElementContent=function(t,e){var n=this.config.html;\"object\"==typeof e&&(e.nodeType||e.jquery)?n?pe(e).parent().is(t)||t.empty().append(e):t.text(pe(e).text()):t[n?\"html\":\"text\"](e)},t.getTitle=function(){var t=this.element.getAttribute(\"data-original-title\");return t||(t=\"function\"==typeof this.config.title?this.config.title.call(this.element):this.config.title),t},t._getAttachment=function(t){return Ie[t.toUpperCase()]},t._setListeners=function(){var i=this;this.config.trigger.split(\" \").forEach(function(t){if(\"click\"===t)pe(i.element).on(i.constructor.Event.CLICK,i.config.selector,function(t){return i.toggle(t)});else if(t!==xe){var e=t===He?i.constructor.Event.MOUSEENTER:i.constructor.Event.FOCUSIN,n=t===He?i.constructor.Event.MOUSELEAVE:i.constructor.Event.FOCUSOUT;pe(i.element).on(e,i.config.selector,function(t){return i._enter(t)}).on(n,i.config.selector,function(t){return i._leave(t)})}pe(i.element).closest(\".modal\").on(\"hide.bs.modal\",function(){return i.hide()})}),this.config.selector?this.config=l({},this.config,{trigger:\"manual\",selector:\"\"}):this._fixTitle()},t._fixTitle=function(){var t=typeof this.element.getAttribute(\"data-original-title\");(this.element.getAttribute(\"title\")||\"string\"!==t)&&(this.element.setAttribute(\"data-original-title\",this.element.getAttribute(\"title\")||\"\"),this.element.setAttribute(\"title\",\"\"))},t._enter=function(t,e){var n=this.constructor.DATA_KEY;(e=e||pe(t.currentTarget).data(n))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),pe(t.currentTarget).data(n,e)),t&&(e._activeTrigger[\"focusin\"===t.type?Le:He]=!0),pe(e.getTipElement()).hasClass(ke)||e._hoverState===De?e._hoverState=De:(clearTimeout(e._timeout),e._hoverState=De,e.config.delay&&e.config.delay.show?e._timeout=setTimeout(function(){e._hoverState===De&&e.show()},e.config.delay.show):e.show())},t._leave=function(t,e){var n=this.constructor.DATA_KEY;(e=e||pe(t.currentTarget).data(n))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),pe(t.currentTarget).data(n,e)),t&&(e._activeTrigger[\"focusout\"===t.type?Le:He]=!1),e._isWithActiveTrigger()||(clearTimeout(e._timeout),e._hoverState=we,e.config.delay&&e.config.delay.hide?e._timeout=setTimeout(function(){e._hoverState===we&&e.hide()},e.config.delay.hide):e.hide())},t._isWithActiveTrigger=function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1},t._getConfig=function(t){return\"number\"==typeof(t=l({},this.constructor.Default,pe(this.element).data(),\"object\"==typeof t&&t?t:{})).delay&&(t.delay={show:t.delay,hide:t.delay}),\"number\"==typeof t.title&&(t.title=t.title.toString()),\"number\"==typeof t.content&&(t.content=t.content.toString()),Fn.typeCheckConfig(ve,t,this.constructor.DefaultType),t},t._getDelegateConfig=function(){var t={};if(this.config)for(var e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t},t._cleanTipClass=function(){var t=pe(this.getTipElement()),e=t.attr(\"class\").match(be);null!==e&&e.length&&t.removeClass(e.join(\"\"))},t._handlePopperPlacementChange=function(t){var e=t.instance;this.tip=e.popper,this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(t.placement))},t._fixTransition=function(){var t=this.getTipElement(),e=this.config.animation;null===t.getAttribute(\"x-placement\")&&(pe(t).removeClass(Oe),this.config.animation=!1,this.hide(),this.show(),this.config.animation=e)},i._jQueryInterface=function(n){return this.each(function(){var t=pe(this).data(ye),e=\"object\"==typeof n&&n;if((t||!/dispose|hide/.test(n))&&(t||(t=new i(this,e),pe(this).data(ye,t)),\"string\"==typeof n)){if(\"undefined\"==typeof t[n])throw new TypeError('No method named \"'+n+'\"');t[n]()}})},s(i,null,[{key:\"VERSION\",get:function(){return\"4.1.3\"}},{key:\"Default\",get:function(){return Ae}},{key:\"NAME\",get:function(){return ve}},{key:\"DATA_KEY\",get:function(){return ye}},{key:\"Event\",get:function(){return Ne}},{key:\"EVENT_KEY\",get:function(){return Ee}},{key:\"DefaultType\",get:function(){return Se}}]),i}(),pe.fn[ve]=We._jQueryInterface,pe.fn[ve].Constructor=We,pe.fn[ve].noConflict=function(){return pe.fn[ve]=Ce,We._jQueryInterface},We),Jn=(qe=\"popover\",Ke=\".\"+(Fe=\"bs.popover\"),Me=(Ue=e).fn[qe],Qe=\"bs-popover\",Be=new RegExp(\"(^|\\\\s)\"+Qe+\"\\\\S+\",\"g\"),Ve=l({},zn.Default,{placement:\"right\",trigger:\"click\",content:\"\",template:'<div class=\"popover\" role=\"tooltip\"><div class=\"arrow\"></div><h3 class=\"popover-header\"></h3><div class=\"popover-body\"></div></div>'}),Ye=l({},zn.DefaultType,{content:\"(string|element|function)\"}),ze=\"fade\",Ze=\".popover-header\",Ge=\".popover-body\",$e={HIDE:\"hide\"+Ke,HIDDEN:\"hidden\"+Ke,SHOW:(Je=\"show\")+Ke,SHOWN:\"shown\"+Ke,INSERTED:\"inserted\"+Ke,CLICK:\"click\"+Ke,FOCUSIN:\"focusin\"+Ke,FOCUSOUT:\"focusout\"+Ke,MOUSEENTER:\"mouseenter\"+Ke,MOUSELEAVE:\"mouseleave\"+Ke},Xe=function(t){var e,n;function i(){return t.apply(this,arguments)||this}n=t,(e=i).prototype=Object.create(n.prototype),(e.prototype.constructor=e).__proto__=n;var r=i.prototype;return r.isWithContent=function(){return this.getTitle()||this._getContent()},r.addAttachmentClass=function(t){Ue(this.getTipElement()).addClass(Qe+\"-\"+t)},r.getTipElement=function(){return this.tip=this.tip||Ue(this.config.template)[0],this.tip},r.setContent=function(){var t=Ue(this.getTipElement());this.setElementContent(t.find(Ze),this.getTitle());var e=this._getContent();\"function\"==typeof e&&(e=e.call(this.element)),this.setElementContent(t.find(Ge),e),t.removeClass(ze+\" \"+Je)},r._getContent=function(){return this.element.getAttribute(\"data-content\")||this.config.content},r._cleanTipClass=function(){var t=Ue(this.getTipElement()),e=t.attr(\"class\").match(Be);null!==e&&0<e.length&&t.removeClass(e.join(\"\"))},i._jQueryInterface=function(n){return this.each(function(){var t=Ue(this).data(Fe),e=\"object\"==typeof n?n:null;if((t||!/destroy|hide/.test(n))&&(t||(t=new i(this,e),Ue(this).data(Fe,t)),\"string\"==typeof n)){if(\"undefined\"==typeof t[n])throw new TypeError('No method named \"'+n+'\"');t[n]()}})},s(i,null,[{key:\"VERSION\",get:function(){return\"4.1.3\"}},{key:\"Default\",get:function(){return Ve}},{key:\"NAME\",get:function(){return qe}},{key:\"DATA_KEY\",get:function(){return Fe}},{key:\"Event\",get:function(){return $e}},{key:\"EVENT_KEY\",get:function(){return Ke}},{key:\"DefaultType\",get:function(){return Ye}}]),i}(zn),Ue.fn[qe]=Xe._jQueryInterface,Ue.fn[qe].Constructor=Xe,Ue.fn[qe].noConflict=function(){return Ue.fn[qe]=Me,Xe._jQueryInterface},Xe),Zn=(en=\"scrollspy\",rn=\".\"+(nn=\"bs.scrollspy\"),on=(tn=e).fn[en],sn={offset:10,method:\"auto\",target:\"\"},an={offset:\"number\",method:\"string\",target:\"(string|element)\"},ln={ACTIVATE:\"activate\"+rn,SCROLL:\"scroll\"+rn,LOAD_DATA_API:\"load\"+rn+\".data-api\"},cn=\"dropdown-item\",hn=\"active\",un='[data-spy=\"scroll\"]',fn=\".active\",dn=\".nav, .list-group\",gn=\".nav-link\",_n=\".nav-item\",mn=\".list-group-item\",pn=\".dropdown\",vn=\".dropdown-item\",yn=\".dropdown-toggle\",En=\"offset\",Cn=\"position\",Tn=function(){function n(t,e){var n=this;this._element=t,this._scrollElement=\"BODY\"===t.tagName?window:t,this._config=this._getConfig(e),this._selector=this._config.target+\" \"+gn+\",\"+this._config.target+\" \"+mn+\",\"+this._config.target+\" \"+vn,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,tn(this._scrollElement).on(ln.SCROLL,function(t){return n._process(t)}),this.refresh(),this._process()}var t=n.prototype;return t.refresh=function(){var e=this,t=this._scrollElement===this._scrollElement.window?En:Cn,r=\"auto\"===this._config.method?t:this._config.method,o=r===Cn?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),[].slice.call(document.querySelectorAll(this._selector)).map(function(t){var e,n=Fn.getSelectorFromElement(t);if(n&&(e=document.querySelector(n)),e){var i=e.getBoundingClientRect();if(i.width||i.height)return[tn(e)[r]().top+o,n]}return null}).filter(function(t){return t}).sort(function(t,e){return t[0]-e[0]}).forEach(function(t){e._offsets.push(t[0]),e._targets.push(t[1])})},t.dispose=function(){tn.removeData(this._element,nn),tn(this._scrollElement).off(rn),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},t._getConfig=function(t){if(\"string\"!=typeof(t=l({},sn,\"object\"==typeof t&&t?t:{})).target){var e=tn(t.target).attr(\"id\");e||(e=Fn.getUID(en),tn(t.target).attr(\"id\",e)),t.target=\"#\"+e}return Fn.typeCheckConfig(en,t,an),t},t._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},t._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},t._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},t._process=function(){var t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),n<=t){var i=this._targets[this._targets.length-1];this._activeTarget!==i&&this._activate(i)}else{if(this._activeTarget&&t<this._offsets[0]&&0<this._offsets[0])return this._activeTarget=null,void this._clear();for(var r=this._offsets.length;r--;){this._activeTarget!==this._targets[r]&&t>=this._offsets[r]&&(\"undefined\"==typeof this._offsets[r+1]||t<this._offsets[r+1])&&this._activate(this._targets[r])}}},t._activate=function(e){this._activeTarget=e,this._clear();var t=this._selector.split(\",\");t=t.map(function(t){return t+'[data-target=\"'+e+'\"],'+t+'[href=\"'+e+'\"]'});var n=tn([].slice.call(document.querySelectorAll(t.join(\",\"))));n.hasClass(cn)?(n.closest(pn).find(yn).addClass(hn),n.addClass(hn)):(n.addClass(hn),n.parents(dn).prev(gn+\", \"+mn).addClass(hn),n.parents(dn).prev(_n).children(gn).addClass(hn)),tn(this._scrollElement).trigger(ln.ACTIVATE,{relatedTarget:e})},t._clear=function(){var t=[].slice.call(document.querySelectorAll(this._selector));tn(t).filter(fn).removeClass(hn)},n._jQueryInterface=function(e){return this.each(function(){var t=tn(this).data(nn);if(t||(t=new n(this,\"object\"==typeof e&&e),tn(this).data(nn,t)),\"string\"==typeof e){if(\"undefined\"==typeof t[e])throw new TypeError('No method named \"'+e+'\"');t[e]()}})},s(n,null,[{key:\"VERSION\",get:function(){return\"4.1.3\"}},{key:\"Default\",get:function(){return sn}}]),n}(),tn(window).on(ln.LOAD_DATA_API,function(){for(var t=[].slice.call(document.querySelectorAll(un)),e=t.length;e--;){var n=tn(t[e]);Tn._jQueryInterface.call(n,n.data())}}),tn.fn[en]=Tn._jQueryInterface,tn.fn[en].Constructor=Tn,tn.fn[en].noConflict=function(){return tn.fn[en]=on,Tn._jQueryInterface},Tn),Gn=(In=\".\"+(Sn=\"bs.tab\"),An=(bn=e).fn.tab,Dn={HIDE:\"hide\"+In,HIDDEN:\"hidden\"+In,SHOW:\"show\"+In,SHOWN:\"shown\"+In,CLICK_DATA_API:\"click\"+In+\".data-api\"},wn=\"dropdown-menu\",Nn=\"active\",On=\"disabled\",kn=\"fade\",Pn=\"show\",jn=\".dropdown\",Hn=\".nav, .list-group\",Ln=\".active\",Rn=\"> li > .active\",xn='[data-toggle=\"tab\"], [data-toggle=\"pill\"], [data-toggle=\"list\"]',Wn=\".dropdown-toggle\",Un=\"> .dropdown-menu .active\",qn=function(){function i(t){this._element=t}var t=i.prototype;return t.show=function(){var n=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&bn(this._element).hasClass(Nn)||bn(this._element).hasClass(On))){var t,i,e=bn(this._element).closest(Hn)[0],r=Fn.getSelectorFromElement(this._element);if(e){var o=\"UL\"===e.nodeName?Rn:Ln;i=(i=bn.makeArray(bn(e).find(o)))[i.length-1]}var s=bn.Event(Dn.HIDE,{relatedTarget:this._element}),a=bn.Event(Dn.SHOW,{relatedTarget:i});if(i&&bn(i).trigger(s),bn(this._element).trigger(a),!a.isDefaultPrevented()&&!s.isDefaultPrevented()){r&&(t=document.querySelector(r)),this._activate(this._element,e);var l=function(){var t=bn.Event(Dn.HIDDEN,{relatedTarget:n._element}),e=bn.Event(Dn.SHOWN,{relatedTarget:i});bn(i).trigger(t),bn(n._element).trigger(e)};t?this._activate(t,t.parentNode,l):l()}}},t.dispose=function(){bn.removeData(this._element,Sn),this._element=null},t._activate=function(t,e,n){var i=this,r=(\"UL\"===e.nodeName?bn(e).find(Rn):bn(e).children(Ln))[0],o=n&&r&&bn(r).hasClass(kn),s=function(){return i._transitionComplete(t,r,n)};if(r&&o){var a=Fn.getTransitionDurationFromElement(r);bn(r).one(Fn.TRANSITION_END,s).emulateTransitionEnd(a)}else s()},t._transitionComplete=function(t,e,n){if(e){bn(e).removeClass(Pn+\" \"+Nn);var i=bn(e.parentNode).find(Un)[0];i&&bn(i).removeClass(Nn),\"tab\"===e.getAttribute(\"role\")&&e.setAttribute(\"aria-selected\",!1)}if(bn(t).addClass(Nn),\"tab\"===t.getAttribute(\"role\")&&t.setAttribute(\"aria-selected\",!0),Fn.reflow(t),bn(t).addClass(Pn),t.parentNode&&bn(t.parentNode).hasClass(wn)){var r=bn(t).closest(jn)[0];if(r){var o=[].slice.call(r.querySelectorAll(Wn));bn(o).addClass(Nn)}t.setAttribute(\"aria-expanded\",!0)}n&&n()},i._jQueryInterface=function(n){return this.each(function(){var t=bn(this),e=t.data(Sn);if(e||(e=new i(this),t.data(Sn,e)),\"string\"==typeof n){if(\"undefined\"==typeof e[n])throw new TypeError('No method named \"'+n+'\"');e[n]()}})},s(i,null,[{key:\"VERSION\",get:function(){return\"4.1.3\"}}]),i}(),bn(document).on(Dn.CLICK_DATA_API,xn,function(t){t.preventDefault(),qn._jQueryInterface.call(bn(this),\"show\")}),bn.fn.tab=qn._jQueryInterface,bn.fn.tab.Constructor=qn,bn.fn.tab.noConflict=function(){return bn.fn.tab=An,qn._jQueryInterface},qn);!function(t){if(\"undefined\"==typeof t)throw new TypeError(\"Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.\");var e=t.fn.jquery.split(\" \")[0].split(\".\");if(e[0]<2&&e[1]<9||1===e[0]&&9===e[1]&&e[2]<1||4<=e[0])throw new Error(\"Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0\")}(e),t.Util=Fn,t.Alert=Kn,t.Button=Mn,t.Carousel=Qn,t.Collapse=Bn,t.Dropdown=Vn,t.Modal=Yn,t.Popover=Jn,t.Scrollspy=Zn,t.Tab=Gn,t.Tooltip=zn,Object.defineProperty(t,\"__esModule\",{value:!0})});\n    7  //# sourceMappingURL=bootstrap.min.js.map\n    8  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\php-code-coverage\\src\\Report\\Xml\\BuildInformation.php:\n   10  namespace SebastianBergmann\\CodeCoverage\\Report\\Xml;\n   11  \n   12: use SebastianBergmann\\Environment\\Runtime;\n   13  \n   14  final class BuildInformation\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\php-code-coverage\\src\\Report\\Xml\\Facade.php:\n   16  use SebastianBergmann\\CodeCoverage\\RuntimeException;\n   17  use SebastianBergmann\\CodeCoverage\\Version;\n   18: use SebastianBergmann\\Environment\\Runtime;\n   19  \n   20  final class Facade\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\php-file-iterator\\.travis.yml:\n    8    - master\n    9  \n   10: env:\n   11    matrix:\n   12      - DEPENDENCIES=\"high\"\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\php-token-stream\\build.xml:\n   10      <target name=\"composer\" depends=\"clean\" description=\"Install dependencies with Composer\">\n   11          <exec executable=\"composer\" taskname=\"composer\">\n   12:             <env key=\"COMPOSER_DISABLE_XDEBUG_WARN\" value=\"1\"/>\n   13              <arg value=\"update\"/>\n   14              <arg value=\"--no-interaction\"/>\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\.travis.yml:\n   14    fast_finish: true\n   15  \n   16: env:\n   17    matrix:\n   18      - DEPENDENCIES=\"high\"\n   ..\n   29  \n   30  before_script:\n   31:   - echo 'zend.assertions=1' >> ~/.phpenv/versions/$(phpenv version-name)/etc/conf.d/travis.ini\n   32:   - echo 'assert.exception=On' >> ~/.phpenv/versions/$(phpenv version-name)/etc/conf.d/travis.ini\n   33  \n   34  script:\n   ..\n   50      - stage: Static Code Analysis\n   51        php: 7.3\n   52:       env: php-cs-fixer\n   53        install:\n   54:         - phpenv config-rm xdebug.ini\n   55        script:\n   56          - ./tools/php-cs-fixer fix --dry-run -v --show-progress=dots --diff-format=udiff\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\build.xml:\n  202          </copy>\n  203  \n  204:         <copy file=\"${basedir}/vendor/sebastian/environment/LICENSE\" tofile=\"${basedir}/build/phar/sebastian-environment/LICENSE\"/>\n  205:         <copy todir=\"${basedir}/build/phar/sebastian-environment\">\n  206:             <fileset dir=\"${basedir}/vendor/sebastian/environment/src\">\n  207                  <include name=\"**/*.php\" />\n  208              </fileset>\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\composer.json:\n   39          \"sebastian/comparator\": \"^3.0\",\n   40          \"sebastian/diff\": \"^3.0\",\n   41:         \"sebastian/environment\": \"^4.0\",\n   42          \"sebastian/exporter\": \"^3.1\",\n   43          \"sebastian/global-state\": \"^2.0\",\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\phpunit:\n    1: #!/usr/bin/env php\n    2  <?php\n    3  /*\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\phpunit.xsd:\n  205                  <xs:element name=\"const\" type=\"namedValueType\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n  206                  <xs:element name=\"var\" type=\"namedValueType\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n  207:                 <xs:element name=\"env\" type=\"namedValueType\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n  208                  <xs:element name=\"post\" type=\"namedValueType\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n  209                  <xs:element name=\"get\" type=\"namedValueType\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\src\\Runner\\PhptTestCase.php:\n  134          }\n  135  \n  136:         if (isset($sections['ENV'])) {\n  137:             $env = $this->parseEnvSection($sections['ENV']);\n  138:             $this->phpUtil->setEnv($env);\n  139          }\n  140  \n  ...\n  273      }\n  274  \n  275:     private function parseEnvSection(string $content): array\n  276      {\n  277:         $env = [];\n  278  \n  279          foreach (\\explode(\"\\n\", \\trim($content)) as $e) {\n  ...\n  281  \n  282              if (!empty($e[0]) && isset($e[1])) {\n  283:                 $env[$e[0]] = $e[1];\n  284              }\n  285          }\n  286  \n  287:         return $env;\n  288      }\n  289  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\src\\TextUI\\ResultPrinter.php:\n   22  use PHPUnit\\Util\\InvalidArgumentHelper;\n   23  use PHPUnit\\Util\\Printer;\n   24: use SebastianBergmann\\Environment\\Console;\n   25  use SebastianBergmann\\Timer\\Timer;\n   26  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\src\\TextUI\\TestRunner.php:\n   57  use SebastianBergmann\\CodeCoverage\\Report\\Xml\\Facade as XmlReport;\n   58  use SebastianBergmann\\Comparator\\Comparator;\n   59: use SebastianBergmann\\Environment\\Runtime;\n   60  use SebastianBergmann\\Invoker\\Invoker;\n   61  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\src\\Util\\Blacklist.php:\n   26  use SebastianBergmann\\Comparator\\Comparator;\n   27  use SebastianBergmann\\Diff\\Diff;\n   28: use SebastianBergmann\\Environment\\Runtime;\n   29  use SebastianBergmann\\Exporter\\Exporter;\n   30  use SebastianBergmann\\FileIterator\\Facade as FileIteratorFacade;\n   ..\n  106          Diff::class => 1,\n  107  \n  108:         // sebastian/environment\n  109          Runtime::class => 1,\n  110  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\src\\Util\\Configuration.php:\n  146   *     <const name=\"foo\" value=\"bar\"/>\n  147   *     <var name=\"foo\" value=\"bar\"/>\n  148:  *     <env name=\"foo\" value=\"bar\"/>\n  149   *     <post name=\"foo\" value=\"bar\"/>\n  150   *     <get name=\"foo\" value=\"bar\"/>\n  ...\n  467              'const'        => [],\n  468              'var'          => [],\n  469:             'env'          => [],\n  470              'post'         => [],\n  471              'get'          => [],\n  ...\n  500          }\n  501  \n  502:         foreach (['var', 'env', 'post', 'get', 'cookie', 'server', 'files', 'request'] as $array) {\n  503              foreach ($this->xpath->query('php/' . $array) as $var) {\n  504                  /** @var DOMElement $var */\n  ...\n  588          }\n  589  \n  590:         foreach ($configuration['env'] as $name => $data) {\n  591              $value = $data['value'];\n  592              $force = $data['force'] ?? false;\n  593  \n  594:             if ($force || \\getenv($name) === false) {\n  595:                 \\putenv(\"{$name}={$value}\");\n  596              }\n  597  \n  598:             $value = \\getenv($name);\n  599  \n  600:             if (!isset($_ENV[$name])) {\n  601:                 $_ENV[$name] = $value;\n  602              }\n  603  \n  604              if ($force === true) {\n  605:                 $_ENV[$name] = $value;\n  606              }\n  607          }\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\src\\Util\\GlobalState.php:\n   18       */\n   19      private const SUPER_GLOBAL_ARRAYS = [\n   20:         '_ENV',\n   21          '_POST',\n   22          '_GET',\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\src\\Util\\Test.php:\n   24  use ReflectionFunction;\n   25  use ReflectionMethod;\n   26: use SebastianBergmann\\Environment\\OperatingSystem;\n   27  use Traversable;\n   28  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\src\\Util\\TestResultCache.php:\n   72          }\n   73  \n   74:         $this->cacheFilename = $filepath ?? $_ENV['PHPUNIT_RESULT_CACHE'] ?? self::DEFAULT_RESULT_CACHE_FILENAME;\n   75      }\n   76  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\src\\Util\\PHP\\AbstractPhpProcess.php:\n   18  use PHPUnit\\Framework\\TestFailure;\n   19  use PHPUnit\\Framework\\TestResult;\n   20: use SebastianBergmann\\Environment\\Runtime;\n   21  \n   22  /**\n   ..\n   48       * @var array<string, string>\n   49       */\n   50:     protected $env = [];\n   51  \n   52      /**\n   ..\n  120  \n  121      /**\n  122:      * Sets the array of environment variables to start the child process with\n  123       *\n  124:      * @param array<string, string> $env\n  125       */\n  126:     public function setEnv(array $env): void\n  127      {\n  128:         $this->env = $env;\n  129      }\n  130  \n  131      /**\n  132:      * Returns the array of environment variables to start the child process with\n  133       */\n  134:     public function getEnv(): array\n  135      {\n  136:         return $this->env;\n  137      }\n  138  \n  ...\n  243  \n  244              try {\n  245:                 if (\\strpos($stdout, \"#!/usr/bin/env php\\n\") === 0) {\n  246                      $stdout = \\substr($stdout, 19);\n  247                  }\n  248  \n  249:                 $childResult = \\unserialize(\\str_replace(\"#!/usr/bin/env php\\n\", '', $stdout));\n  250                  \\restore_error_handler();\n  251              } catch (ErrorException $e) {\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\src\\Util\\PHP\\DefaultPhpProcess.php:\n   60          $handles = $this->getHandles();\n   61  \n   62:         $env = null;\n   63  \n   64:         if ($this->env) {\n   65:             $env = $_SERVER ?? [];\n   66:             unset($env['argv'], $env['argc']);\n   67:             $env = \\array_merge($env, $this->env);\n   68  \n   69:             foreach ($env as $envKey => $envVar) {\n   70:                 if (\\is_array($envVar)) {\n   71:                     unset($env[$envKey]);\n   72                  }\n   73              }\n   ..\n   85              $pipes,\n   86              null,\n   87:             $env\n   88          );\n   89  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\src\\Util\\PHP\\WindowsPhpProcess.php:\n   31          if (false === $stdout_handle = \\tmpfile()) {\n   32              throw new Exception(\n   33:                 'A temporary file could not be created; verify that your TEMP environment variable is writable'\n   34              );\n   35          }\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\tests\\_files\\configuration.xml:\n  149          <const name=\"BAR\" value=\"true\"/>\n  150          <var name=\"foo\" value=\"false\"/>\n  151:         <env name=\"foo\" value=\"true\"/>\n  152:         <env name=\"foo_force\" value=\"forced\" force=\"true\"/>\n  153:         <env name=\"bar\" value=\"true\" verbatim=\"true\"/>\n  154          <post name=\"foo\" value=\"bar\"/>\n  155          <get name=\"foo\" value=\"bar\"/>\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\tests\\_files\\configuration_xinclude.xml:\n   71      <const name=\"BAR\" value=\"true\"/>\n   72      <var name=\"foo\" value=\"false\"/>\n   73:     <env name=\"foo\" value=\"true\"/>\n   74:     <env name=\"foo_force\" value=\"forced\" force=\"true\"/>\n   75:     <env name=\"bar\" value=\"true\" verbatim=\"true\"/>\n   76      <post name=\"foo\" value=\"bar\"/>\n   77      <get name=\"foo\" value=\"bar\"/>\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\tests\\end-to-end\\phpt-env.phpt:\n    1  --TEST--\n    2: PHPT runner should support ENV section\n    3: --ENV--\n    4  FOO=bar\n    5  --FILE--\n    .\n   10  ?>\n   11  --EXPECTF_EXTERNAL--\n   12: _files/phpt-env.expected.txt\n   13  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\tests\\end-to-end\\regression\\GitHub\\1216\\bootstrap1216.php:\n    8   * file that was distributed with this source code.\n    9   */\n   10: $_ENV['configAvailableInBootstrap'] = isset($_ENV['loadedFromConfig']);\n   11  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\tests\\end-to-end\\regression\\GitHub\\1216\\Issue1216Test.php:\n   14      public function testConfigAvailableInBootstrap(): void\n   15      {\n   16:         $this->assertTrue($_ENV['configAvailableInBootstrap']);\n   17      }\n   18  }\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\tests\\end-to-end\\regression\\GitHub\\1216\\phpunit1216.xml:\n    4      </testsuite>\n    5      <php>\n    6:         <env name=\"loadedFromConfig\" value=\"1\"/>\n    7      </php>\n    8  </phpunit>\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\tests\\unit\\Framework\\TestCaseTest.php:\n   22      {\n   23          $GLOBALS['a']  = 'a';\n   24:         $_ENV['b']     = 'b';\n   25          $_POST['c']    = 'c';\n   26          $_GET['d']     = 'd';\n   ..\n   36          unset(\n   37              $GLOBALS['a'],\n   38:             $_ENV['b'],\n   39              $_POST['c'],\n   40              $_GET['d'],\n   ..\n  353          $this->assertEquals('a', $a);\n  354          $this->assertEquals('a', $GLOBALS['a']);\n  355:         $this->assertEquals('b', $_ENV['b']);\n  356          $this->assertEquals('c', $_POST['c']);\n  357          $this->assertEquals('d', $_GET['d']);\n  ...\n  365          $GLOBALS['a']   = 'aa';\n  366          $GLOBALS['foo'] = 'bar';\n  367:         $_ENV['b']      = 'bb';\n  368          $_POST['c']     = 'cc';\n  369          $_GET['d']      = 'dd';\n  ...\n  377          $this->assertEquals('aa', $GLOBALS['a']);\n  378          $this->assertEquals('bar', $GLOBALS['foo']);\n  379:         $this->assertEquals('bb', $_ENV['b']);\n  380          $this->assertEquals('cc', $_POST['c']);\n  381          $this->assertEquals('dd', $_GET['d']);\n  ...\n  398          $this->assertEquals('a', $a);\n  399          $this->assertEquals('a', $GLOBALS['a']);\n  400:         $this->assertEquals('b', $_ENV['b']);\n  401          $this->assertEquals('c', $_POST['c']);\n  402          $this->assertEquals('d', $_GET['d']);\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\tests\\unit\\Util\\ConfigurationTest.php:\n  352                  'const'  => ['FOO' => ['value' => false], 'BAR' => ['value' => true]],\n  353                  'var'    => ['foo' => ['value' => false]],\n  354:                 'env'    => ['foo' => ['value' => true], 'bar' => ['value' => 'true', 'verbatim' => true], 'foo_force' => ['value' => 'forced', 'force' => true]],\n  355                  'post'   => ['foo' => ['value' => 'bar']],\n  356                  'get'    => ['foo' => ['value' => 'bar']],\n  ...\n  381          $this->assertTrue(\\BAR);\n  382          $this->assertFalse($GLOBALS['foo']);\n  383:         $this->assertTrue((bool) $_ENV['foo']);\n  384:         $this->assertEquals(1, \\getenv('foo'));\n  385          $this->assertEquals('bar', $_POST['foo']);\n  386          $this->assertEquals('bar', $_GET['foo']);\n  ...\n  399       * @see https://github.com/sebastianbergmann/phpunit/issues/1181\n  400       */\n  401:     public function testHandlePHPConfigurationDoesNotOverwrittenExistingEnvArrayVariables(): void\n  402      {\n  403:         $_ENV['foo'] = false;\n  404          $this->configuration->handlePHPConfiguration();\n  405  \n  406:         $this->assertFalse($_ENV['foo']);\n  407:         $this->assertEquals('forced', \\getenv('foo_force'));\n  408      }\n  409  \n  ...\n  413       * @see https://github.com/sebastianbergmann/phpunit/issues/2353\n  414       */\n  415:     public function testHandlePHPConfigurationDoesForceOverwrittenExistingEnvArrayVariables(): void\n  416      {\n  417:         $_ENV['foo_force'] = false;\n  418          $this->configuration->handlePHPConfiguration();\n  419  \n  420:         $this->assertEquals('forced', $_ENV['foo_force']);\n  421:         $this->assertEquals('forced', \\getenv('foo_force'));\n  422      }\n  423  \n  ...\n  427       * @see https://github.com/sebastianbergmann/phpunit/issues/1181\n  428       */\n  429:     public function testHandlePHPConfigurationDoesNotOverriteVariablesFromPutEnv(): void\n  430      {\n  431:         $backupFoo = \\getenv('foo');\n  432  \n  433:         \\putenv('foo=putenv');\n  434          $this->configuration->handlePHPConfiguration();\n  435  \n  436:         $this->assertEquals('putenv', $_ENV['foo']);\n  437:         $this->assertEquals('putenv', \\getenv('foo'));\n  438  \n  439          if ($backupFoo === false) {\n  440:             \\putenv('foo');     // delete variable from environment\n  441          } else {\n  442:             \\putenv(\"foo=$backupFoo\");\n  443          }\n  444      }\n  ...\n  449       * @see https://github.com/sebastianbergmann/phpunit/issues/1181\n  450       */\n  451:     public function testHandlePHPConfigurationDoesOverwriteVariablesFromPutEnvWhenForced(): void\n  452      {\n  453:         \\putenv('foo_force=putenv');\n  454          $this->configuration->handlePHPConfiguration();\n  455  \n  456:         $this->assertEquals('forced', $_ENV['foo_force']);\n  457:         $this->assertEquals('forced', \\getenv('foo_force'));\n  458      }\n  459  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\tests\\unit\\Util\\PHP\\AbstractPhpProcessTest.php:\n  104      }\n  105  \n  106:     public function testEnvGetterAndSetter(): void\n  107      {\n  108:         $this->phpProcess->setEnv(['foo' => 'bar']);\n  109  \n  110:         $this->assertEquals(['foo' => 'bar'], $this->phpProcess->getEnv());\n  111      }\n  112  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\psr\\http-message\\src\\ServerRequestInterface.php:\n   16   *\n   17   * Additionally, it encapsulates all data as it has arrived to the\n   18:  * application from the CGI and/or PHP environment, including:\n   19   *\n   20   * - The values represented in $_SERVER.\n   ..\n   46       * Retrieve server parameters.\n   47       *\n   48:      * Retrieves data related to the incoming request environment,\n   49       * typically derived from PHP's $_SERVER superglobal. The data IS NOT\n   50       * REQUIRED to originate from $_SERVER.\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\psr\\http-message\\src\\UploadedFileInterface.php:\n   35       *\n   36       * Use this method as an alternative to move_uploaded_file(). This method is\n   37:      * guaranteed to work in both SAPI and non-SAPI environments.\n   38:      * Implementations must determine which environment they are in, and use the\n   39       * appropriate method (move_uploaded_file(), rename(), or a stream\n   40       * operation) to perform the operation.\n   ..\n   49       * an exception.\n   50       *\n   51:      * When used in an SAPI environment where $_FILES is populated, when writing\n   52       * files via moveTo(), is_uploaded_file() and move_uploaded_file() SHOULD be\n   53       * used to ensure permissions and upload status are verified correctly.\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\sebastian\\comparator\\.travis.yml:\n    8    - master\n    9  \n   10: env:\n   11    matrix:\n   12      - DEPENDENCIES=\"high\"\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\sebastian\\comparator\\build.xml:\n   10      <target name=\"composer\" depends=\"clean\" description=\"Install dependencies with Composer\">\n   11          <exec executable=\"composer\" taskname=\"composer\">\n   12:             <env key=\"COMPOSER_DISABLE_XDEBUG_WARN\" value=\"1\"/>\n   13              <arg value=\"update\"/>\n   14              <arg value=\"--no-interaction\"/>\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\sebastian\\environment\\.php_cs.dist:\n    1  <?php\n    2  $header = <<<'EOF'\n    3: This file is part of sebastian/environment.\n    4  \n    5  (c) Sebastian Bergmann <sebastian@phpunit.de>\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\sebastian\\environment\\.travis.yml:\n    7    - 7.4snapshot\n    8  \n    9: env:\n   10    matrix:\n   11      - DRIVER=\"phpdbg\"\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\sebastian\\environment\\build.xml:\n    1  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    2: <project name=\"environment\" default=\"setup\">\n    3      <target name=\"setup\" depends=\"clean,composer\"/>\n    4  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\sebastian\\environment\\ChangeLog.md:\n    1: # Changes in sebastianbergmann/environment\n    2  \n    3: All notable changes in `sebastianbergmann/environment` are documented in this file using the [Keep a CHANGELOG](http://keepachangelog.com/) principles.\n    4  \n    5  ## [4.2.2] - 2019-05-05\n    .\n    7  ### Fixed\n    8  \n    9: * Fixed [#44](https://github.com/sebastianbergmann/environment/pull/44): `TypeError` in `Console::getNumberOfColumnsInteractive()`\n   10  \n   11  ## [4.2.1] - 2019-04-25\n   ..\n   19  ### Added\n   20  \n   21: * Implemented [#36](https://github.com/sebastianbergmann/environment/pull/36): `Runtime::getCurrentSettings()`\n   22  \n   23  ## [4.1.0] - 2019-02-01\n   ..\n   26  \n   27  * Implemented `Runtime::getNameWithVersionAndCodeCoverageDriver()` method\n   28: * Implemented [#34](https://github.com/sebastianbergmann/environment/pull/34): Support for PCOV extension\n   29  \n   30  ## [4.0.2] - 2019-01-28\n   ..\n   32  ### Fixed\n   33  \n   34: * Fixed [#33](https://github.com/sebastianbergmann/environment/issues/33): `Runtime::discardsComments()` returns true too eagerly\n   35  \n   36  ### Removed\n   ..\n   42  ### Fixed\n   43  \n   44: * Fixed [#31](https://github.com/sebastianbergmann/environment/issues/31): Regressions in `Console` class\n   45  \n   46  ## [4.0.0] - 2018-10-23 [YANKED]\n   ..\n   48  ### Fixed\n   49  \n   50: * Fixed [#25](https://github.com/sebastianbergmann/environment/pull/25): `Console::hasColorSupport()` does not work on Windows\n   51  \n   52  ### Removed\n   ..\n   58  ### Added\n   59  \n   60: * Implemented [#21](https://github.com/sebastianbergmann/environment/issues/21): Equivalent of `PHP_OS_FAMILY` (for PHP < 7.2) \n   61  \n   62  ## [3.0.4] - 2017-06-20\n   ..\n   64  ### Fixed\n   65  \n   66: * Fixed [#20](https://github.com/sebastianbergmann/environment/pull/20): PHP 7 mode of HHVM not forced\n   67  \n   68  ## [3.0.3] - 2017-05-18\n   ..\n   70  ### Fixed\n   71  \n   72: * Fixed [#18](https://github.com/sebastianbergmann/environment/issues/18): `Uncaught TypeError: preg_match() expects parameter 2 to be string, null given`\n   73  \n   74  ## [3.0.2] - 2017-04-21\n   ..\n   76  ### Fixed\n   77  \n   78: * Fixed [#17](https://github.com/sebastianbergmann/environment/issues/17): `Uncaught TypeError: trim() expects parameter 1 to be string, boolean given`\n   79  \n   80  ## [3.0.1] - 2017-04-21\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\sebastian\\environment\\composer.json:\n    1  {\n    2:     \"name\": \"sebastian/environment\",\n    3:     \"description\": \"Provides functionality to handle HHVM/PHP environments\",\n    4:     \"keywords\": [\"environment\",\"hhvm\",\"xdebug\"],\n    5:     \"homepage\": \"http://www.github.com/sebastianbergmann/environment\",\n    6      \"license\": \"BSD-3-Clause\",\n    7      \"authors\": [\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\sebastian\\environment\\LICENSE:\n    1: sebastian/environment\n    2  \n    3  Copyright (c) 2014-2019, Sebastian Bergmann <sebastian@phpunit.de>.\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\sebastian\\environment\\README.md:\n    1: # sebastian/environment\n    2  \n    3  This component provides functionality that helps writing PHP code that has runtime-specific (PHP / HHVM) execution paths.\n    4  \n    5: [![Latest Stable Version](https://img.shields.io/packagist/v/sebastian/environment.svg?style=flat-square)](https://packagist.org/packages/sebastian/environment)\n    6  [![Minimum PHP Version](https://img.shields.io/badge/php-%3E%3D%207.1-8892BF.svg?style=flat-square)](https://php.net/)\n    7: [![Build Status](https://travis-ci.org/sebastianbergmann/environment.svg?branch=master)](https://travis-ci.org/sebastianbergmann/environment)\n    8  \n    9  ## Installation\n   ..\n   11  You can add this library as a local, per-project dependency to your project using [Composer](https://getcomposer.org/):\n   12  \n   13:     composer require sebastian/environment\n   14  \n   15  If you only need this library during development, for instance to run your project's test suite, then you should add it as a development-time dependency:\n   16  \n   17:     composer require --dev sebastian/environment\n   18  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\sebastian\\environment\\src\\Console.php:\n    1  <?php declare(strict_types=1);\n    2  /*\n    3:  * This file is part of sebastian/environment.\n    4   *\n    5   * (c) Sebastian Bergmann <sebastian@phpunit.de>\n    .\n    8   * file that was distributed with this source code.\n    9   */\n   10: namespace SebastianBergmann\\Environment;\n   11  \n   12  final class Console\n   ..\n   35      public function hasColorSupport(): bool\n   36      {\n   37:         if ('Hyper' === \\getenv('TERM_PROGRAM')) {\n   38              return true;\n   39          }\n   ..\n   42              // @codeCoverageIgnoreStart\n   43              return (\\defined('STDOUT') && \\function_exists('sapi_windows_vt100_support') && @sapi_windows_vt100_support(\\STDOUT))\n   44:                 || false !== \\getenv('ANSICON')\n   45:                 || 'ON' === \\getenv('ConEmuANSI')\n   46:                 || 'xterm' === \\getenv('TERM');\n   47              // @codeCoverageIgnoreEnd\n   48          }\n   ..\n  125      private function getNumberOfColumnsWindows(): int\n  126      {\n  127:         $ansicon = \\getenv('ANSICON');\n  128          $columns = 80;\n  129  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\sebastian\\environment\\src\\OperatingSystem.php:\n    1  <?php declare(strict_types=1);\n    2  /*\n    3:  * This file is part of sebastian/environment.\n    4   *\n    5   * (c) Sebastian Bergmann <sebastian@phpunit.de>\n    .\n    8   * file that was distributed with this source code.\n    9   */\n   10: namespace SebastianBergmann\\Environment;\n   11  \n   12  final class OperatingSystem\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\sebastian\\environment\\src\\Runtime.php:\n    1  <?php declare(strict_types=1);\n    2  /*\n    3:  * This file is part of sebastian/environment.\n    4   *\n    5   * (c) Sebastian Bergmann <sebastian@phpunit.de>\n    .\n    8   * file that was distributed with this source code.\n    9   */\n   10: namespace SebastianBergmann\\Environment;\n   11  \n   12  /**\n   13:  * Utility class for HHVM/PHP environment handling.\n   14   */\n   15  final class Runtime\n   ..\n   62          if (self::$binary === null && $this->isHHVM()) {\n   63              // @codeCoverageIgnoreStart\n   64:             if ((self::$binary = \\getenv('PHP_BINARY')) === false) {\n   65                  self::$binary = \\PHP_BINARY;\n   66              }\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\sebastian\\environment\\tests\\ConsoleTest.php:\n    1  <?php declare(strict_types=1);\n    2  /*\n    3:  * This file is part of sebastian/environment.\n    4   *\n    5   * (c) Sebastian Bergmann <sebastian@phpunit.de>\n    .\n    8   * file that was distributed with this source code.\n    9   */\n   10: namespace SebastianBergmann\\Environment;\n   11  \n   12  use PHPUnit\\Framework\\TestCase;\n   13  \n   14  /**\n   15:  * @covers \\SebastianBergmann\\Environment\\Console\n   16   */\n   17  final class ConsoleTest extends TestCase\n   18  {\n   19      /**\n   20:      * @var \\SebastianBergmann\\Environment\\Console\n   21       */\n   22      private $console;\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\sebastian\\environment\\tests\\OperatingSystemTest.php:\n    1  <?php declare(strict_types=1);\n    2  /*\n    3:  * This file is part of sebastian/environment.\n    4   *\n    5   * (c) Sebastian Bergmann <sebastian@phpunit.de>\n    .\n    8   * file that was distributed with this source code.\n    9   */\n   10: namespace SebastianBergmann\\Environment;\n   11  \n   12  use PHPUnit\\Framework\\TestCase;\n   13  \n   14  /**\n   15:  * @covers \\SebastianBergmann\\Environment\\OperatingSystem\n   16   */\n   17  final class OperatingSystemTest extends TestCase\n   18  {\n   19      /**\n   20:      * @var \\SebastianBergmann\\Environment\\OperatingSystem\n   21       */\n   22      private $os;\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\sebastian\\environment\\tests\\RuntimeTest.php:\n    1  <?php declare(strict_types=1);\n    2  /*\n    3:  * This file is part of sebastian/environment.\n    4   *\n    5   * (c) Sebastian Bergmann <sebastian@phpunit.de>\n    .\n    8   * file that was distributed with this source code.\n    9   */\n   10: namespace SebastianBergmann\\Environment;\n   11  \n   12  use PHPUnit\\Framework\\TestCase;\n   13  \n   14  /**\n   15:  * @covers \\SebastianBergmann\\Environment\\Runtime\n   16   */\n   17  final class RuntimeTest extends TestCase\n   18  {\n   19      /**\n   20:      * @var \\SebastianBergmann\\Environment\\Runtime\n   21       */\n   22:     private $env;\n   23  \n   24      protected function setUp(): void\n   25      {\n   26:         $this->env = new Runtime;\n   27      }\n   28  \n   ..\n   32      public function testCanCollectCodeCoverageWhenXdebugExtensionIsEnabled(): void\n   33      {\n   34:         $this->assertTrue($this->env->canCollectCodeCoverage());\n   35      }\n   36  \n   ..\n   40      public function testCanCollectCodeCoverageWhenPcovExtensionIsEnabled(): void\n   41      {\n   42:         $this->assertTrue($this->env->canCollectCodeCoverage());\n   43      }\n   44  \n   ..\n   47          $this->markTestSkippedWhenNotRunningOnPhpdbg();\n   48  \n   49:         $this->assertTrue($this->env->canCollectCodeCoverage());\n   50      }\n   51  \n   52      public function testBinaryCanBeRetrieved(): void\n   53      {\n   54:         $this->assertNotEmpty($this->env->getBinary());\n   55      }\n   56  \n   ..\n   60      public function testIsHhvmReturnsFalseWhenRunningOnPhp(): void\n   61      {\n   62:         $this->assertFalse($this->env->isHHVM());\n   63      }\n   64  \n   ..\n   70          $this->markTestSkippedWhenRunningOnPhpdbg();\n   71  \n   72:         $this->assertTrue($this->env->isPHP());\n   73      }\n   74  \n   ..\n   78      public function testPCOVCanBeDetected(): void\n   79      {\n   80:         $this->assertTrue($this->env->hasPCOV());\n   81      }\n   82  \n   ..\n   85          $this->markTestSkippedWhenNotRunningOnPhpdbg();\n   86  \n   87:         $this->assertTrue($this->env->hasPHPDBGCodeCoverage());\n   88      }\n   89  \n   ..\n   95          $this->markTestSkippedWhenRunningOnPhpdbg();\n   96  \n   97:         $this->assertTrue($this->env->hasXdebug());\n   98      }\n   99  \n  100      public function testNameAndVersionCanBeRetrieved(): void\n  101      {\n  102:         $this->assertNotEmpty($this->env->getNameWithVersion());\n  103      }\n  104  \n  ...\n  107          $this->markTestSkippedWhenNotRunningOnPhpdbg();\n  108  \n  109:         $this->assertSame('PHPDBG', $this->env->getName());\n  110      }\n  111  \n  ...\n  117          $this->markTestSkippedWhenRunningOnPhpdbg();\n  118  \n  119:         $this->assertSame('PHP', $this->env->getName());\n  120      }\n  121  \n  122      public function testNameAndCodeCoverageDriverCanBeRetrieved(): void\n  123      {\n  124:         $this->assertNotEmpty($this->env->getNameWithVersionAndCodeCoverageDriver());\n  125      }\n  126  \n  ...\n  130      public function testGetVersionReturnsPhpVersionWhenRunningPhp(): void\n  131      {\n  132:         $this->assertSame(\\PHP_VERSION, $this->env->getVersion());\n  133      }\n  134  \n  ...\n  138      public function testGetVendorUrlReturnsPhpDotNetWhenRunningPhp(): void\n  139      {\n  140:         $this->assertSame('https://secure.php.net/', $this->env->getVendorUrl());\n  141      }\n  142  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\sebastian\\global-state\\build.xml:\n   10      <target name=\"composer\" depends=\"clean\" description=\"Install dependencies with Composer\">\n   11          <exec executable=\"composer\" taskname=\"composer\">\n   12:             <env key=\"COMPOSER_DISABLE_XDEBUG_WARN\" value=\"1\"/>\n   13              <arg value=\"update\"/>\n   14              <arg value=\"--no-interaction\"/>\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\sebastian\\global-state\\src\\Snapshot.php:\n  319      {\n  320          $this->superGlobalArrays = [\n  321:             '_ENV',\n  322              '_POST',\n  323              '_GET',\n  ...\n  332                  $this->superGlobalArrays,\n  333                  [\n  334:                     'HTTP_ENV_VARS',\n  335                      'HTTP_POST_VARS',\n  336                      'HTTP_GET_VARS',\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\sebastian\\resource-operations\\build\\generate.php:\n    1: #!/usr/bin/env php\n    2  <?php declare(strict_types=1);\n    3  /*\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\sebastian\\resource-operations\\src\\ResourceOperations.php:\n  926              'gzwrite',\n  927              'hash_update_stream',\n  928:             'http\\Env\\Response::send',\n  929              'http_get_request_body_stream',\n  930              'ibase_add_user',\n  ...\n 1164              'ingres_result_seek',\n 1165              'ingres_rollback',\n 1166:             'ingres_set_environment',\n 1167              'ingres_unbuffered_query',\n 1168              'inotify_add_watch',\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\slim\\psr7\\src\\Environment.php:\n   10  namespace Slim\\Psr7;\n   11  \n   12: class Environment\n   13  {\n   14      /**\n   15:      * @param  array $data Array of custom environment keys and values\n   16       *\n   17       * @return array\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\slim\\psr7\\src\\Request.php:\n   69       * @param HeadersInterface $headers       The request headers collection\n   70       * @param array            $cookies       The request cookies collection\n   71:      * @param array            $serverParams  The server environment variables\n   72       * @param StreamInterface  $body          The request body object\n   73       * @param array            $uploadedFiles The request uploadedFiles collection\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\slim\\psr7\\src\\UploadedFile.php:\n   52  \n   53      /**\n   54:      * Indicates if the upload is from a SAPI environment.\n   55       *\n   56       * @var bool\n   ..\n   77       * @param int|null               $size             The file size in bytes.\n   78       * @param int                    $error            The UPLOAD_ERR_XXX code representing the status of the upload.\n   79:      * @param bool                   $sapi             Indicates if the upload is in a SAPI environment.\n   80       */\n   81      public function __construct(\n   ..\n  200  \n  201      /**\n  202:      * Create a normalized tree of UploadedFile instances from the Environment.\n  203       *\n  204       * @internal This method is not part of the PSR-7 standard.\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\slim\\psr7\\src\\Factory\\ServerRequestFactory.php:\n   78  \n   79      /**\n   80:      * Create new ServerRequest from environment.\n   81       *\n   82       * @internal This method is not part of PSR-17\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\slim\\psr7\\src\\Factory\\UriFactory.php:\n   41  \n   42      /**\n   43:      * Create new Uri from environment.\n   44       *\n   45       * @internal This method is not part of PSR-17\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\slim\\slim\\Slim\\Routing\\RouteCollector.php:\n   23  /**\n   24   * RouteCollector is used to collect routes and route groups\n   25:  * as well as generate paths and URLs relative to its environment\n   26   */\n   27  class RouteCollector implements RouteCollectorInterface\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\symfony\\cache\\phpunit.xml.dist:\n   11      <php>\n   12          <ini name=\"error_reporting\" value=\"-1\" />\n   13:         <env name=\"REDIS_HOST\" value=\"localhost\" />\n   14:         <env name=\"MEMCACHED_HOST\" value=\"localhost\" />\n   15      </php>\n   16  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\symfony\\cache\\DependencyInjection\\CachePoolPass.php:\n  159      public static function getServiceProvider(ContainerBuilder $container, $name)\n  160      {\n  161:         $container->resolveEnvPlaceholders($name, null, $usedEnvs);\n  162  \n  163:         if ($usedEnvs || preg_match('#^[a-z]++:#', $name)) {\n  164              $dsn = $name;\n  165  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\symfony\\cache\\Tests\\Adapter\\AbstractRedisAdapterTest.php:\n   34              self::markTestSkipped('Extension redis required.');\n   35          }\n   36:         if (!@((new \\Redis())->connect(getenv('REDIS_HOST')))) {\n   37              $e = error_get_last();\n   38              self::markTestSkipped($e['message']);\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\symfony\\cache\\Tests\\Adapter\\ApcuAdapterTest.php:\n  106      {\n  107          try {\n  108:             // disable PHPUnit error handler to mimic a production environment\n  109              $isCalled = false;\n  110              set_error_handler(function () use (&$isCalled) {\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\symfony\\cache\\Tests\\Adapter\\MemcachedAdapterTest.php:\n   29              self::markTestSkipped('Extension memcached >=2.2.0 required.');\n   30          }\n   31:         self::$client = AbstractAdapter::createConnection('memcached://'.getenv('MEMCACHED_HOST'), ['binary_protocol' => false]);\n   32          self::$client->get('foo');\n   33          $code = self::$client->getResultCode();\n   ..\n   40      public function createCachePool($defaultLifetime = 0)\n   41      {\n   42:         $client = $defaultLifetime ? AbstractAdapter::createConnection('memcached://'.getenv('MEMCACHED_HOST')) : self::$client;\n   43  \n   44          return new MemcachedAdapter($client, str_replace('\\\\', '.', __CLASS__), $defaultLifetime);\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\symfony\\cache\\Tests\\Adapter\\PredisAdapterTest.php:\n   20      {\n   21          parent::setUpBeforeClass();\n   22:         self::$redis = new \\Predis\\Client(['host' => getenv('REDIS_HOST')]);\n   23      }\n   24  \n   25      public function testCreateConnection()\n   26      {\n   27:         $redisHost = getenv('REDIS_HOST');\n   28  \n   29          $redis = RedisAdapter::createConnection('redis://'.$redisHost.'/1', ['class' => \\Predis\\Client::class, 'timeout' => 3]);\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\symfony\\cache\\Tests\\Adapter\\PredisClusterAdapterTest.php:\n   17      {\n   18          parent::setUpBeforeClass();\n   19:         self::$redis = new \\Predis\\Client([['host' => getenv('REDIS_HOST')]]);\n   20      }\n   21  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\symfony\\cache\\Tests\\Adapter\\PredisRedisClusterAdapterTest.php:\n   18      public static function setUpBeforeClass(): void\n   19      {\n   20:         if (!$hosts = getenv('REDIS_CLUSTER_HOSTS')) {\n   21:             self::markTestSkipped('REDIS_CLUSTER_HOSTS env var is not defined.');\n   22          }\n   23  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\symfony\\cache\\Tests\\Adapter\\RedisAdapterTest.php:\n   21      {\n   22          parent::setUpBeforeClass();\n   23:         self::$redis = AbstractAdapter::createConnection('redis://'.getenv('REDIS_HOST'), ['lazy' => true]);\n   24      }\n   25  \n   ..\n   42          @$redis = null; // some versions of phpredis connect on destruct, let's silence the warning\n   43  \n   44:         $redisHost = getenv('REDIS_HOST');\n   45  \n   46          $redis = RedisAdapter::createConnection($dsnScheme.'://'.$redisHost);\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\symfony\\cache\\Tests\\Adapter\\RedisArrayAdapterTest.php:\n   20              self::markTestSkipped('The RedisArray class is required.');\n   21          }\n   22:         self::$redis = new \\RedisArray([getenv('REDIS_HOST')], ['lazy_connect' => true]);\n   23      }\n   24  }\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\symfony\\cache\\Tests\\Adapter\\RedisClusterAdapterTest.php:\n   23              self::markTestSkipped('The RedisCluster class is required.');\n   24          }\n   25:         if (!$hosts = getenv('REDIS_CLUSTER_HOSTS')) {\n   26:             self::markTestSkipped('REDIS_CLUSTER_HOSTS env var is not defined.');\n   27          }\n   28  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\symfony\\cache\\Tests\\Simple\\AbstractRedisCacheTest.php:\n   37              self::markTestSkipped('Extension redis required.');\n   38          }\n   39:         if (!@((new \\Redis())->connect(getenv('REDIS_HOST')))) {\n   40              $e = error_get_last();\n   41              self::markTestSkipped($e['message']);\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\symfony\\cache\\Tests\\Simple\\MemcachedCacheTest.php:\n   33              self::markTestSkipped('Extension memcached >=2.2.0 required.');\n   34          }\n   35:         self::$client = AbstractAdapter::createConnection('memcached://'.getenv('MEMCACHED_HOST'));\n   36          self::$client->get('foo');\n   37          $code = self::$client->getResultCode();\n   ..\n   44      public function createSimpleCache($defaultLifetime = 0)\n   45      {\n   46:         $client = $defaultLifetime ? AbstractAdapter::createConnection('memcached://'.getenv('MEMCACHED_HOST'), ['binary_protocol' => false]) : self::$client;\n   47  \n   48          return new MemcachedCache($client, str_replace('\\\\', '.', __CLASS__), $defaultLifetime);\n   ..\n   51      public function testCreatePersistentConnectionShouldNotDupServerList()\n   52      {\n   53:         $instance = MemcachedCache::createConnection('memcached://'.getenv('MEMCACHED_HOST'), ['persistent_id' => 'persistent']);\n   54          $this->assertCount(1, $instance->getServerList());\n   55  \n   56:         $instance = MemcachedCache::createConnection('memcached://'.getenv('MEMCACHED_HOST'), ['persistent_id' => 'persistent']);\n   57          $this->assertCount(1, $instance->getServerList());\n   58      }\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\symfony\\cache\\Tests\\Simple\\MemcachedCacheTextModeTest.php:\n   22      public function createSimpleCache($defaultLifetime = 0)\n   23      {\n   24:         $client = AbstractAdapter::createConnection('memcached://'.getenv('MEMCACHED_HOST'), ['binary_protocol' => false]);\n   25  \n   26          return new MemcachedCache($client, str_replace('\\\\', '.', __CLASS__), $defaultLifetime);\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\symfony\\cache\\Tests\\Simple\\RedisArrayCacheTest.php:\n   23              self::markTestSkipped('The RedisArray class is required.');\n   24          }\n   25:         self::$redis = new \\RedisArray([getenv('REDIS_HOST')], ['lazy_connect' => true]);\n   26      }\n   27  }\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\symfony\\cache\\Tests\\Simple\\RedisCacheTest.php:\n   22      {\n   23          parent::setupBeforeClass();\n   24:         self::$redis = RedisCache::createConnection('redis://'.getenv('REDIS_HOST'));\n   25      }\n   26  \n   27      public function testCreateConnection()\n   28      {\n   29:         $redisHost = getenv('REDIS_HOST');\n   30  \n   31          $redis = RedisCache::createConnection('redis://'.$redisHost);\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\symfony\\cache\\Tests\\Simple\\RedisClusterCacheTest.php:\n   22              self::markTestSkipped('The RedisCluster class is required.');\n   23          }\n   24:         if (!$hosts = getenv('REDIS_CLUSTER_HOSTS')) {\n   25:             self::markTestSkipped('REDIS_CLUSTER_HOSTS env var is not defined.');\n   26          }\n   27  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\theseer\\tokenizer\\tests\\TokenTest.php:\n   25      }\n   26  \n   27:     public function testTokenValueCanBeRetrieved() {\n   28          $this->assertEquals('blank', $this->token->getValue());\n   29      }\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\composer.json:\n    1  {\n    2:     \"name\": \"vlucas/phpdotenv\",\n    3:     \"description\": \"Loads environment variables from `.env` to `getenv()`, `$_ENV` and `$_SERVER` automagically.\",\n    4:     \"keywords\": [\"env\", \"dotenv\", \"environment\"],\n    5      \"license\" : \"BSD-3-Clause\",\n    6      \"authors\" : [\n    .\n   26      \"autoload\": {\n   27          \"psr-4\": {\n   28:             \"Dotenv\\\\\": \"src/\"\n   29          }\n   30      },\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Dotenv.php:\n    1  <?php\n    2  \n    3: namespace Dotenv;\n    4  \n    5: use Dotenv\\Environment\\DotenvFactory;\n    6: use Dotenv\\Environment\\FactoryInterface;\n    7: use Dotenv\\Exception\\InvalidPathException;\n    8  \n    9  /**\n   10:  * This is the dotenv class.\n   11   *\n   12:  * It's responsible for loading a `.env` file in the given directory and\n   13:  * setting the environment variables.\n   14   */\n   15: class Dotenv\n   16  {\n   17      /**\n   18       * The loader instance.\n   19       *\n   20:      * @var \\Dotenv\\Loader\n   21       */\n   22      protected $loader;\n   23  \n   24      /**\n   25:      * Create a new dotenv instance.\n   26       *\n   27:      * @param \\Dotenv\\Loader $loader\n   28       *\n   29       * @return void\n   ..\n   35  \n   36      /**\n   37:      * Create a new dotenv instance.\n   38       *\n   39       * @param string|string[]                           $paths\n   40       * @param string|null                               $file\n   41:      * @param \\Dotenv\\Environment\\FactoryInterface|null $envFactory\n   42       *\n   43:      * @return \\Dotenv\\Dotenv\n   44       */\n   45:     public static function create($paths, $file = null, FactoryInterface $envFactory = null)\n   46      {\n   47          $loader = new Loader(\n   48:             self::getFilePaths((array) $paths, $file ?: '.env'),\n   49:             $envFactory ?: new DotenvFactory(),\n   50              true\n   51          );\n   ..\n   70  \n   71      /**\n   72:      * Load environment file in given directory.\n   73       *\n   74:      * @throws \\Dotenv\\Exception\\InvalidPathException|\\Dotenv\\Exception\\InvalidFileException\n   75       *\n   76       * @return array<string|null>\n   ..\n   82  \n   83      /**\n   84:      * Load environment file in given directory, silently failing if it doesn't exist.\n   85       *\n   86:      * @throws \\Dotenv\\Exception\\InvalidFileException\n   87       *\n   88       * @return array<string|null>\n   ..\n   99  \n  100      /**\n  101:      * Load environment file in given directory.\n  102       *\n  103:      * @throws \\Dotenv\\Exception\\InvalidPathException|\\Dotenv\\Exception\\InvalidFileException\n  104       *\n  105       * @return array<string|null>\n  ...\n  115       * @param bool $overload\n  116       *\n  117:      * @throws \\Dotenv\\Exception\\InvalidPathException|\\Dotenv\\Exception\\InvalidFileException\n  118       *\n  119       * @return array<string|null>\n  ...\n  129       * @param string|string[] $variables\n  130       *\n  131:      * @return \\Dotenv\\Validator\n  132       */\n  133      public function required($variables)\n  ...\n  141       * @param string|string[] $variables\n  142       *\n  143:      * @return \\Dotenv\\Validator\n  144       */\n  145      public function ifPresent($variables)\n  ...\n  149  \n  150      /**\n  151:      * Get the list of environment variables declared inside the 'env' file.\n  152       *\n  153       * @return string[]\n  154       */\n  155:     public function getEnvironmentVariableNames()\n  156      {\n  157:         return $this->loader->getEnvironmentVariableNames();\n  158      }\n  159  }\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Lines.php:\n    1  <?php\n    2  \n    3: namespace Dotenv;\n    4  \n    5  class Lines\n    6  {\n    7      /**\n    8:      * Process the array of lines of environment variables.\n    9       *\n   10       * This will produce an array of entries, one per variable.\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Loader.php:\n    1  <?php\n    2  \n    3: namespace Dotenv;\n    4  \n    5: use Dotenv\\Environment\\FactoryInterface;\n    6: use Dotenv\\Exception\\InvalidPathException;\n    7: use Dotenv\\Regex\\Regex;\n    8  use PhpOption\\Option;\n    9  \n   ..\n   27  \n   28      /**\n   29:      * The environment factory instance.\n   30       *\n   31:      * @var \\Dotenv\\Environment\\FactoryInterface\n   32       */\n   33:     protected $envFactory;\n   34  \n   35      /**\n   36:      * The environment variables instance.\n   37       *\n   38:      * @var \\Dotenv\\Environment\\VariablesInterface\n   39       */\n   40:     protected $envVariables;\n   41  \n   42      /**\n   43:      * The list of environment variables declared inside the 'env' file.\n   44       *\n   45       * @var string[]\n   ..\n   51       *\n   52       * @param string[]                             $filePaths\n   53:      * @param \\Dotenv\\Environment\\FactoryInterface $envFactory\n   54       * @param bool                                 $immutable\n   55       *\n   56       * @return void\n   57       */\n   58:     public function __construct(array $filePaths, FactoryInterface $envFactory, $immutable = false)\n   59      {\n   60          $this->filePaths = $filePaths;\n   61:         $this->envFactory = $envFactory;\n   62          $this->setImmutable($immutable);\n   63      }\n   ..\n   72      public function setImmutable($immutable = false)\n   73      {\n   74:         $this->envVariables = $immutable\n   75:             ? $this->envFactory->createImmutable()\n   76:             : $this->envFactory->create();\n   77  \n   78          return $this;\n   ..\n   80  \n   81      /**\n   82:      * Load the environment file from disk.\n   83       *\n   84:      * @throws \\Dotenv\\Exception\\InvalidPathException|\\Dotenv\\Exception\\InvalidFileException\n   85       *\n   86       * @return array<string|null>\n   ..\n   98       * @param string $content\n   99       *\n  100:      * @throws \\Dotenv\\Exception\\InvalidFileException\n  101       *\n  102       * @return array<string|null>\n  ...\n  114       * @param string[] $filePaths\n  115       *\n  116:      * @throws \\Dotenv\\Exception\\InvalidPathException\n  117       *\n  118       * @return string[]\n  ...\n  121      {\n  122          if ($filePaths === []) {\n  123:             throw new InvalidPathException('At least one environment file path must be provided.');\n  124          }\n  125  \n  ...\n  132  \n  133          throw new InvalidPathException(\n  134:             sprintf('Unable to read any of the environment file(s) at [%s].', implode(', ', $filePaths))\n  135          );\n  136      }\n  ...\n  151  \n  152      /**\n  153:      * Process the environment variable entries.\n  154       *\n  155       * We'll fill out any nested variables, and acually set the variable using\n  156:      * the underlying environment variables instance.\n  157       *\n  158       * @param string[] $entries\n  159       *\n  160:      * @throws \\Dotenv\\Exception\\InvalidFileException\n  161       *\n  162       * @return array<string|null>\n  ...\n  169              list($name, $value) = Parser::parse($entry);\n  170              $vars[$name] = $this->resolveNestedVariables($value);\n  171:             $this->setEnvironmentVariable($name, $vars[$name]);\n  172          }\n  173  \n  ...\n  179       *\n  180       * Look for ${varname} patterns in the variable value and replace with an\n  181:      * existing environment variable.\n  182       *\n  183       * @param string|null $value\n  ...\n  195                      '/\\${([a-zA-Z0-9_.]+)}/',\n  196                      function (array $matches) {\n  197:                         return Option::fromValue($this->getEnvironmentVariable($matches[1]))\n  198                              ->getOrElse($matches[0]);\n  199                      },\n  ...\n  205  \n  206      /**\n  207:      * Search the different places for environment variables and return first value found.\n  208       *\n  209       * @param string $name\n  ...\n  211       * @return string|null\n  212       */\n  213:     public function getEnvironmentVariable($name)\n  214      {\n  215:         return $this->envVariables->get($name);\n  216      }\n  217  \n  218      /**\n  219:      * Set an environment variable.\n  220       *\n  221       * @param string      $name\n  ...\n  224       * @return void\n  225       */\n  226:     public function setEnvironmentVariable($name, $value = null)\n  227      {\n  228          $this->variableNames[] = $name;\n  229:         $this->envVariables->set($name, $value);\n  230      }\n  231  \n  232      /**\n  233:      * Clear an environment variable.\n  234       *\n  235       * This method only expects names in normal form.\n  ...\n  239       * @return void\n  240       */\n  241:     public function clearEnvironmentVariable($name)\n  242      {\n  243:         $this->envVariables->clear($name);\n  244      }\n  245  \n  246      /**\n  247:      * Get the list of environment variables names.\n  248       *\n  249       * @return string[]\n  250       */\n  251:     public function getEnvironmentVariableNames()\n  252      {\n  253          return $this->variableNames;\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Parser.php:\n    1  <?php\n    2  \n    3: namespace Dotenv;\n    4  \n    5: use Dotenv\\Exception\\InvalidFileException;\n    6  \n    7  class Parser\n    .\n   15  \n   16      /**\n   17:      * Parse the given environment variable entry into a name and value.\n   18       *\n   19       * @param string $entry\n   20       *\n   21:      * @throws \\Dotenv\\Exception\\InvalidFileException\n   22       *\n   23       * @return array\n   ..\n   35       * @param string $line\n   36       *\n   37:      * @throws \\Dotenv\\Exception\\InvalidFileException\n   38       *\n   39       * @return array\n   ..\n   62       * @param string $name\n   63       *\n   64:      * @throws \\Dotenv\\Exception\\InvalidFileException\n   65       *\n   66       * @return string\n   ..\n   92  \n   93      /**\n   94:      * Strips quotes and comments from the environment variable value.\n   95       *\n   96       * @param string|null $value\n   97       *\n   98:      * @throws \\Dotenv\\Exception\\InvalidFileException\n   99       *\n  100       * @return string|null\n  ...\n  169      {\n  170          return sprintf(\n  171:             'Failed to parse dotenv file due to %s. Failed at [%s].',\n  172              $cause,\n  173              strtok($subject, \"\\n\")\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Validator.php:\n    1  <?php\n    2  \n    3: namespace Dotenv;\n    4  \n    5: use Dotenv\\Exception\\ValidationException;\n    6  \n    7  /**\n    .\n   22       * The loader instance.\n   23       *\n   24:      * @var \\Dotenv\\Loader\n   25       */\n   26      protected $loader;\n   ..\n   30       *\n   31       * @param string[]       $variables\n   32:      * @param \\Dotenv\\Loader $loader\n   33       * @param bool           $required\n   34       *\n   35:      * @throws \\Dotenv\\Exception\\ValidationException\n   36       *\n   37       * @return void\n   ..\n   56       * Assert that each variable is not empty.\n   57       *\n   58:      * @throws \\Dotenv\\Exception\\ValidationException\n   59       *\n   60:      * @return \\Dotenv\\Validator\n   61       */\n   62      public function notEmpty()\n   ..\n   77       * Assert that each specified variable is an integer.\n   78       *\n   79:      * @throws \\Dotenv\\Exception\\ValidationException\n   80       *\n   81:      * @return \\Dotenv\\Validator\n   82       */\n   83      public function isInteger()\n   ..\n   98       * Assert that each specified variable is a boolean.\n   99       *\n  100:      * @throws \\Dotenv\\Exception\\ValidationException\n  101       *\n  102:      * @return \\Dotenv\\Validator\n  103       */\n  104      public function isBoolean()\n  ...\n  125       * @param string[] $choices\n  126       *\n  127:      * @throws \\Dotenv\\Exception\\ValidationException\n  128       *\n  129:      * @return \\Dotenv\\Validator\n  130       */\n  131      public function allowedValues(array $choices)\n  ...\n  145       * @param string   $message\n  146       *\n  147:      * @throws \\Dotenv\\Exception\\ValidationException\n  148       *\n  149:      * @return \\Dotenv\\Validator\n  150       */\n  151      protected function assertCallback(callable $callback, $message = 'failed callback assertion')\n  ...\n  154  \n  155          foreach ($this->variables as $variable) {\n  156:             if ($callback($this->loader->getEnvironmentVariable($variable)) === false) {\n  157                  $failing[] = sprintf('%s %s', $variable, $message);\n  158              }\n  ...\n  161          if (count($failing) > 0) {\n  162              throw new ValidationException(sprintf(\n  163:                 'One or more environment variables failed assertions: %s.',\n  164                  implode(', ', $failing)\n  165              ));\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Environment\\AbstractVariables.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Environment;\n    4  \n    5: use Dotenv\\Environment\\Adapter\\ArrayAdapter;\n    6  use InvalidArgumentException;\n    7  \n    .\n   23       * The record of loaded variables.\n   24       *\n   25:      * @var \\Dotenv\\Environment\\Adapter\\ArrayAdapter\n   26       */\n   27      private $loaded;\n   28  \n   29      /**\n   30:      * Create a new environment variables instance.\n   31       *\n   32       * @param bool $immutable\n   ..\n   41  \n   42      /**\n   43:      * Get an environment variable.\n   44       *\n   45       * @param string $name\n   ..\n   59  \n   60      /**\n   61:      * Get an environment variable.\n   62       *\n   63       * @param string $name\n   ..\n   68  \n   69      /**\n   70:      * Set an environment variable.\n   71       *\n   72       * @param string      $name\n   ..\n   83          }\n   84  \n   85:         // Don't overwrite existing environment variables if we're immutable\n   86:         // Ruby's dotenv does this with `ENV[key] ||= value`.\n   87          if ($this->isImmutable() && $this->get($name) !== null && $this->loaded->get($name)->isEmpty()) {\n   88              return;\n   ..\n   94  \n   95      /**\n   96:      * Set an environment variable.\n   97       *\n   98       * @param string      $name\n   ..\n  104  \n  105      /**\n  106:      * Clear an environment variable.\n  107       *\n  108       * @param string $name\n  ...\n  127  \n  128      /**\n  129:      * Clear an environment variable.\n  130       *\n  131       * @param string $name\n  ...\n  136  \n  137      /**\n  138:      * Determine if the environment is immutable.\n  139       *\n  140       * @return bool\n  ...\n  146  \n  147      /**\n  148:      * Tells whether environment variable has been defined.\n  149       *\n  150       * @param string $name\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Environment\\DotenvFactory.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Environment;\n    4  \n    5: use Dotenv\\Environment\\Adapter\\AdapterInterface;\n    6: use Dotenv\\Environment\\Adapter\\ApacheAdapter;\n    7: use Dotenv\\Environment\\Adapter\\EnvConstAdapter;\n    8: use Dotenv\\Environment\\Adapter\\PutenvAdapter;\n    9: use Dotenv\\Environment\\Adapter\\ServerConstAdapter;\n   10  \n   11  /**\n   12:  * The default implementation of the environment factory interface.\n   13   */\n   14: class DotenvFactory implements FactoryInterface\n   15  {\n   16      /**\n   17       * The set of adapters to use.\n   18       *\n   19:      * @var \\Dotenv\\Environment\\Adapter\\AdapterInterface[]\n   20       */\n   21      protected $adapters;\n   22  \n   23      /**\n   24:      * Create a new dotenv environment factory instance.\n   25       *\n   26       * If no adapters are provided, then the defaults will be used.\n   27       *\n   28:      * @param \\Dotenv\\Environment\\Adapter\\AdapterInterface[]|null $adapters\n   29       *\n   30       * @return void\n   ..\n   32      public function __construct(array $adapters = null)\n   33      {\n   34:         $this->adapters = array_filter($adapters === null ? [new ApacheAdapter(), new EnvConstAdapter(), new ServerConstAdapter(), new PutenvAdapter()] : $adapters, function (AdapterInterface $adapter) {\n   35              return $adapter->isSupported();\n   36          });\n   ..\n   38  \n   39      /**\n   40:      * Creates a new mutable environment variables instance.\n   41       *\n   42:      * @return \\Dotenv\\Environment\\VariablesInterface\n   43       */\n   44      public function create()\n   45      {\n   46:         return new DotenvVariables($this->adapters, false);\n   47      }\n   48  \n   49      /**\n   50:      * Creates a new immutable environment variables instance.\n   51       *\n   52:      * @return \\Dotenv\\Environment\\VariablesInterface\n   53       */\n   54      public function createImmutable()\n   55      {\n   56:         return new DotenvVariables($this->adapters, true);\n   57      }\n   58  }\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Environment\\DotenvVariables.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Environment;\n    4  \n    5  /**\n    6:  * The default implementation of the environment variables interface.\n    7   */\n    8: class DotenvVariables extends AbstractVariables\n    9  {\n   10      /**\n   11       * The set of adapters to use.\n   12       *\n   13:      * @var \\Dotenv\\Environment\\Adapter\\AdapterInterface[]\n   14       */\n   15      protected $adapters;\n   16  \n   17      /**\n   18:      * Create a new dotenv environment variables instance.\n   19       *\n   20:      * @param \\Dotenv\\Environment\\Adapter\\AdapterInterface[] $adapters\n   21       * @param bool                                           $immutable\n   22       *\n   ..\n   30  \n   31      /**\n   32:      * Get an environment variable.\n   33       *\n   34       * We do this by querying our adapters sequentially.\n   ..\n   49  \n   50      /**\n   51:      * Set an environment variable.\n   52       *\n   53       * @param string      $name\n   ..\n   64  \n   65      /**\n   66:      * Clear an environment variable.\n   67       *\n   68       * @param string $name\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Environment\\FactoryInterface.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Environment;\n    4  \n    5  /**\n    6:  * This environment factory interface.\n    7   *\n    8   * If you need custom implementations of the variables interface, implement\n    .\n   12  {\n   13      /**\n   14:      * Creates a new mutable environment variables instance.\n   15       *\n   16:      * @return \\Dotenv\\Environment\\VariablesInterface\n   17       */\n   18      public function create();\n   19  \n   20      /**\n   21:      * Creates a new immutable environment variables instance.\n   22       *\n   23:      * @return \\Dotenv\\Environment\\VariablesInterface\n   24       */\n   25      public function createImmutable();\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Environment\\VariablesInterface.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Environment;\n    4  \n    5  use ArrayAccess;\n    6  \n    7  /**\n    8:  * This environment variables interface.\n    9   */\n   10  interface VariablesInterface extends ArrayAccess\n   11  {\n   12      /**\n   13:      * Determine if the environment is immutable.\n   14       *\n   15       * @return bool\n   ..\n   18  \n   19      /**\n   20:      * Tells whether environment variable has been defined.\n   21       *\n   22       * @param string $name\n   ..\n   27  \n   28      /**\n   29:      * Get an environment variable.\n   30       *\n   31       * @param string $name\n   ..\n   38  \n   39      /**\n   40:      * Set an environment variable.\n   41       *\n   42       * @param string      $name\n   ..\n   50  \n   51      /**\n   52:      * Clear an environment variable.\n   53       *\n   54       * @param string $name\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Environment\\Adapter\\AdapterInterface.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Environment\\Adapter;\n    4  \n    5  interface AdapterInterface\n    .\n   13  \n   14      /**\n   15:      * Get an environment variable, if it exists.\n   16       *\n   17       * @param string $name\n   ..\n   22  \n   23      /**\n   24:      * Set an environment variable.\n   25       *\n   26       * @param string      $name\n   ..\n   32  \n   33      /**\n   34:      * Clear an environment variable.\n   35       *\n   36       * @param string $name\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Environment\\Adapter\\ApacheAdapter.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Environment\\Adapter;\n    4  \n    5  use PhpOption\\None;\n    .\n   16      public function isSupported()\n   17      {\n   18:         return function_exists('apache_getenv') && function_exists('apache_setenv');\n   19      }\n   20  \n   21      /**\n   22:      * Get an environment variable, if it exists.\n   23       *\n   24       * This is intentionally not implemented, since this adapter exists only as\n   25:      * a means to overwrite existing apache environment variables.\n   26       *\n   27       * @param string $name\n   ..\n   35  \n   36      /**\n   37:      * Set an environment variable.\n   38       *\n   39       * Only if an existing apache variable exists do we overwrite it.\n   ..\n   46      public function set($name, $value = null)\n   47      {\n   48:         if (apache_getenv($name) !== false) {\n   49:             apache_setenv($name, (string) $value);\n   50          }\n   51      }\n   52  \n   53      /**\n   54:      * Clear an environment variable.\n   55       *\n   56       * @param string $name\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Environment\\Adapter\\ArrayAdapter.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Environment\\Adapter;\n    4  \n    5  use PhpOption\\None;\n    .\n   26  \n   27      /**\n   28:      * Get an environment variable, if it exists.\n   29       *\n   30       * @param string $name\n   ..\n   42  \n   43      /**\n   44:      * Set an environment variable.\n   45       *\n   46       * @param string      $name\n   ..\n   55  \n   56      /**\n   57:      * Clear an environment variable.\n   58       *\n   59       * @param string $name\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Environment\\Adapter\\EnvConstAdapter.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Environment\\Adapter;\n    4  \n    5  use PhpOption\\None;\n    6  use PhpOption\\Some;\n    7  \n    8: class EnvConstAdapter implements AdapterInterface\n    9  {\n   10      /**\n   ..\n   19  \n   20      /**\n   21:      * Get an environment variable, if it exists.\n   22       *\n   23       * @param string $name\n   ..\n   27      public function get($name)\n   28      {\n   29:         if (array_key_exists($name, $_ENV)) {\n   30:             return Some::create($_ENV[$name]);\n   31          }\n   32  \n   ..\n   35  \n   36      /**\n   37:      * Set an environment variable.\n   38       *\n   39       * @param string      $name\n   ..\n   44      public function set($name, $value = null)\n   45      {\n   46:         $_ENV[$name] = $value;\n   47      }\n   48  \n   49      /**\n   50:      * Clear an environment variable.\n   51       *\n   52       * @param string $name\n   ..\n   56      public function clear($name)\n   57      {\n   58:         unset($_ENV[$name]);\n   59      }\n   60  }\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Environment\\Adapter\\PutenvAdapter.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Environment\\Adapter;\n    4  \n    5  use PhpOption\\Option;\n    6  \n    7: class PutenvAdapter implements AdapterInterface\n    8  {\n    9      /**\n   ..\n   14      public function isSupported()\n   15      {\n   16:         return function_exists('putenv');\n   17      }\n   18  \n   19      /**\n   20:      * Get an environment variable, if it exists.\n   21       *\n   22       * @param string $name\n   ..\n   26      public function get($name)\n   27      {\n   28:         return Option::fromValue(getenv($name), false);\n   29      }\n   30  \n   31      /**\n   32:      * Set an environment variable.\n   33       *\n   34       * @param string      $name\n   ..\n   39      public function set($name, $value = null)\n   40      {\n   41:         putenv(\"$name=$value\");\n   42      }\n   43  \n   44      /**\n   45:      * Clear an environment variable.\n   46       *\n   47       * @param string $name\n   ..\n   51      public function clear($name)\n   52      {\n   53:         putenv($name);\n   54      }\n   55  }\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Environment\\Adapter\\ServerConstAdapter.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Environment\\Adapter;\n    4  \n    5  use PhpOption\\None;\n    .\n   19  \n   20      /**\n   21:      * Get an environment variable, if it exists.\n   22       *\n   23       * @param string $name\n   ..\n   35  \n   36      /**\n   37:      * Set an environment variable.\n   38       *\n   39       * @param string      $name\n   ..\n   48  \n   49      /**\n   50:      * Clear an environment variable.\n   51       *\n   52       * @param string $name\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Exception\\ExceptionInterface.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Exception;\n    4  \n    5  /**\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Exception\\InvalidFileException.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Exception;\n    4  \n    5  use InvalidArgumentException;\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Exception\\InvalidPathException.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Exception;\n    4  \n    5  use InvalidArgumentException;\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Exception\\ValidationException.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Exception;\n    4  \n    5  use RuntimeException;\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Regex\\Error.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Regex;\n    4  \n    5  use PhpOption\\None;\n    .\n   30       * @param string $value\n   31       *\n   32:      * @return \\Dotenv\\Regex\\Result\n   33       */\n   34      public static function create($value)\n   ..\n   52       * @param callable $f\n   53       *\n   54:      * @return \\Dotenv\\Regex\\Result\n   55       */\n   56      public function mapSuccess(callable $f)\n   ..\n   74       * @param callable $f\n   75       *\n   76:      * @return \\Dotenv\\Regex\\Result\n   77       */\n   78      public function mapError(callable $f)\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Regex\\Regex.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Regex;\n    4  \n    5  use PhpOption\\Option;\n    .\n   14       * @param string $subject\n   15       *\n   16:      * @return \\Dotenv\\Regex\\Result\n   17       */\n   18      public static function replace($pattern, $replacement, $subject)\n   ..\n   30       * @param string   $subject\n   31       *\n   32:      * @return \\Dotenv\\Regex\\Result\n   33       */\n   34      public static function replaceCallback($pattern, callable $callback, $subject)\n   ..\n   45       * @param string   $subject\n   46       *\n   47:      * @return \\Dotenv\\Regex\\Result\n   48       */\n   49      private static function pregAndWrap(callable $operation, $subject)\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Regex\\Result.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Regex;\n    4  \n    5  abstract class Result\n    .\n   27       * @param callable $f\n   28       *\n   29:      * @return \\Dotenv\\Regex\\Result\n   30       */\n   31      abstract public function mapSuccess(callable $f);\n   ..\n   53       * @param callable $f\n   54       *\n   55:      * @return \\Dotenv\\Regex\\Result\n   56       */\n   57      abstract public function mapError(callable $f);\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Regex\\Success.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Regex;\n    4  \n    5  use PhpOption\\None;\n    .\n   30       * @param string $value\n   31       *\n   32:      * @return \\Dotenv\\Regex\\Result\n   33       */\n   34      public static function create($value)\n   ..\n   52       * @param callable $f\n   53       *\n   54:      * @return \\Dotenv\\Regex\\Result\n   55       */\n   56      public function mapSuccess(callable $f)\n   ..\n   74       * @param callable $f\n   75       *\n   76:      * @return \\Dotenv\\Regex\\Result\n   77       */\n   78      public function mapError(callable $f)\n\n719 matches across 151 files\n\n\nSearching 2106 files for \"ENV\" (regex)\n\nC:\\Users\\bmcminn\\github\\starter-api\\app\\bootstrap.php:\n   11  \n   12  \n   13: // DEV LOAD ENVIRONMENT\n   14  // ----------------------------------------------------------------------\n   15  \n   16: $dotenv = Dotenv\\Dotenv::create(ROOT_DIR);\n   17: // $dotenv->load();\n   18: $dotenv->overload();\n   19  \n   20: $dotenv->required([\n   21      'APP_TIMEZONE',\n   22      'DB_DATABASE',\n   23      'DB_HOSTNAME',\n   24:     'ENV',\n   25      // 'DB_PASSWORD',\n   26      // 'DB_USERNAME',\n   ..\n   29  \n   30  \n   31: // DEFINE ENVIRONMENT CONSTANTS\n   32  // ----------------------------------------------------------------------\n   33  \n   34: $IS_DEV = env('ENV') !== 'production';\n   35  \n   36  define('IS_DEV',  $IS_DEV);\n   ..\n   42  // ----------------------------------------------------------------------\n   43  \n   44: date_default_timezone_set(env('APP_TIMEZONE'));\n   45  \n   46  \n   ..\n   58  // ----------------------------------------------------------------------\n   59  \n   60: $DB_DATABASE = env('DB_DATABASE', 'sqlite');\n   61: $DB_PATH     = buildPath(DATA_DIR, env('DB_FILEPATH', ''));\n   62  \n   63  $db = Db\\PdoDatabase::fromDsn(\n   64      new Db\\PdoDsn(\n   65          \"{$DB_DATABASE}:{$DB_PATH}\",\n   66:         env('DB_USERNAME', null),\n   67:         env('DB_PASSWORD', null)\n   68      )\n   69  );\n\nC:\\Users\\bmcminn\\github\\starter-api\\app\\helpers.php:\n   41  \n   42  \n   43: //  ENVIRONMENT HELPER FUNCITON(S)\n   44  // ===================================\n   45  \n   46: function env($key, $default=null) {\n   47:     $value = getenv($key);\n   48  \n   49      if (!$value && $default) {\n\nC:\\Users\\bmcminn\\github\\starter-api\\app\\settings.php:\n   16              'logger' => [\n   17                  'name'  => 'slim-app',\n   18:                 'path'  => env('docker') ? 'php://stdout' : __DIR__ . '/../logs/app.log',\n   19                  'level' => Logger::DEBUG,\n   20              ],\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\composer\\autoload_classmap.php:\n  517      'SebastianBergmann\\\\Diff\\\\Parser' => $vendorDir . '/sebastian/diff/src/Parser.php',\n  518      'SebastianBergmann\\\\Diff\\\\TimeEfficientLongestCommonSubsequenceCalculator' => $vendorDir . '/sebastian/diff/src/TimeEfficientLongestCommonSubsequenceCalculator.php',\n  519:     'SebastianBergmann\\\\Environment\\\\Console' => $vendorDir . '/sebastian/environment/src/Console.php',\n  520:     'SebastianBergmann\\\\Environment\\\\OperatingSystem' => $vendorDir . '/sebastian/environment/src/OperatingSystem.php',\n  521:     'SebastianBergmann\\\\Environment\\\\Runtime' => $vendorDir . '/sebastian/environment/src/Runtime.php',\n  522      'SebastianBergmann\\\\Exporter\\\\Exporter' => $vendorDir . '/sebastian/exporter/src/Exporter.php',\n  523      'SebastianBergmann\\\\FileIterator\\\\Facade' => $vendorDir . '/phpunit/php-file-iterator/src/Facade.php',\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\composer\\autoload_psr4.php:\n   29      'Fig\\\\Http\\\\Message\\\\' => array($vendorDir . '/fig/http-message-util/src'),\n   30      'FastRoute\\\\' => array($vendorDir . '/nikic/fast-route/src'),\n   31:     'Dotenv\\\\' => array($vendorDir . '/vlucas/phpdotenv/src'),\n   32      'Doctrine\\\\Instantiator\\\\' => array($vendorDir . '/doctrine/instantiator/src/Doctrine/Instantiator'),\n   33      'Delight\\\\Http\\\\' => array($vendorDir . '/delight-im/http/src'),\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\composer\\autoload_static.php:\n   67          'D' => \n   68          array (\n   69:             'Dotenv\\\\' => 7,\n   70              'Doctrine\\\\Instantiator\\\\' => 22,\n   71              'Delight\\\\Http\\\\' => 13,\n   ..\n  176              0 => __DIR__ . '/..' . '/nikic/fast-route/src',\n  177          ),\n  178:         'Dotenv\\\\' => \n  179          array (\n  180:             0 => __DIR__ . '/..' . '/vlucas/phpdotenv/src',\n  181          ),\n  182          'Doctrine\\\\Instantiator\\\\' => \n  ...\n  739          'SebastianBergmann\\\\Diff\\\\Parser' => __DIR__ . '/..' . '/sebastian/diff/src/Parser.php',\n  740          'SebastianBergmann\\\\Diff\\\\TimeEfficientLongestCommonSubsequenceCalculator' => __DIR__ . '/..' . '/sebastian/diff/src/TimeEfficientLongestCommonSubsequenceCalculator.php',\n  741:         'SebastianBergmann\\\\Environment\\\\Console' => __DIR__ . '/..' . '/sebastian/environment/src/Console.php',\n  742:         'SebastianBergmann\\\\Environment\\\\OperatingSystem' => __DIR__ . '/..' . '/sebastian/environment/src/OperatingSystem.php',\n  743:         'SebastianBergmann\\\\Environment\\\\Runtime' => __DIR__ . '/..' . '/sebastian/environment/src/Runtime.php',\n  744          'SebastianBergmann\\\\Exporter\\\\Exporter' => __DIR__ . '/..' . '/sebastian/exporter/src/Exporter.php',\n  745          'SebastianBergmann\\\\FileIterator\\\\Facade' => __DIR__ . '/..' . '/phpunit/php-file-iterator/src/Facade.php',\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\filp\\whoops\\src\\Whoops\\Handler\\PrettyPageHandler.php:\n   81          '_SESSION' => [],\n   82          '_SERVER' => [],\n   83:         '_ENV' => [],\n   84      ];\n   85  \n   ..\n  171                  // Help users who have been relying on an internal test value\n  172                  // fix their code to the proper method\n  173:                 if (isset($_ENV['whoops-test'])) {\n  174                      throw new \\Exception(\n  175                          'Use handleUnconditionally instead of whoops-test'\n  176:                         .' environment variable'\n  177                      );\n  178                  }\n  ...\n  219              \"panel_left_outer\"           => $this->getResource(\"views/panel_left_outer.html.php\"),\n  220              \"frame_code\"                 => $this->getResource(\"views/frame_code.html.php\"),\n  221:             \"env_details\"                => $this->getResource(\"views/env_details.html.php\"),\n  222  \n  223              \"title\"            => $this->getPageTitle(),\n  ...\n  244                  \"Session\"               => isset($_SESSION) ? $this->masked($_SESSION, '_SESSION') :  [],\n  245                  \"Server/Request Data\"   => $this->masked($_SERVER, '_SERVER'),\n  246:                 \"Environment Variables\" => $this->masked($_ENV, '_ENV'),\n  247              ],\n  248          ];\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\filp\\whoops\\src\\Whoops\\Resources\\views\\env_details.html.php:\n    1  <?php /* List data-table values, i.e: $_SERVER, $_GET, .... */ ?>\n    2  <div class=\"details\">\n    3:   <h2 class=\"details-heading\">Environment &amp; details:</h2>\n    4  \n    5    <div class=\"data-table-container\" id=\"data-tables\">\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\filp\\whoops\\src\\Whoops\\Resources\\views\\panel_details.html.php:\n    1  <?php $tpl->render($frame_code) ?>\n    2: <?php $tpl->render($env_details) ?>\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\monolog\\monolog\\src\\Monolog\\Handler\\SamplingHandler.php:\n   16   *\n   17   * A sampled event stream can be useful for logging high frequency events in\n   18:  * a production environment where you only need an idea of what is happening\n   19   * and are not concerned with capturing every occurrence. Since the decision to\n   20   * handle or not handle a particular event is determined randomly, the\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\nikic\\php-parser\\lib\\PhpParser\\Lexer.php:\n  169              }\n  170  \n  171:             $tokenValue = \\is_string($token) ? $token : $token[1];\n  172:             $tokenLen = \\strlen($tokenValue);\n  173  \n  174:             if (substr($this->code, $filePos, $tokenLen) !== $tokenValue) {\n  175                  // Something is missing, must be an invalid character\n  176:                 $nextFilePos = strpos($this->code, $tokenValue, $filePos);\n  177                  $badCharTokens = $this->handleInvalidCharacterRange(\n  178                      $filePos, $nextFilePos, $line, $errorHandler);\n  ...\n  185  \n  186              $filePos += $tokenLen;\n  187:             $line += substr_count($tokenValue, \"\\n\");\n  188          }\n  189  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\nikic\\php-parser\\lib\\PhpParser\\ParserAbstract.php:\n  206                      // shifted (not during read). Otherwise you would sometimes get off-by-one errors, when a rule is\n  207                      // reduced after a token was read but not yet shifted.\n  208:                     $tokenId = $this->lexer->getNextToken($tokenValue, $startAttributes, $endAttributes);\n  209  \n  210                      // map the lexer token id to the internally used symbols\n  ...\n  216                          throw new \\RangeException(sprintf(\n  217                              'The lexer returned an invalid token (id=%d, value=%s)',\n  218:                             $tokenId, $tokenValue\n  219                          ));\n  220                      }\n  ...\n  248                          ++$stackPos;\n  249                          $stateStack[$stackPos] = $state = $action;\n  250:                         $this->semStack[$stackPos] = $tokenValue;\n  251                          $this->startAttributeStack[$stackPos] = $startAttributes;\n  252                          $this->endAttributeStack[$stackPos] = $endAttributes;\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phar-io\\manifest\\tests\\xml\\ContainsElementTest.php:\n   28      }\n   29  \n   30:     public function testThrowsExceptionWhenVersionAttributeIsMissing() {\n   31          $this->domElement->removeAttribute('version');\n   32          $this->expectException(ManifestElementException::class);\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\php-di\\php-di\\src\\ContainerBuilder.php:\n   21   * Helper to create and configure a Container.\n   22   *\n   23:  * With the default options, the container created is appropriate for the development environment.\n   24   *\n   25   * Example:\n   ..\n  102  \n  103      /**\n  104:      * Build a container configured for the dev environment.\n  105       */\n  106      public static function buildDevContainer() : Container\n  ...\n  266       * Configure the proxy generation.\n  267       *\n  268:      * For dev environment, use `writeProxiesToFile(false)` (default configuration)\n  269:      * For production environment, use `writeProxiesToFile(true, 'tmp/proxies')`\n  270       *\n  271       * @see http://php-di.org/doc/lazy-injection.html\n  ...\n  347       *\n  348       * Remember to clear APCu on each deploy else your application will have a stale cache. Do not enable the cache\n  349:      * in development environment: any change you will make to the code will be ignored because of the cache.\n  350       *\n  351       * @see http://php-di.org/doc/performances.html\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\php-di\\php-di\\src\\functions.php:\n    6  \n    7  use DI\\Definition\\ArrayDefinitionExtension;\n    8: use DI\\Definition\\EnvironmentVariableDefinition;\n    9  use DI\\Definition\\Helper\\AutowireDefinitionHelper;\n   10  use DI\\Definition\\Helper\\CreateDefinitionHelper;\n   ..\n   94  }\n   95  \n   96: if (! function_exists('DI\\env')) {\n   97      /**\n   98:      * Helper for referencing environment variables.\n   99       *\n  100:      * @param string $variableName The name of the environment variable.\n  101:      * @param mixed $defaultValue The default value to be used if the environment variable is not defined.\n  102       */\n  103:     function env(string $variableName, $defaultValue = null) : EnvironmentVariableDefinition\n  104      {\n  105          // Only mark as optional if the default value was *explicitly* provided.\n  106          $isOptional = 2 === func_num_args();\n  107  \n  108:         return new EnvironmentVariableDefinition($variableName, $isOptional, $defaultValue);\n  109      }\n  110  }\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\php-di\\php-di\\src\\Compiler\\Compiler.php:\n    8  use DI\\Definition\\DecoratorDefinition;\n    9  use DI\\Definition\\Definition;\n   10: use DI\\Definition\\EnvironmentVariableDefinition;\n   11  use DI\\Definition\\Exception\\InvalidDefinition;\n   12  use DI\\Definition\\FactoryDefinition;\n   ..\n  187                  $code = 'return \\DI\\Definition\\StringDefinition::resolveExpression(' . $entryName . ', ' . $expression . ', $this->delegateContainer);';\n  188                  break;\n  189:             case $definition instanceof EnvironmentVariableDefinition:\n  190                  $variableName = $this->compileValue($definition->getVariableName());\n  191                  $isOptional = $this->compileValue($definition->isOptional());\n  192                  $defaultValue = $this->compileValue($definition->getDefaultValue());\n  193                  $code = <<<PHP\n  194:         \\$value = getenv($variableName);\n  195          if (false !== \\$value) return \\$value;\n  196          if (!$isOptional) {\n  197:             throw new \\DI\\Definition\\Exception\\InvalidDefinition(\"The environment variable '{$definition->getVariableName()}' has not been defined\");\n  198          }\n  199          return $defaultValue;\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\php-di\\php-di\\src\\Definition\\EnvironmentVariableDefinition.php:\n    6  \n    7  /**\n    8:  * Defines a reference to an environment variable, with fallback to a default\n    9:  * value if the environment variable is not defined.\n   10   *\n   11   * @author James Harris <james.harris@icecave.com.au>\n   12   */\n   13: class EnvironmentVariableDefinition implements Definition\n   14  {\n   15      /**\n   ..\n   20  \n   21      /**\n   22:      * The name of the environment variable.\n   23       * @var string\n   24       */\n   ..\n   26  \n   27      /**\n   28:      * Whether or not the environment variable definition is optional.\n   29       *\n   30:      * If true and the environment variable given by $variableName has not been\n   31       * defined, $defaultValue is used.\n   32       *\n   ..\n   36  \n   37      /**\n   38:      * The default value to use if the environment variable is optional and not provided.\n   39       * @var mixed\n   40       */\n   ..\n   42  \n   43      /**\n   44:      * @param string $variableName The name of the environment variable\n   45:      * @param bool $isOptional Whether or not the environment variable definition is optional\n   46:      * @param mixed $defaultValue The default value to use if the environment variable is optional and not provided\n   47       */\n   48      public function __construct(string $variableName, bool $isOptional = false, $defaultValue = null)\n   ..\n   64  \n   65      /**\n   66:      * @return string The name of the environment variable\n   67       */\n   68      public function getVariableName() : string\n   ..\n   72  \n   73      /**\n   74:      * @return bool Whether or not the environment variable definition is optional\n   75       */\n   76      public function isOptional() : bool\n   ..\n   80  \n   81      /**\n   82:      * @return mixed The default value to use if the environment variable is optional and not provided\n   83       */\n   84      public function getDefaultValue()\n   ..\n  108          }\n  109  \n  110:         return sprintf('Environment variable (' . PHP_EOL . '%s' . PHP_EOL . ')', $str);\n  111      }\n  112  }\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\php-di\\php-di\\src\\Definition\\Resolver\\EnvironmentVariableResolver.php:\n    6  \n    7  use DI\\Definition\\Definition;\n    8: use DI\\Definition\\EnvironmentVariableDefinition;\n    9  use DI\\Definition\\Exception\\InvalidDefinition;\n   10  \n   11  /**\n   12:  * Resolves a environment variable definition to a value.\n   13   *\n   14   * @author James Harris <james.harris@icecave.com.au>\n   15   */\n   16: class EnvironmentVariableResolver implements DefinitionResolver\n   17  {\n   18      /**\n   ..\n   26      private $variableReader;\n   27  \n   28:     public function __construct(DefinitionResolver $definitionResolver, $variableReader = 'getenv')\n   29      {\n   30          $this->definitionResolver = $definitionResolver;\n   ..\n   33  \n   34      /**\n   35:      * Resolve an environment variable definition to a value.\n   36       *\n   37:      * @param EnvironmentVariableDefinition $definition\n   38       */\n   39      public function resolve(Definition $definition, array $parameters = [])\n   ..\n   47          if (!$definition->isOptional()) {\n   48              throw new InvalidDefinition(sprintf(\n   49:                 \"The environment variable '%s' has not been defined\",\n   50                  $definition->getVariableName()\n   51              ));\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\php-di\\php-di\\src\\Definition\\Resolver\\ResolverDispatcher.php:\n   35      private $objectResolver;\n   36      private $instanceResolver;\n   37:     private $envVariableResolver;\n   38  \n   39      public function __construct(ContainerInterface $container, ProxyFactory $proxyFactory)\n   ..\n  109  \n  110                  return $this->arrayResolver;\n  111:             case $definition instanceof \\DI\\Definition\\EnvironmentVariableDefinition:\n  112:                 if (! $this->envVariableResolver) {\n  113:                     $this->envVariableResolver = new EnvironmentVariableResolver($this);\n  114                  }\n  115  \n  116:                 return $this->envVariableResolver;\n  117              case $definition instanceof \\DI\\Definition\\InstanceDefinition:\n  118                  if (! $this->instanceResolver) {\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpspec\\prophecy\\src\\Prophecy\\Doubler\\Generator\\ClassCreator.php:\n   16  /**\n   17   * Class creator.\n   18:  * Creates specific class in current environment.\n   19   *\n   20   * @author Konstantin Kudryashov <ever.zet@gmail.com>\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\php-code-coverage\\src\\CodeCoverage.php:\n   19  use SebastianBergmann\\CodeCoverage\\Node\\Directory;\n   20  use SebastianBergmann\\CodeUnitReverseLookup\\Wizard;\n   21: use SebastianBergmann\\Environment\\Runtime;\n   22  \n   23  /**\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\php-code-coverage\\src\\Report\\Html\\Renderer.php:\n   14  use SebastianBergmann\\CodeCoverage\\Node\\File as FileNode;\n   15  use SebastianBergmann\\CodeCoverage\\Version;\n   16: use SebastianBergmann\\Environment\\Runtime;\n   17  \n   18  /**\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\php-code-coverage\\src\\Report\\Xml\\BuildInformation.php:\n   10  namespace SebastianBergmann\\CodeCoverage\\Report\\Xml;\n   11  \n   12: use SebastianBergmann\\Environment\\Runtime;\n   13  \n   14  final class BuildInformation\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\php-code-coverage\\src\\Report\\Xml\\Facade.php:\n   16  use SebastianBergmann\\CodeCoverage\\RuntimeException;\n   17  use SebastianBergmann\\CodeCoverage\\Version;\n   18: use SebastianBergmann\\Environment\\Runtime;\n   19  \n   20  final class Facade\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\src\\Runner\\PhptTestCase.php:\n  134          }\n  135  \n  136:         if (isset($sections['ENV'])) {\n  137:             $env = $this->parseEnvSection($sections['ENV']);\n  138:             $this->phpUtil->setEnv($env);\n  139          }\n  140  \n  ...\n  273      }\n  274  \n  275:     private function parseEnvSection(string $content): array\n  276      {\n  277:         $env = [];\n  278  \n  279          foreach (\\explode(\"\\n\", \\trim($content)) as $e) {\n  ...\n  281  \n  282              if (!empty($e[0]) && isset($e[1])) {\n  283:                 $env[$e[0]] = $e[1];\n  284              }\n  285          }\n  286  \n  287:         return $env;\n  288      }\n  289  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\src\\TextUI\\ResultPrinter.php:\n   22  use PHPUnit\\Util\\InvalidArgumentHelper;\n   23  use PHPUnit\\Util\\Printer;\n   24: use SebastianBergmann\\Environment\\Console;\n   25  use SebastianBergmann\\Timer\\Timer;\n   26  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\src\\TextUI\\TestRunner.php:\n   57  use SebastianBergmann\\CodeCoverage\\Report\\Xml\\Facade as XmlReport;\n   58  use SebastianBergmann\\Comparator\\Comparator;\n   59: use SebastianBergmann\\Environment\\Runtime;\n   60  use SebastianBergmann\\Invoker\\Invoker;\n   61  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\src\\Util\\Blacklist.php:\n   26  use SebastianBergmann\\Comparator\\Comparator;\n   27  use SebastianBergmann\\Diff\\Diff;\n   28: use SebastianBergmann\\Environment\\Runtime;\n   29  use SebastianBergmann\\Exporter\\Exporter;\n   30  use SebastianBergmann\\FileIterator\\Facade as FileIteratorFacade;\n   ..\n  106          Diff::class => 1,\n  107  \n  108:         // sebastian/environment\n  109          Runtime::class => 1,\n  110  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\src\\Util\\Configuration.php:\n  146   *     <const name=\"foo\" value=\"bar\"/>\n  147   *     <var name=\"foo\" value=\"bar\"/>\n  148:  *     <env name=\"foo\" value=\"bar\"/>\n  149   *     <post name=\"foo\" value=\"bar\"/>\n  150   *     <get name=\"foo\" value=\"bar\"/>\n  ...\n  467              'const'        => [],\n  468              'var'          => [],\n  469:             'env'          => [],\n  470              'post'         => [],\n  471              'get'          => [],\n  ...\n  500          }\n  501  \n  502:         foreach (['var', 'env', 'post', 'get', 'cookie', 'server', 'files', 'request'] as $array) {\n  503              foreach ($this->xpath->query('php/' . $array) as $var) {\n  504                  /** @var DOMElement $var */\n  ...\n  588          }\n  589  \n  590:         foreach ($configuration['env'] as $name => $data) {\n  591              $value = $data['value'];\n  592              $force = $data['force'] ?? false;\n  593  \n  594:             if ($force || \\getenv($name) === false) {\n  595:                 \\putenv(\"{$name}={$value}\");\n  596              }\n  597  \n  598:             $value = \\getenv($name);\n  599  \n  600:             if (!isset($_ENV[$name])) {\n  601:                 $_ENV[$name] = $value;\n  602              }\n  603  \n  604              if ($force === true) {\n  605:                 $_ENV[$name] = $value;\n  606              }\n  607          }\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\src\\Util\\GlobalState.php:\n   18       */\n   19      private const SUPER_GLOBAL_ARRAYS = [\n   20:         '_ENV',\n   21          '_POST',\n   22          '_GET',\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\src\\Util\\Test.php:\n   24  use ReflectionFunction;\n   25  use ReflectionMethod;\n   26: use SebastianBergmann\\Environment\\OperatingSystem;\n   27  use Traversable;\n   28  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\src\\Util\\TestResultCache.php:\n   72          }\n   73  \n   74:         $this->cacheFilename = $filepath ?? $_ENV['PHPUNIT_RESULT_CACHE'] ?? self::DEFAULT_RESULT_CACHE_FILENAME;\n   75      }\n   76  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\src\\Util\\PHP\\AbstractPhpProcess.php:\n   18  use PHPUnit\\Framework\\TestFailure;\n   19  use PHPUnit\\Framework\\TestResult;\n   20: use SebastianBergmann\\Environment\\Runtime;\n   21  \n   22  /**\n   ..\n   48       * @var array<string, string>\n   49       */\n   50:     protected $env = [];\n   51  \n   52      /**\n   ..\n  120  \n  121      /**\n  122:      * Sets the array of environment variables to start the child process with\n  123       *\n  124:      * @param array<string, string> $env\n  125       */\n  126:     public function setEnv(array $env): void\n  127      {\n  128:         $this->env = $env;\n  129      }\n  130  \n  131      /**\n  132:      * Returns the array of environment variables to start the child process with\n  133       */\n  134:     public function getEnv(): array\n  135      {\n  136:         return $this->env;\n  137      }\n  138  \n  ...\n  243  \n  244              try {\n  245:                 if (\\strpos($stdout, \"#!/usr/bin/env php\\n\") === 0) {\n  246                      $stdout = \\substr($stdout, 19);\n  247                  }\n  248  \n  249:                 $childResult = \\unserialize(\\str_replace(\"#!/usr/bin/env php\\n\", '', $stdout));\n  250                  \\restore_error_handler();\n  251              } catch (ErrorException $e) {\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\src\\Util\\PHP\\DefaultPhpProcess.php:\n   60          $handles = $this->getHandles();\n   61  \n   62:         $env = null;\n   63  \n   64:         if ($this->env) {\n   65:             $env = $_SERVER ?? [];\n   66:             unset($env['argv'], $env['argc']);\n   67:             $env = \\array_merge($env, $this->env);\n   68  \n   69:             foreach ($env as $envKey => $envVar) {\n   70:                 if (\\is_array($envVar)) {\n   71:                     unset($env[$envKey]);\n   72                  }\n   73              }\n   ..\n   85              $pipes,\n   86              null,\n   87:             $env\n   88          );\n   89  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\src\\Util\\PHP\\WindowsPhpProcess.php:\n   31          if (false === $stdout_handle = \\tmpfile()) {\n   32              throw new Exception(\n   33:                 'A temporary file could not be created; verify that your TEMP environment variable is writable'\n   34              );\n   35          }\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\tests\\end-to-end\\regression\\GitHub\\1216\\bootstrap1216.php:\n    8   * file that was distributed with this source code.\n    9   */\n   10: $_ENV['configAvailableInBootstrap'] = isset($_ENV['loadedFromConfig']);\n   11  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\tests\\end-to-end\\regression\\GitHub\\1216\\Issue1216Test.php:\n   14      public function testConfigAvailableInBootstrap(): void\n   15      {\n   16:         $this->assertTrue($_ENV['configAvailableInBootstrap']);\n   17      }\n   18  }\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\tests\\unit\\Framework\\TestCaseTest.php:\n   22      {\n   23          $GLOBALS['a']  = 'a';\n   24:         $_ENV['b']     = 'b';\n   25          $_POST['c']    = 'c';\n   26          $_GET['d']     = 'd';\n   ..\n   36          unset(\n   37              $GLOBALS['a'],\n   38:             $_ENV['b'],\n   39              $_POST['c'],\n   40              $_GET['d'],\n   ..\n  353          $this->assertEquals('a', $a);\n  354          $this->assertEquals('a', $GLOBALS['a']);\n  355:         $this->assertEquals('b', $_ENV['b']);\n  356          $this->assertEquals('c', $_POST['c']);\n  357          $this->assertEquals('d', $_GET['d']);\n  ...\n  365          $GLOBALS['a']   = 'aa';\n  366          $GLOBALS['foo'] = 'bar';\n  367:         $_ENV['b']      = 'bb';\n  368          $_POST['c']     = 'cc';\n  369          $_GET['d']      = 'dd';\n  ...\n  377          $this->assertEquals('aa', $GLOBALS['a']);\n  378          $this->assertEquals('bar', $GLOBALS['foo']);\n  379:         $this->assertEquals('bb', $_ENV['b']);\n  380          $this->assertEquals('cc', $_POST['c']);\n  381          $this->assertEquals('dd', $_GET['d']);\n  ...\n  398          $this->assertEquals('a', $a);\n  399          $this->assertEquals('a', $GLOBALS['a']);\n  400:         $this->assertEquals('b', $_ENV['b']);\n  401          $this->assertEquals('c', $_POST['c']);\n  402          $this->assertEquals('d', $_GET['d']);\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\tests\\unit\\Util\\ConfigurationTest.php:\n  352                  'const'  => ['FOO' => ['value' => false], 'BAR' => ['value' => true]],\n  353                  'var'    => ['foo' => ['value' => false]],\n  354:                 'env'    => ['foo' => ['value' => true], 'bar' => ['value' => 'true', 'verbatim' => true], 'foo_force' => ['value' => 'forced', 'force' => true]],\n  355                  'post'   => ['foo' => ['value' => 'bar']],\n  356                  'get'    => ['foo' => ['value' => 'bar']],\n  ...\n  381          $this->assertTrue(\\BAR);\n  382          $this->assertFalse($GLOBALS['foo']);\n  383:         $this->assertTrue((bool) $_ENV['foo']);\n  384:         $this->assertEquals(1, \\getenv('foo'));\n  385          $this->assertEquals('bar', $_POST['foo']);\n  386          $this->assertEquals('bar', $_GET['foo']);\n  ...\n  399       * @see https://github.com/sebastianbergmann/phpunit/issues/1181\n  400       */\n  401:     public function testHandlePHPConfigurationDoesNotOverwrittenExistingEnvArrayVariables(): void\n  402      {\n  403:         $_ENV['foo'] = false;\n  404          $this->configuration->handlePHPConfiguration();\n  405  \n  406:         $this->assertFalse($_ENV['foo']);\n  407:         $this->assertEquals('forced', \\getenv('foo_force'));\n  408      }\n  409  \n  ...\n  413       * @see https://github.com/sebastianbergmann/phpunit/issues/2353\n  414       */\n  415:     public function testHandlePHPConfigurationDoesForceOverwrittenExistingEnvArrayVariables(): void\n  416      {\n  417:         $_ENV['foo_force'] = false;\n  418          $this->configuration->handlePHPConfiguration();\n  419  \n  420:         $this->assertEquals('forced', $_ENV['foo_force']);\n  421:         $this->assertEquals('forced', \\getenv('foo_force'));\n  422      }\n  423  \n  ...\n  427       * @see https://github.com/sebastianbergmann/phpunit/issues/1181\n  428       */\n  429:     public function testHandlePHPConfigurationDoesNotOverriteVariablesFromPutEnv(): void\n  430      {\n  431:         $backupFoo = \\getenv('foo');\n  432  \n  433:         \\putenv('foo=putenv');\n  434          $this->configuration->handlePHPConfiguration();\n  435  \n  436:         $this->assertEquals('putenv', $_ENV['foo']);\n  437:         $this->assertEquals('putenv', \\getenv('foo'));\n  438  \n  439          if ($backupFoo === false) {\n  440:             \\putenv('foo');     // delete variable from environment\n  441          } else {\n  442:             \\putenv(\"foo=$backupFoo\");\n  443          }\n  444      }\n  ...\n  449       * @see https://github.com/sebastianbergmann/phpunit/issues/1181\n  450       */\n  451:     public function testHandlePHPConfigurationDoesOverwriteVariablesFromPutEnvWhenForced(): void\n  452      {\n  453:         \\putenv('foo_force=putenv');\n  454          $this->configuration->handlePHPConfiguration();\n  455  \n  456:         $this->assertEquals('forced', $_ENV['foo_force']);\n  457:         $this->assertEquals('forced', \\getenv('foo_force'));\n  458      }\n  459  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\tests\\unit\\Util\\PHP\\AbstractPhpProcessTest.php:\n  104      }\n  105  \n  106:     public function testEnvGetterAndSetter(): void\n  107      {\n  108:         $this->phpProcess->setEnv(['foo' => 'bar']);\n  109  \n  110:         $this->assertEquals(['foo' => 'bar'], $this->phpProcess->getEnv());\n  111      }\n  112  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\psr\\http-message\\src\\ServerRequestInterface.php:\n   16   *\n   17   * Additionally, it encapsulates all data as it has arrived to the\n   18:  * application from the CGI and/or PHP environment, including:\n   19   *\n   20   * - The values represented in $_SERVER.\n   ..\n   46       * Retrieve server parameters.\n   47       *\n   48:      * Retrieves data related to the incoming request environment,\n   49       * typically derived from PHP's $_SERVER superglobal. The data IS NOT\n   50       * REQUIRED to originate from $_SERVER.\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\psr\\http-message\\src\\UploadedFileInterface.php:\n   35       *\n   36       * Use this method as an alternative to move_uploaded_file(). This method is\n   37:      * guaranteed to work in both SAPI and non-SAPI environments.\n   38:      * Implementations must determine which environment they are in, and use the\n   39       * appropriate method (move_uploaded_file(), rename(), or a stream\n   40       * operation) to perform the operation.\n   ..\n   49       * an exception.\n   50       *\n   51:      * When used in an SAPI environment where $_FILES is populated, when writing\n   52       * files via moveTo(), is_uploaded_file() and move_uploaded_file() SHOULD be\n   53       * used to ensure permissions and upload status are verified correctly.\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\sebastian\\environment\\src\\Console.php:\n    1  <?php declare(strict_types=1);\n    2  /*\n    3:  * This file is part of sebastian/environment.\n    4   *\n    5   * (c) Sebastian Bergmann <sebastian@phpunit.de>\n    .\n    8   * file that was distributed with this source code.\n    9   */\n   10: namespace SebastianBergmann\\Environment;\n   11  \n   12  final class Console\n   ..\n   35      public function hasColorSupport(): bool\n   36      {\n   37:         if ('Hyper' === \\getenv('TERM_PROGRAM')) {\n   38              return true;\n   39          }\n   ..\n   42              // @codeCoverageIgnoreStart\n   43              return (\\defined('STDOUT') && \\function_exists('sapi_windows_vt100_support') && @sapi_windows_vt100_support(\\STDOUT))\n   44:                 || false !== \\getenv('ANSICON')\n   45:                 || 'ON' === \\getenv('ConEmuANSI')\n   46:                 || 'xterm' === \\getenv('TERM');\n   47              // @codeCoverageIgnoreEnd\n   48          }\n   ..\n  125      private function getNumberOfColumnsWindows(): int\n  126      {\n  127:         $ansicon = \\getenv('ANSICON');\n  128          $columns = 80;\n  129  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\sebastian\\environment\\src\\OperatingSystem.php:\n    1  <?php declare(strict_types=1);\n    2  /*\n    3:  * This file is part of sebastian/environment.\n    4   *\n    5   * (c) Sebastian Bergmann <sebastian@phpunit.de>\n    .\n    8   * file that was distributed with this source code.\n    9   */\n   10: namespace SebastianBergmann\\Environment;\n   11  \n   12  final class OperatingSystem\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\sebastian\\environment\\src\\Runtime.php:\n    1  <?php declare(strict_types=1);\n    2  /*\n    3:  * This file is part of sebastian/environment.\n    4   *\n    5   * (c) Sebastian Bergmann <sebastian@phpunit.de>\n    .\n    8   * file that was distributed with this source code.\n    9   */\n   10: namespace SebastianBergmann\\Environment;\n   11  \n   12  /**\n   13:  * Utility class for HHVM/PHP environment handling.\n   14   */\n   15  final class Runtime\n   ..\n   62          if (self::$binary === null && $this->isHHVM()) {\n   63              // @codeCoverageIgnoreStart\n   64:             if ((self::$binary = \\getenv('PHP_BINARY')) === false) {\n   65                  self::$binary = \\PHP_BINARY;\n   66              }\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\sebastian\\environment\\tests\\ConsoleTest.php:\n    1  <?php declare(strict_types=1);\n    2  /*\n    3:  * This file is part of sebastian/environment.\n    4   *\n    5   * (c) Sebastian Bergmann <sebastian@phpunit.de>\n    .\n    8   * file that was distributed with this source code.\n    9   */\n   10: namespace SebastianBergmann\\Environment;\n   11  \n   12  use PHPUnit\\Framework\\TestCase;\n   13  \n   14  /**\n   15:  * @covers \\SebastianBergmann\\Environment\\Console\n   16   */\n   17  final class ConsoleTest extends TestCase\n   18  {\n   19      /**\n   20:      * @var \\SebastianBergmann\\Environment\\Console\n   21       */\n   22      private $console;\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\sebastian\\environment\\tests\\OperatingSystemTest.php:\n    1  <?php declare(strict_types=1);\n    2  /*\n    3:  * This file is part of sebastian/environment.\n    4   *\n    5   * (c) Sebastian Bergmann <sebastian@phpunit.de>\n    .\n    8   * file that was distributed with this source code.\n    9   */\n   10: namespace SebastianBergmann\\Environment;\n   11  \n   12  use PHPUnit\\Framework\\TestCase;\n   13  \n   14  /**\n   15:  * @covers \\SebastianBergmann\\Environment\\OperatingSystem\n   16   */\n   17  final class OperatingSystemTest extends TestCase\n   18  {\n   19      /**\n   20:      * @var \\SebastianBergmann\\Environment\\OperatingSystem\n   21       */\n   22      private $os;\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\sebastian\\environment\\tests\\RuntimeTest.php:\n    1  <?php declare(strict_types=1);\n    2  /*\n    3:  * This file is part of sebastian/environment.\n    4   *\n    5   * (c) Sebastian Bergmann <sebastian@phpunit.de>\n    .\n    8   * file that was distributed with this source code.\n    9   */\n   10: namespace SebastianBergmann\\Environment;\n   11  \n   12  use PHPUnit\\Framework\\TestCase;\n   13  \n   14  /**\n   15:  * @covers \\SebastianBergmann\\Environment\\Runtime\n   16   */\n   17  final class RuntimeTest extends TestCase\n   18  {\n   19      /**\n   20:      * @var \\SebastianBergmann\\Environment\\Runtime\n   21       */\n   22:     private $env;\n   23  \n   24      protected function setUp(): void\n   25      {\n   26:         $this->env = new Runtime;\n   27      }\n   28  \n   ..\n   32      public function testCanCollectCodeCoverageWhenXdebugExtensionIsEnabled(): void\n   33      {\n   34:         $this->assertTrue($this->env->canCollectCodeCoverage());\n   35      }\n   36  \n   ..\n   40      public function testCanCollectCodeCoverageWhenPcovExtensionIsEnabled(): void\n   41      {\n   42:         $this->assertTrue($this->env->canCollectCodeCoverage());\n   43      }\n   44  \n   ..\n   47          $this->markTestSkippedWhenNotRunningOnPhpdbg();\n   48  \n   49:         $this->assertTrue($this->env->canCollectCodeCoverage());\n   50      }\n   51  \n   52      public function testBinaryCanBeRetrieved(): void\n   53      {\n   54:         $this->assertNotEmpty($this->env->getBinary());\n   55      }\n   56  \n   ..\n   60      public function testIsHhvmReturnsFalseWhenRunningOnPhp(): void\n   61      {\n   62:         $this->assertFalse($this->env->isHHVM());\n   63      }\n   64  \n   ..\n   70          $this->markTestSkippedWhenRunningOnPhpdbg();\n   71  \n   72:         $this->assertTrue($this->env->isPHP());\n   73      }\n   74  \n   ..\n   78      public function testPCOVCanBeDetected(): void\n   79      {\n   80:         $this->assertTrue($this->env->hasPCOV());\n   81      }\n   82  \n   ..\n   85          $this->markTestSkippedWhenNotRunningOnPhpdbg();\n   86  \n   87:         $this->assertTrue($this->env->hasPHPDBGCodeCoverage());\n   88      }\n   89  \n   ..\n   95          $this->markTestSkippedWhenRunningOnPhpdbg();\n   96  \n   97:         $this->assertTrue($this->env->hasXdebug());\n   98      }\n   99  \n  100      public function testNameAndVersionCanBeRetrieved(): void\n  101      {\n  102:         $this->assertNotEmpty($this->env->getNameWithVersion());\n  103      }\n  104  \n  ...\n  107          $this->markTestSkippedWhenNotRunningOnPhpdbg();\n  108  \n  109:         $this->assertSame('PHPDBG', $this->env->getName());\n  110      }\n  111  \n  ...\n  117          $this->markTestSkippedWhenRunningOnPhpdbg();\n  118  \n  119:         $this->assertSame('PHP', $this->env->getName());\n  120      }\n  121  \n  122      public function testNameAndCodeCoverageDriverCanBeRetrieved(): void\n  123      {\n  124:         $this->assertNotEmpty($this->env->getNameWithVersionAndCodeCoverageDriver());\n  125      }\n  126  \n  ...\n  130      public function testGetVersionReturnsPhpVersionWhenRunningPhp(): void\n  131      {\n  132:         $this->assertSame(\\PHP_VERSION, $this->env->getVersion());\n  133      }\n  134  \n  ...\n  138      public function testGetVendorUrlReturnsPhpDotNetWhenRunningPhp(): void\n  139      {\n  140:         $this->assertSame('https://secure.php.net/', $this->env->getVendorUrl());\n  141      }\n  142  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\sebastian\\global-state\\src\\Snapshot.php:\n  319      {\n  320          $this->superGlobalArrays = [\n  321:             '_ENV',\n  322              '_POST',\n  323              '_GET',\n  ...\n  332                  $this->superGlobalArrays,\n  333                  [\n  334:                     'HTTP_ENV_VARS',\n  335                      'HTTP_POST_VARS',\n  336                      'HTTP_GET_VARS',\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\sebastian\\resource-operations\\build\\generate.php:\n    1: #!/usr/bin/env php\n    2  <?php declare(strict_types=1);\n    3  /*\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\sebastian\\resource-operations\\src\\ResourceOperations.php:\n  926              'gzwrite',\n  927              'hash_update_stream',\n  928:             'http\\Env\\Response::send',\n  929              'http_get_request_body_stream',\n  930              'ibase_add_user',\n  ...\n 1164              'ingres_result_seek',\n 1165              'ingres_rollback',\n 1166:             'ingres_set_environment',\n 1167              'ingres_unbuffered_query',\n 1168              'inotify_add_watch',\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\slim\\psr7\\src\\Environment.php:\n   10  namespace Slim\\Psr7;\n   11  \n   12: class Environment\n   13  {\n   14      /**\n   15:      * @param  array $data Array of custom environment keys and values\n   16       *\n   17       * @return array\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\slim\\psr7\\src\\Request.php:\n   69       * @param HeadersInterface $headers       The request headers collection\n   70       * @param array            $cookies       The request cookies collection\n   71:      * @param array            $serverParams  The server environment variables\n   72       * @param StreamInterface  $body          The request body object\n   73       * @param array            $uploadedFiles The request uploadedFiles collection\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\slim\\psr7\\src\\UploadedFile.php:\n   52  \n   53      /**\n   54:      * Indicates if the upload is from a SAPI environment.\n   55       *\n   56       * @var bool\n   ..\n   77       * @param int|null               $size             The file size in bytes.\n   78       * @param int                    $error            The UPLOAD_ERR_XXX code representing the status of the upload.\n   79:      * @param bool                   $sapi             Indicates if the upload is in a SAPI environment.\n   80       */\n   81      public function __construct(\n   ..\n  200  \n  201      /**\n  202:      * Create a normalized tree of UploadedFile instances from the Environment.\n  203       *\n  204       * @internal This method is not part of the PSR-7 standard.\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\slim\\psr7\\src\\Factory\\ServerRequestFactory.php:\n   78  \n   79      /**\n   80:      * Create new ServerRequest from environment.\n   81       *\n   82       * @internal This method is not part of PSR-17\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\slim\\psr7\\src\\Factory\\UriFactory.php:\n   41  \n   42      /**\n   43:      * Create new Uri from environment.\n   44       *\n   45       * @internal This method is not part of PSR-17\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\slim\\slim\\Slim\\Routing\\RouteCollector.php:\n   23  /**\n   24   * RouteCollector is used to collect routes and route groups\n   25:  * as well as generate paths and URLs relative to its environment\n   26   */\n   27  class RouteCollector implements RouteCollectorInterface\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\symfony\\cache\\DependencyInjection\\CachePoolPass.php:\n  159      public static function getServiceProvider(ContainerBuilder $container, $name)\n  160      {\n  161:         $container->resolveEnvPlaceholders($name, null, $usedEnvs);\n  162  \n  163:         if ($usedEnvs || preg_match('#^[a-z]++:#', $name)) {\n  164              $dsn = $name;\n  165  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\symfony\\cache\\Tests\\Adapter\\AbstractRedisAdapterTest.php:\n   34              self::markTestSkipped('Extension redis required.');\n   35          }\n   36:         if (!@((new \\Redis())->connect(getenv('REDIS_HOST')))) {\n   37              $e = error_get_last();\n   38              self::markTestSkipped($e['message']);\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\symfony\\cache\\Tests\\Adapter\\ApcuAdapterTest.php:\n  106      {\n  107          try {\n  108:             // disable PHPUnit error handler to mimic a production environment\n  109              $isCalled = false;\n  110              set_error_handler(function () use (&$isCalled) {\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\symfony\\cache\\Tests\\Adapter\\MemcachedAdapterTest.php:\n   29              self::markTestSkipped('Extension memcached >=2.2.0 required.');\n   30          }\n   31:         self::$client = AbstractAdapter::createConnection('memcached://'.getenv('MEMCACHED_HOST'), ['binary_protocol' => false]);\n   32          self::$client->get('foo');\n   33          $code = self::$client->getResultCode();\n   ..\n   40      public function createCachePool($defaultLifetime = 0)\n   41      {\n   42:         $client = $defaultLifetime ? AbstractAdapter::createConnection('memcached://'.getenv('MEMCACHED_HOST')) : self::$client;\n   43  \n   44          return new MemcachedAdapter($client, str_replace('\\\\', '.', __CLASS__), $defaultLifetime);\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\symfony\\cache\\Tests\\Adapter\\PredisAdapterTest.php:\n   20      {\n   21          parent::setUpBeforeClass();\n   22:         self::$redis = new \\Predis\\Client(['host' => getenv('REDIS_HOST')]);\n   23      }\n   24  \n   25      public function testCreateConnection()\n   26      {\n   27:         $redisHost = getenv('REDIS_HOST');\n   28  \n   29          $redis = RedisAdapter::createConnection('redis://'.$redisHost.'/1', ['class' => \\Predis\\Client::class, 'timeout' => 3]);\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\symfony\\cache\\Tests\\Adapter\\PredisClusterAdapterTest.php:\n   17      {\n   18          parent::setUpBeforeClass();\n   19:         self::$redis = new \\Predis\\Client([['host' => getenv('REDIS_HOST')]]);\n   20      }\n   21  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\symfony\\cache\\Tests\\Adapter\\PredisRedisClusterAdapterTest.php:\n   18      public static function setUpBeforeClass(): void\n   19      {\n   20:         if (!$hosts = getenv('REDIS_CLUSTER_HOSTS')) {\n   21:             self::markTestSkipped('REDIS_CLUSTER_HOSTS env var is not defined.');\n   22          }\n   23  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\symfony\\cache\\Tests\\Adapter\\RedisAdapterTest.php:\n   21      {\n   22          parent::setUpBeforeClass();\n   23:         self::$redis = AbstractAdapter::createConnection('redis://'.getenv('REDIS_HOST'), ['lazy' => true]);\n   24      }\n   25  \n   ..\n   42          @$redis = null; // some versions of phpredis connect on destruct, let's silence the warning\n   43  \n   44:         $redisHost = getenv('REDIS_HOST');\n   45  \n   46          $redis = RedisAdapter::createConnection($dsnScheme.'://'.$redisHost);\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\symfony\\cache\\Tests\\Adapter\\RedisArrayAdapterTest.php:\n   20              self::markTestSkipped('The RedisArray class is required.');\n   21          }\n   22:         self::$redis = new \\RedisArray([getenv('REDIS_HOST')], ['lazy_connect' => true]);\n   23      }\n   24  }\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\symfony\\cache\\Tests\\Adapter\\RedisClusterAdapterTest.php:\n   23              self::markTestSkipped('The RedisCluster class is required.');\n   24          }\n   25:         if (!$hosts = getenv('REDIS_CLUSTER_HOSTS')) {\n   26:             self::markTestSkipped('REDIS_CLUSTER_HOSTS env var is not defined.');\n   27          }\n   28  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\symfony\\cache\\Tests\\Simple\\AbstractRedisCacheTest.php:\n   37              self::markTestSkipped('Extension redis required.');\n   38          }\n   39:         if (!@((new \\Redis())->connect(getenv('REDIS_HOST')))) {\n   40              $e = error_get_last();\n   41              self::markTestSkipped($e['message']);\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\symfony\\cache\\Tests\\Simple\\MemcachedCacheTest.php:\n   33              self::markTestSkipped('Extension memcached >=2.2.0 required.');\n   34          }\n   35:         self::$client = AbstractAdapter::createConnection('memcached://'.getenv('MEMCACHED_HOST'));\n   36          self::$client->get('foo');\n   37          $code = self::$client->getResultCode();\n   ..\n   44      public function createSimpleCache($defaultLifetime = 0)\n   45      {\n   46:         $client = $defaultLifetime ? AbstractAdapter::createConnection('memcached://'.getenv('MEMCACHED_HOST'), ['binary_protocol' => false]) : self::$client;\n   47  \n   48          return new MemcachedCache($client, str_replace('\\\\', '.', __CLASS__), $defaultLifetime);\n   ..\n   51      public function testCreatePersistentConnectionShouldNotDupServerList()\n   52      {\n   53:         $instance = MemcachedCache::createConnection('memcached://'.getenv('MEMCACHED_HOST'), ['persistent_id' => 'persistent']);\n   54          $this->assertCount(1, $instance->getServerList());\n   55  \n   56:         $instance = MemcachedCache::createConnection('memcached://'.getenv('MEMCACHED_HOST'), ['persistent_id' => 'persistent']);\n   57          $this->assertCount(1, $instance->getServerList());\n   58      }\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\symfony\\cache\\Tests\\Simple\\MemcachedCacheTextModeTest.php:\n   22      public function createSimpleCache($defaultLifetime = 0)\n   23      {\n   24:         $client = AbstractAdapter::createConnection('memcached://'.getenv('MEMCACHED_HOST'), ['binary_protocol' => false]);\n   25  \n   26          return new MemcachedCache($client, str_replace('\\\\', '.', __CLASS__), $defaultLifetime);\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\symfony\\cache\\Tests\\Simple\\RedisArrayCacheTest.php:\n   23              self::markTestSkipped('The RedisArray class is required.');\n   24          }\n   25:         self::$redis = new \\RedisArray([getenv('REDIS_HOST')], ['lazy_connect' => true]);\n   26      }\n   27  }\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\symfony\\cache\\Tests\\Simple\\RedisCacheTest.php:\n   22      {\n   23          parent::setupBeforeClass();\n   24:         self::$redis = RedisCache::createConnection('redis://'.getenv('REDIS_HOST'));\n   25      }\n   26  \n   27      public function testCreateConnection()\n   28      {\n   29:         $redisHost = getenv('REDIS_HOST');\n   30  \n   31          $redis = RedisCache::createConnection('redis://'.$redisHost);\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\symfony\\cache\\Tests\\Simple\\RedisClusterCacheTest.php:\n   22              self::markTestSkipped('The RedisCluster class is required.');\n   23          }\n   24:         if (!$hosts = getenv('REDIS_CLUSTER_HOSTS')) {\n   25:             self::markTestSkipped('REDIS_CLUSTER_HOSTS env var is not defined.');\n   26          }\n   27  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\theseer\\tokenizer\\tests\\TokenTest.php:\n   25      }\n   26  \n   27:     public function testTokenValueCanBeRetrieved() {\n   28          $this->assertEquals('blank', $this->token->getValue());\n   29      }\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Dotenv.php:\n    1  <?php\n    2  \n    3: namespace Dotenv;\n    4  \n    5: use Dotenv\\Environment\\DotenvFactory;\n    6: use Dotenv\\Environment\\FactoryInterface;\n    7: use Dotenv\\Exception\\InvalidPathException;\n    8  \n    9  /**\n   10:  * This is the dotenv class.\n   11   *\n   12:  * It's responsible for loading a `.env` file in the given directory and\n   13:  * setting the environment variables.\n   14   */\n   15: class Dotenv\n   16  {\n   17      /**\n   18       * The loader instance.\n   19       *\n   20:      * @var \\Dotenv\\Loader\n   21       */\n   22      protected $loader;\n   23  \n   24      /**\n   25:      * Create a new dotenv instance.\n   26       *\n   27:      * @param \\Dotenv\\Loader $loader\n   28       *\n   29       * @return void\n   ..\n   35  \n   36      /**\n   37:      * Create a new dotenv instance.\n   38       *\n   39       * @param string|string[]                           $paths\n   40       * @param string|null                               $file\n   41:      * @param \\Dotenv\\Environment\\FactoryInterface|null $envFactory\n   42       *\n   43:      * @return \\Dotenv\\Dotenv\n   44       */\n   45:     public static function create($paths, $file = null, FactoryInterface $envFactory = null)\n   46      {\n   47          $loader = new Loader(\n   48:             self::getFilePaths((array) $paths, $file ?: '.env'),\n   49:             $envFactory ?: new DotenvFactory(),\n   50              true\n   51          );\n   ..\n   70  \n   71      /**\n   72:      * Load environment file in given directory.\n   73       *\n   74:      * @throws \\Dotenv\\Exception\\InvalidPathException|\\Dotenv\\Exception\\InvalidFileException\n   75       *\n   76       * @return array<string|null>\n   ..\n   82  \n   83      /**\n   84:      * Load environment file in given directory, silently failing if it doesn't exist.\n   85       *\n   86:      * @throws \\Dotenv\\Exception\\InvalidFileException\n   87       *\n   88       * @return array<string|null>\n   ..\n   99  \n  100      /**\n  101:      * Load environment file in given directory.\n  102       *\n  103:      * @throws \\Dotenv\\Exception\\InvalidPathException|\\Dotenv\\Exception\\InvalidFileException\n  104       *\n  105       * @return array<string|null>\n  ...\n  115       * @param bool $overload\n  116       *\n  117:      * @throws \\Dotenv\\Exception\\InvalidPathException|\\Dotenv\\Exception\\InvalidFileException\n  118       *\n  119       * @return array<string|null>\n  ...\n  129       * @param string|string[] $variables\n  130       *\n  131:      * @return \\Dotenv\\Validator\n  132       */\n  133      public function required($variables)\n  ...\n  141       * @param string|string[] $variables\n  142       *\n  143:      * @return \\Dotenv\\Validator\n  144       */\n  145      public function ifPresent($variables)\n  ...\n  149  \n  150      /**\n  151:      * Get the list of environment variables declared inside the 'env' file.\n  152       *\n  153       * @return string[]\n  154       */\n  155:     public function getEnvironmentVariableNames()\n  156      {\n  157:         return $this->loader->getEnvironmentVariableNames();\n  158      }\n  159  }\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Lines.php:\n    1  <?php\n    2  \n    3: namespace Dotenv;\n    4  \n    5  class Lines\n    6  {\n    7      /**\n    8:      * Process the array of lines of environment variables.\n    9       *\n   10       * This will produce an array of entries, one per variable.\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Loader.php:\n    1  <?php\n    2  \n    3: namespace Dotenv;\n    4  \n    5: use Dotenv\\Environment\\FactoryInterface;\n    6: use Dotenv\\Exception\\InvalidPathException;\n    7: use Dotenv\\Regex\\Regex;\n    8  use PhpOption\\Option;\n    9  \n   ..\n   27  \n   28      /**\n   29:      * The environment factory instance.\n   30       *\n   31:      * @var \\Dotenv\\Environment\\FactoryInterface\n   32       */\n   33:     protected $envFactory;\n   34  \n   35      /**\n   36:      * The environment variables instance.\n   37       *\n   38:      * @var \\Dotenv\\Environment\\VariablesInterface\n   39       */\n   40:     protected $envVariables;\n   41  \n   42      /**\n   43:      * The list of environment variables declared inside the 'env' file.\n   44       *\n   45       * @var string[]\n   ..\n   51       *\n   52       * @param string[]                             $filePaths\n   53:      * @param \\Dotenv\\Environment\\FactoryInterface $envFactory\n   54       * @param bool                                 $immutable\n   55       *\n   56       * @return void\n   57       */\n   58:     public function __construct(array $filePaths, FactoryInterface $envFactory, $immutable = false)\n   59      {\n   60          $this->filePaths = $filePaths;\n   61:         $this->envFactory = $envFactory;\n   62          $this->setImmutable($immutable);\n   63      }\n   ..\n   72      public function setImmutable($immutable = false)\n   73      {\n   74:         $this->envVariables = $immutable\n   75:             ? $this->envFactory->createImmutable()\n   76:             : $this->envFactory->create();\n   77  \n   78          return $this;\n   ..\n   80  \n   81      /**\n   82:      * Load the environment file from disk.\n   83       *\n   84:      * @throws \\Dotenv\\Exception\\InvalidPathException|\\Dotenv\\Exception\\InvalidFileException\n   85       *\n   86       * @return array<string|null>\n   ..\n   98       * @param string $content\n   99       *\n  100:      * @throws \\Dotenv\\Exception\\InvalidFileException\n  101       *\n  102       * @return array<string|null>\n  ...\n  114       * @param string[] $filePaths\n  115       *\n  116:      * @throws \\Dotenv\\Exception\\InvalidPathException\n  117       *\n  118       * @return string[]\n  ...\n  121      {\n  122          if ($filePaths === []) {\n  123:             throw new InvalidPathException('At least one environment file path must be provided.');\n  124          }\n  125  \n  ...\n  132  \n  133          throw new InvalidPathException(\n  134:             sprintf('Unable to read any of the environment file(s) at [%s].', implode(', ', $filePaths))\n  135          );\n  136      }\n  ...\n  151  \n  152      /**\n  153:      * Process the environment variable entries.\n  154       *\n  155       * We'll fill out any nested variables, and acually set the variable using\n  156:      * the underlying environment variables instance.\n  157       *\n  158       * @param string[] $entries\n  159       *\n  160:      * @throws \\Dotenv\\Exception\\InvalidFileException\n  161       *\n  162       * @return array<string|null>\n  ...\n  169              list($name, $value) = Parser::parse($entry);\n  170              $vars[$name] = $this->resolveNestedVariables($value);\n  171:             $this->setEnvironmentVariable($name, $vars[$name]);\n  172          }\n  173  \n  ...\n  179       *\n  180       * Look for ${varname} patterns in the variable value and replace with an\n  181:      * existing environment variable.\n  182       *\n  183       * @param string|null $value\n  ...\n  195                      '/\\${([a-zA-Z0-9_.]+)}/',\n  196                      function (array $matches) {\n  197:                         return Option::fromValue($this->getEnvironmentVariable($matches[1]))\n  198                              ->getOrElse($matches[0]);\n  199                      },\n  ...\n  205  \n  206      /**\n  207:      * Search the different places for environment variables and return first value found.\n  208       *\n  209       * @param string $name\n  ...\n  211       * @return string|null\n  212       */\n  213:     public function getEnvironmentVariable($name)\n  214      {\n  215:         return $this->envVariables->get($name);\n  216      }\n  217  \n  218      /**\n  219:      * Set an environment variable.\n  220       *\n  221       * @param string      $name\n  ...\n  224       * @return void\n  225       */\n  226:     public function setEnvironmentVariable($name, $value = null)\n  227      {\n  228          $this->variableNames[] = $name;\n  229:         $this->envVariables->set($name, $value);\n  230      }\n  231  \n  232      /**\n  233:      * Clear an environment variable.\n  234       *\n  235       * This method only expects names in normal form.\n  ...\n  239       * @return void\n  240       */\n  241:     public function clearEnvironmentVariable($name)\n  242      {\n  243:         $this->envVariables->clear($name);\n  244      }\n  245  \n  246      /**\n  247:      * Get the list of environment variables names.\n  248       *\n  249       * @return string[]\n  250       */\n  251:     public function getEnvironmentVariableNames()\n  252      {\n  253          return $this->variableNames;\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Parser.php:\n    1  <?php\n    2  \n    3: namespace Dotenv;\n    4  \n    5: use Dotenv\\Exception\\InvalidFileException;\n    6  \n    7  class Parser\n    .\n   15  \n   16      /**\n   17:      * Parse the given environment variable entry into a name and value.\n   18       *\n   19       * @param string $entry\n   20       *\n   21:      * @throws \\Dotenv\\Exception\\InvalidFileException\n   22       *\n   23       * @return array\n   ..\n   35       * @param string $line\n   36       *\n   37:      * @throws \\Dotenv\\Exception\\InvalidFileException\n   38       *\n   39       * @return array\n   ..\n   62       * @param string $name\n   63       *\n   64:      * @throws \\Dotenv\\Exception\\InvalidFileException\n   65       *\n   66       * @return string\n   ..\n   92  \n   93      /**\n   94:      * Strips quotes and comments from the environment variable value.\n   95       *\n   96       * @param string|null $value\n   97       *\n   98:      * @throws \\Dotenv\\Exception\\InvalidFileException\n   99       *\n  100       * @return string|null\n  ...\n  169      {\n  170          return sprintf(\n  171:             'Failed to parse dotenv file due to %s. Failed at [%s].',\n  172              $cause,\n  173              strtok($subject, \"\\n\")\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Validator.php:\n    1  <?php\n    2  \n    3: namespace Dotenv;\n    4  \n    5: use Dotenv\\Exception\\ValidationException;\n    6  \n    7  /**\n    .\n   22       * The loader instance.\n   23       *\n   24:      * @var \\Dotenv\\Loader\n   25       */\n   26      protected $loader;\n   ..\n   30       *\n   31       * @param string[]       $variables\n   32:      * @param \\Dotenv\\Loader $loader\n   33       * @param bool           $required\n   34       *\n   35:      * @throws \\Dotenv\\Exception\\ValidationException\n   36       *\n   37       * @return void\n   ..\n   56       * Assert that each variable is not empty.\n   57       *\n   58:      * @throws \\Dotenv\\Exception\\ValidationException\n   59       *\n   60:      * @return \\Dotenv\\Validator\n   61       */\n   62      public function notEmpty()\n   ..\n   77       * Assert that each specified variable is an integer.\n   78       *\n   79:      * @throws \\Dotenv\\Exception\\ValidationException\n   80       *\n   81:      * @return \\Dotenv\\Validator\n   82       */\n   83      public function isInteger()\n   ..\n   98       * Assert that each specified variable is a boolean.\n   99       *\n  100:      * @throws \\Dotenv\\Exception\\ValidationException\n  101       *\n  102:      * @return \\Dotenv\\Validator\n  103       */\n  104      public function isBoolean()\n  ...\n  125       * @param string[] $choices\n  126       *\n  127:      * @throws \\Dotenv\\Exception\\ValidationException\n  128       *\n  129:      * @return \\Dotenv\\Validator\n  130       */\n  131      public function allowedValues(array $choices)\n  ...\n  145       * @param string   $message\n  146       *\n  147:      * @throws \\Dotenv\\Exception\\ValidationException\n  148       *\n  149:      * @return \\Dotenv\\Validator\n  150       */\n  151      protected function assertCallback(callable $callback, $message = 'failed callback assertion')\n  ...\n  154  \n  155          foreach ($this->variables as $variable) {\n  156:             if ($callback($this->loader->getEnvironmentVariable($variable)) === false) {\n  157                  $failing[] = sprintf('%s %s', $variable, $message);\n  158              }\n  ...\n  161          if (count($failing) > 0) {\n  162              throw new ValidationException(sprintf(\n  163:                 'One or more environment variables failed assertions: %s.',\n  164                  implode(', ', $failing)\n  165              ));\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Environment\\AbstractVariables.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Environment;\n    4  \n    5: use Dotenv\\Environment\\Adapter\\ArrayAdapter;\n    6  use InvalidArgumentException;\n    7  \n    .\n   23       * The record of loaded variables.\n   24       *\n   25:      * @var \\Dotenv\\Environment\\Adapter\\ArrayAdapter\n   26       */\n   27      private $loaded;\n   28  \n   29      /**\n   30:      * Create a new environment variables instance.\n   31       *\n   32       * @param bool $immutable\n   ..\n   41  \n   42      /**\n   43:      * Get an environment variable.\n   44       *\n   45       * @param string $name\n   ..\n   59  \n   60      /**\n   61:      * Get an environment variable.\n   62       *\n   63       * @param string $name\n   ..\n   68  \n   69      /**\n   70:      * Set an environment variable.\n   71       *\n   72       * @param string      $name\n   ..\n   83          }\n   84  \n   85:         // Don't overwrite existing environment variables if we're immutable\n   86:         // Ruby's dotenv does this with `ENV[key] ||= value`.\n   87          if ($this->isImmutable() && $this->get($name) !== null && $this->loaded->get($name)->isEmpty()) {\n   88              return;\n   ..\n   94  \n   95      /**\n   96:      * Set an environment variable.\n   97       *\n   98       * @param string      $name\n   ..\n  104  \n  105      /**\n  106:      * Clear an environment variable.\n  107       *\n  108       * @param string $name\n  ...\n  127  \n  128      /**\n  129:      * Clear an environment variable.\n  130       *\n  131       * @param string $name\n  ...\n  136  \n  137      /**\n  138:      * Determine if the environment is immutable.\n  139       *\n  140       * @return bool\n  ...\n  146  \n  147      /**\n  148:      * Tells whether environment variable has been defined.\n  149       *\n  150       * @param string $name\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Environment\\DotenvFactory.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Environment;\n    4  \n    5: use Dotenv\\Environment\\Adapter\\AdapterInterface;\n    6: use Dotenv\\Environment\\Adapter\\ApacheAdapter;\n    7: use Dotenv\\Environment\\Adapter\\EnvConstAdapter;\n    8: use Dotenv\\Environment\\Adapter\\PutenvAdapter;\n    9: use Dotenv\\Environment\\Adapter\\ServerConstAdapter;\n   10  \n   11  /**\n   12:  * The default implementation of the environment factory interface.\n   13   */\n   14: class DotenvFactory implements FactoryInterface\n   15  {\n   16      /**\n   17       * The set of adapters to use.\n   18       *\n   19:      * @var \\Dotenv\\Environment\\Adapter\\AdapterInterface[]\n   20       */\n   21      protected $adapters;\n   22  \n   23      /**\n   24:      * Create a new dotenv environment factory instance.\n   25       *\n   26       * If no adapters are provided, then the defaults will be used.\n   27       *\n   28:      * @param \\Dotenv\\Environment\\Adapter\\AdapterInterface[]|null $adapters\n   29       *\n   30       * @return void\n   ..\n   32      public function __construct(array $adapters = null)\n   33      {\n   34:         $this->adapters = array_filter($adapters === null ? [new ApacheAdapter(), new EnvConstAdapter(), new ServerConstAdapter(), new PutenvAdapter()] : $adapters, function (AdapterInterface $adapter) {\n   35              return $adapter->isSupported();\n   36          });\n   ..\n   38  \n   39      /**\n   40:      * Creates a new mutable environment variables instance.\n   41       *\n   42:      * @return \\Dotenv\\Environment\\VariablesInterface\n   43       */\n   44      public function create()\n   45      {\n   46:         return new DotenvVariables($this->adapters, false);\n   47      }\n   48  \n   49      /**\n   50:      * Creates a new immutable environment variables instance.\n   51       *\n   52:      * @return \\Dotenv\\Environment\\VariablesInterface\n   53       */\n   54      public function createImmutable()\n   55      {\n   56:         return new DotenvVariables($this->adapters, true);\n   57      }\n   58  }\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Environment\\DotenvVariables.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Environment;\n    4  \n    5  /**\n    6:  * The default implementation of the environment variables interface.\n    7   */\n    8: class DotenvVariables extends AbstractVariables\n    9  {\n   10      /**\n   11       * The set of adapters to use.\n   12       *\n   13:      * @var \\Dotenv\\Environment\\Adapter\\AdapterInterface[]\n   14       */\n   15      protected $adapters;\n   16  \n   17      /**\n   18:      * Create a new dotenv environment variables instance.\n   19       *\n   20:      * @param \\Dotenv\\Environment\\Adapter\\AdapterInterface[] $adapters\n   21       * @param bool                                           $immutable\n   22       *\n   ..\n   30  \n   31      /**\n   32:      * Get an environment variable.\n   33       *\n   34       * We do this by querying our adapters sequentially.\n   ..\n   49  \n   50      /**\n   51:      * Set an environment variable.\n   52       *\n   53       * @param string      $name\n   ..\n   64  \n   65      /**\n   66:      * Clear an environment variable.\n   67       *\n   68       * @param string $name\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Environment\\FactoryInterface.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Environment;\n    4  \n    5  /**\n    6:  * This environment factory interface.\n    7   *\n    8   * If you need custom implementations of the variables interface, implement\n    .\n   12  {\n   13      /**\n   14:      * Creates a new mutable environment variables instance.\n   15       *\n   16:      * @return \\Dotenv\\Environment\\VariablesInterface\n   17       */\n   18      public function create();\n   19  \n   20      /**\n   21:      * Creates a new immutable environment variables instance.\n   22       *\n   23:      * @return \\Dotenv\\Environment\\VariablesInterface\n   24       */\n   25      public function createImmutable();\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Environment\\VariablesInterface.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Environment;\n    4  \n    5  use ArrayAccess;\n    6  \n    7  /**\n    8:  * This environment variables interface.\n    9   */\n   10  interface VariablesInterface extends ArrayAccess\n   11  {\n   12      /**\n   13:      * Determine if the environment is immutable.\n   14       *\n   15       * @return bool\n   ..\n   18  \n   19      /**\n   20:      * Tells whether environment variable has been defined.\n   21       *\n   22       * @param string $name\n   ..\n   27  \n   28      /**\n   29:      * Get an environment variable.\n   30       *\n   31       * @param string $name\n   ..\n   38  \n   39      /**\n   40:      * Set an environment variable.\n   41       *\n   42       * @param string      $name\n   ..\n   50  \n   51      /**\n   52:      * Clear an environment variable.\n   53       *\n   54       * @param string $name\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Environment\\Adapter\\AdapterInterface.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Environment\\Adapter;\n    4  \n    5  interface AdapterInterface\n    .\n   13  \n   14      /**\n   15:      * Get an environment variable, if it exists.\n   16       *\n   17       * @param string $name\n   ..\n   22  \n   23      /**\n   24:      * Set an environment variable.\n   25       *\n   26       * @param string      $name\n   ..\n   32  \n   33      /**\n   34:      * Clear an environment variable.\n   35       *\n   36       * @param string $name\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Environment\\Adapter\\ApacheAdapter.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Environment\\Adapter;\n    4  \n    5  use PhpOption\\None;\n    .\n   16      public function isSupported()\n   17      {\n   18:         return function_exists('apache_getenv') && function_exists('apache_setenv');\n   19      }\n   20  \n   21      /**\n   22:      * Get an environment variable, if it exists.\n   23       *\n   24       * This is intentionally not implemented, since this adapter exists only as\n   25:      * a means to overwrite existing apache environment variables.\n   26       *\n   27       * @param string $name\n   ..\n   35  \n   36      /**\n   37:      * Set an environment variable.\n   38       *\n   39       * Only if an existing apache variable exists do we overwrite it.\n   ..\n   46      public function set($name, $value = null)\n   47      {\n   48:         if (apache_getenv($name) !== false) {\n   49:             apache_setenv($name, (string) $value);\n   50          }\n   51      }\n   52  \n   53      /**\n   54:      * Clear an environment variable.\n   55       *\n   56       * @param string $name\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Environment\\Adapter\\ArrayAdapter.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Environment\\Adapter;\n    4  \n    5  use PhpOption\\None;\n    .\n   26  \n   27      /**\n   28:      * Get an environment variable, if it exists.\n   29       *\n   30       * @param string $name\n   ..\n   42  \n   43      /**\n   44:      * Set an environment variable.\n   45       *\n   46       * @param string      $name\n   ..\n   55  \n   56      /**\n   57:      * Clear an environment variable.\n   58       *\n   59       * @param string $name\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Environment\\Adapter\\EnvConstAdapter.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Environment\\Adapter;\n    4  \n    5  use PhpOption\\None;\n    6  use PhpOption\\Some;\n    7  \n    8: class EnvConstAdapter implements AdapterInterface\n    9  {\n   10      /**\n   ..\n   19  \n   20      /**\n   21:      * Get an environment variable, if it exists.\n   22       *\n   23       * @param string $name\n   ..\n   27      public function get($name)\n   28      {\n   29:         if (array_key_exists($name, $_ENV)) {\n   30:             return Some::create($_ENV[$name]);\n   31          }\n   32  \n   ..\n   35  \n   36      /**\n   37:      * Set an environment variable.\n   38       *\n   39       * @param string      $name\n   ..\n   44      public function set($name, $value = null)\n   45      {\n   46:         $_ENV[$name] = $value;\n   47      }\n   48  \n   49      /**\n   50:      * Clear an environment variable.\n   51       *\n   52       * @param string $name\n   ..\n   56      public function clear($name)\n   57      {\n   58:         unset($_ENV[$name]);\n   59      }\n   60  }\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Environment\\Adapter\\PutenvAdapter.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Environment\\Adapter;\n    4  \n    5  use PhpOption\\Option;\n    6  \n    7: class PutenvAdapter implements AdapterInterface\n    8  {\n    9      /**\n   ..\n   14      public function isSupported()\n   15      {\n   16:         return function_exists('putenv');\n   17      }\n   18  \n   19      /**\n   20:      * Get an environment variable, if it exists.\n   21       *\n   22       * @param string $name\n   ..\n   26      public function get($name)\n   27      {\n   28:         return Option::fromValue(getenv($name), false);\n   29      }\n   30  \n   31      /**\n   32:      * Set an environment variable.\n   33       *\n   34       * @param string      $name\n   ..\n   39      public function set($name, $value = null)\n   40      {\n   41:         putenv(\"$name=$value\");\n   42      }\n   43  \n   44      /**\n   45:      * Clear an environment variable.\n   46       *\n   47       * @param string $name\n   ..\n   51      public function clear($name)\n   52      {\n   53:         putenv($name);\n   54      }\n   55  }\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Environment\\Adapter\\ServerConstAdapter.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Environment\\Adapter;\n    4  \n    5  use PhpOption\\None;\n    .\n   19  \n   20      /**\n   21:      * Get an environment variable, if it exists.\n   22       *\n   23       * @param string $name\n   ..\n   35  \n   36      /**\n   37:      * Set an environment variable.\n   38       *\n   39       * @param string      $name\n   ..\n   48  \n   49      /**\n   50:      * Clear an environment variable.\n   51       *\n   52       * @param string $name\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Exception\\ExceptionInterface.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Exception;\n    4  \n    5  /**\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Exception\\InvalidFileException.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Exception;\n    4  \n    5  use InvalidArgumentException;\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Exception\\InvalidPathException.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Exception;\n    4  \n    5  use InvalidArgumentException;\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Exception\\ValidationException.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Exception;\n    4  \n    5  use RuntimeException;\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Regex\\Error.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Regex;\n    4  \n    5  use PhpOption\\None;\n    .\n   30       * @param string $value\n   31       *\n   32:      * @return \\Dotenv\\Regex\\Result\n   33       */\n   34      public static function create($value)\n   ..\n   52       * @param callable $f\n   53       *\n   54:      * @return \\Dotenv\\Regex\\Result\n   55       */\n   56      public function mapSuccess(callable $f)\n   ..\n   74       * @param callable $f\n   75       *\n   76:      * @return \\Dotenv\\Regex\\Result\n   77       */\n   78      public function mapError(callable $f)\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Regex\\Regex.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Regex;\n    4  \n    5  use PhpOption\\Option;\n    .\n   14       * @param string $subject\n   15       *\n   16:      * @return \\Dotenv\\Regex\\Result\n   17       */\n   18      public static function replace($pattern, $replacement, $subject)\n   ..\n   30       * @param string   $subject\n   31       *\n   32:      * @return \\Dotenv\\Regex\\Result\n   33       */\n   34      public static function replaceCallback($pattern, callable $callback, $subject)\n   ..\n   45       * @param string   $subject\n   46       *\n   47:      * @return \\Dotenv\\Regex\\Result\n   48       */\n   49      private static function pregAndWrap(callable $operation, $subject)\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Regex\\Result.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Regex;\n    4  \n    5  abstract class Result\n    .\n   27       * @param callable $f\n   28       *\n   29:      * @return \\Dotenv\\Regex\\Result\n   30       */\n   31      abstract public function mapSuccess(callable $f);\n   ..\n   53       * @param callable $f\n   54       *\n   55:      * @return \\Dotenv\\Regex\\Result\n   56       */\n   57      abstract public function mapError(callable $f);\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Regex\\Success.php:\n    1  <?php\n    2  \n    3: namespace Dotenv\\Regex;\n    4  \n    5  use PhpOption\\None;\n    .\n   30       * @param string $value\n   31       *\n   32:      * @return \\Dotenv\\Regex\\Result\n   33       */\n   34      public static function create($value)\n   ..\n   52       * @param callable $f\n   53       *\n   54:      * @return \\Dotenv\\Regex\\Result\n   55       */\n   56      public function mapSuccess(callable $f)\n   ..\n   74       * @param callable $f\n   75       *\n   76:      * @return \\Dotenv\\Regex\\Result\n   77       */\n   78      public function mapError(callable $f)\n\n551 matches across 98 files\n\n\nSearching 2106 files for \"ENV\" (regex, case sensitive)\n\nC:\\Users\\bmcminn\\github\\starter-api\\app\\bootstrap.php:\n   11  \n   12  \n   13: // DEV LOAD ENVIRONMENT\n   14  // ----------------------------------------------------------------------\n   15  \n   ..\n   22      'DB_DATABASE',\n   23      'DB_HOSTNAME',\n   24:     'ENV',\n   25      // 'DB_PASSWORD',\n   26      // 'DB_USERNAME',\n   ..\n   29  \n   30  \n   31: // DEFINE ENVIRONMENT CONSTANTS\n   32  // ----------------------------------------------------------------------\n   33  \n   34: $IS_DEV = env('ENV') !== 'production';\n   35  \n   36  define('IS_DEV',  $IS_DEV);\n\nC:\\Users\\bmcminn\\github\\starter-api\\app\\helpers.php:\n   41  \n   42  \n   43: //  ENVIRONMENT HELPER FUNCITON(S)\n   44  // ===================================\n   45  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\filp\\whoops\\src\\Whoops\\Handler\\PrettyPageHandler.php:\n   81          '_SESSION' => [],\n   82          '_SERVER' => [],\n   83:         '_ENV' => [],\n   84      ];\n   85  \n   ..\n  171                  // Help users who have been relying on an internal test value\n  172                  // fix their code to the proper method\n  173:                 if (isset($_ENV['whoops-test'])) {\n  174                      throw new \\Exception(\n  175                          'Use handleUnconditionally instead of whoops-test'\n  ...\n  244                  \"Session\"               => isset($_SESSION) ? $this->masked($_SESSION, '_SESSION') :  [],\n  245                  \"Server/Request Data\"   => $this->masked($_SERVER, '_SERVER'),\n  246:                 \"Environment Variables\" => $this->masked($_ENV, '_ENV'),\n  247              ],\n  248          ];\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\src\\Runner\\PhptTestCase.php:\n  134          }\n  135  \n  136:         if (isset($sections['ENV'])) {\n  137:             $env = $this->parseEnvSection($sections['ENV']);\n  138              $this->phpUtil->setEnv($env);\n  139          }\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\src\\Util\\Configuration.php:\n  598              $value = \\getenv($name);\n  599  \n  600:             if (!isset($_ENV[$name])) {\n  601:                 $_ENV[$name] = $value;\n  602              }\n  603  \n  604              if ($force === true) {\n  605:                 $_ENV[$name] = $value;\n  606              }\n  607          }\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\src\\Util\\GlobalState.php:\n   18       */\n   19      private const SUPER_GLOBAL_ARRAYS = [\n   20:         '_ENV',\n   21          '_POST',\n   22          '_GET',\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\src\\Util\\TestResultCache.php:\n   72          }\n   73  \n   74:         $this->cacheFilename = $filepath ?? $_ENV['PHPUNIT_RESULT_CACHE'] ?? self::DEFAULT_RESULT_CACHE_FILENAME;\n   75      }\n   76  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\tests\\end-to-end\\regression\\GitHub\\1216\\bootstrap1216.php:\n    8   * file that was distributed with this source code.\n    9   */\n   10: $_ENV['configAvailableInBootstrap'] = isset($_ENV['loadedFromConfig']);\n   11  \n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\tests\\end-to-end\\regression\\GitHub\\1216\\Issue1216Test.php:\n   14      public function testConfigAvailableInBootstrap(): void\n   15      {\n   16:         $this->assertTrue($_ENV['configAvailableInBootstrap']);\n   17      }\n   18  }\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\tests\\unit\\Framework\\TestCaseTest.php:\n   22      {\n   23          $GLOBALS['a']  = 'a';\n   24:         $_ENV['b']     = 'b';\n   25          $_POST['c']    = 'c';\n   26          $_GET['d']     = 'd';\n   ..\n   36          unset(\n   37              $GLOBALS['a'],\n   38:             $_ENV['b'],\n   39              $_POST['c'],\n   40              $_GET['d'],\n   ..\n  353          $this->assertEquals('a', $a);\n  354          $this->assertEquals('a', $GLOBALS['a']);\n  355:         $this->assertEquals('b', $_ENV['b']);\n  356          $this->assertEquals('c', $_POST['c']);\n  357          $this->assertEquals('d', $_GET['d']);\n  ...\n  365          $GLOBALS['a']   = 'aa';\n  366          $GLOBALS['foo'] = 'bar';\n  367:         $_ENV['b']      = 'bb';\n  368          $_POST['c']     = 'cc';\n  369          $_GET['d']      = 'dd';\n  ...\n  377          $this->assertEquals('aa', $GLOBALS['a']);\n  378          $this->assertEquals('bar', $GLOBALS['foo']);\n  379:         $this->assertEquals('bb', $_ENV['b']);\n  380          $this->assertEquals('cc', $_POST['c']);\n  381          $this->assertEquals('dd', $_GET['d']);\n  ...\n  398          $this->assertEquals('a', $a);\n  399          $this->assertEquals('a', $GLOBALS['a']);\n  400:         $this->assertEquals('b', $_ENV['b']);\n  401          $this->assertEquals('c', $_POST['c']);\n  402          $this->assertEquals('d', $_GET['d']);\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\phpunit\\phpunit\\tests\\unit\\Util\\ConfigurationTest.php:\n  381          $this->assertTrue(\\BAR);\n  382          $this->assertFalse($GLOBALS['foo']);\n  383:         $this->assertTrue((bool) $_ENV['foo']);\n  384          $this->assertEquals(1, \\getenv('foo'));\n  385          $this->assertEquals('bar', $_POST['foo']);\n  ...\n  401      public function testHandlePHPConfigurationDoesNotOverwrittenExistingEnvArrayVariables(): void\n  402      {\n  403:         $_ENV['foo'] = false;\n  404          $this->configuration->handlePHPConfiguration();\n  405  \n  406:         $this->assertFalse($_ENV['foo']);\n  407          $this->assertEquals('forced', \\getenv('foo_force'));\n  408      }\n  ...\n  415      public function testHandlePHPConfigurationDoesForceOverwrittenExistingEnvArrayVariables(): void\n  416      {\n  417:         $_ENV['foo_force'] = false;\n  418          $this->configuration->handlePHPConfiguration();\n  419  \n  420:         $this->assertEquals('forced', $_ENV['foo_force']);\n  421          $this->assertEquals('forced', \\getenv('foo_force'));\n  422      }\n  ...\n  434          $this->configuration->handlePHPConfiguration();\n  435  \n  436:         $this->assertEquals('putenv', $_ENV['foo']);\n  437          $this->assertEquals('putenv', \\getenv('foo'));\n  438  \n  ...\n  454          $this->configuration->handlePHPConfiguration();\n  455  \n  456:         $this->assertEquals('forced', $_ENV['foo_force']);\n  457          $this->assertEquals('forced', \\getenv('foo_force'));\n  458      }\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\sebastian\\global-state\\src\\Snapshot.php:\n  319      {\n  320          $this->superGlobalArrays = [\n  321:             '_ENV',\n  322              '_POST',\n  323              '_GET',\n  ...\n  332                  $this->superGlobalArrays,\n  333                  [\n  334:                     'HTTP_ENV_VARS',\n  335                      'HTTP_POST_VARS',\n  336                      'HTTP_GET_VARS',\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Environment\\AbstractVariables.php:\n   84  \n   85          // Don't overwrite existing environment variables if we're immutable\n   86:         // Ruby's dotenv does this with `ENV[key] ||= value`.\n   87          if ($this->isImmutable() && $this->get($name) !== null && $this->loaded->get($name)->isEmpty()) {\n   88              return;\n\nC:\\Users\\bmcminn\\github\\starter-api\\vendor\\vlucas\\phpdotenv\\src\\Environment\\Adapter\\EnvConstAdapter.php:\n   27      public function get($name)\n   28      {\n   29:         if (array_key_exists($name, $_ENV)) {\n   30:             return Some::create($_ENV[$name]);\n   31          }\n   32  \n   ..\n   44      public function set($name, $value = null)\n   45      {\n   46:         $_ENV[$name] = $value;\n   47      }\n   48  \n   ..\n   56      public function clear($name)\n   57      {\n   58:         unset($_ENV[$name]);\n   59      }\n   60  }\n\n39 matches across 14 files\n",
			"settings":
			{
				"buffer_size": 240986,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": ".env.example",
			"settings":
			{
				"buffer_size": 398,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "public/index.php",
			"settings":
			{
				"buffer_size": 2514,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/settings.php",
			"settings":
			{
				"buffer_size": 550,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 236.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ch",
				"ChangeQuotes"
			],
			[
				"chan",
				"ChangeQuotes"
			],
			[
				"change",
				"ChangeQuotes"
			],
			[
				"json",
				"Pretty JSON: Format and Sort JSON"
			],
			[
				"wrap",
				"Word Wrap: Toggle"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"enable",
				"Package Control: Enable Package"
			],
			[
				"javasc",
				"Set Syntax: JavaScript Next"
			],
			[
				"settings",
				"Preferences: Settings"
			],
			[
				"type",
				"Set Syntax: TypeScript"
			],
			[
				"mark",
				"Set Syntax: Markdown"
			],
			[
				"javas",
				"Set Syntax: JavaScript Next"
			],
			[
				"markdown",
				"Set Syntax: Markdown Extended"
			],
			[
				"trailin",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"trailng",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"delete",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"yal",
				"Set Syntax: YAML"
			],
			[
				"train",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"list",
				"Package Control: List Packages"
			],
			[
				"chang",
				"ChangeQuotes"
			],
			[
				"trailing",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"java",
				"Set Syntax: JavaScript Next"
			],
			[
				"html",
				"Set Syntax: HTML"
			],
			[
				"de",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"markd",
				"Set Syntax: Markdown"
			],
			[
				"beau",
				"HTMLBeautify"
			],
			[
				"typesc",
				"Set Syntax: TypeScript"
			],
			[
				"ini",
				"Set Syntax: INI"
			],
			[
				"php",
				"Set Syntax: PHP"
			],
			[
				"javascr",
				"Set Syntax: JavaScript Next"
			],
			[
				"scheme",
				"UI: Select Color Scheme"
			],
			[
				"setting",
				"Preferences: Settings"
			],
			[
				"dis",
				"Package Control: Disable Package"
			],
			[
				"ena",
				"Package Control: Enable Package"
			],
			[
				"package",
				"Package Control: Disable Package"
			],
			[
				"pretty",
				"HTMLPrettify"
			],
			[
				"css",
				"Set Syntax: CSS"
			],
			[
				"sass",
				"Set Syntax: Sass"
			],
			[
				"setjava",
				"Set Syntax: JavaScript Next"
			],
			[
				"prettify",
				"Pretty JSON: Minify (compress) JSON"
			],
			[
				"javsc",
				"Set Syntax: JavaScript Next"
			],
			[
				"warp",
				"Word Wrap: Toggle"
			],
			[
				"ttr",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"tail",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"trailn",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"CHAN",
				"ChangeQuotes"
			],
			[
				"markdo",
				"Set Syntax: Markdown Extended"
			],
			[
				"xml",
				"Set Syntax: XML"
			],
			[
				"js",
				"Set Syntax: JavaScript Next"
			],
			[
				"scss",
				"Set Syntax: CSS"
			],
			[
				"pre",
				"Pretty JSON: Format and Sort JSON"
			],
			[
				"pret",
				"HTMLPrettify"
			],
			[
				"nginx",
				"Set Syntax: nginx"
			],
			[
				"pvr ",
				"PackageResourceViewer: Open Resource"
			],
			[
				"makr",
				"Set Syntax: Markdown Extended"
			],
			[
				"chanm",
				"GitGutter: Revert Change to Commit"
			],
			[
				"markdow",
				"Set Syntax: Markdown"
			],
			[
				"t",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"sql",
				"Set Syntax: SQL"
			],
			[
				"trial",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"ngin",
				"Set Syntax: nginx"
			],
			[
				"ngi",
				"Set Syntax: nginx"
			],
			[
				"sort",
				"Sort Lines"
			],
			[
				"syn html",
				"Set Syntax: HTML"
			],
			[
				"colorpick",
				"Color Picker"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"disabl",
				"Package Control: Disable Package"
			],
			[
				"dot",
				"Set Syntax: DotENV"
			],
			[
				"chasn",
				"ChangeQuotes"
			],
			[
				"javascript next",
				"Set Syntax: JavaScript Next"
			],
			[
				"jsa",
				"Pretty JSON: Format and Sort JSON"
			],
			[
				"javs",
				"Set Syntax: JavaScript"
			],
			[
				"railing",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"prett",
				"HTMLPrettify"
			],
			[
				"disbl",
				"Package Control: Disable Package"
			],
			[
				"di",
				"Package Control: Disable Package"
			],
			[
				"disbal",
				"Package Control: Disable Package"
			],
			[
				"disab",
				"Package Control: Disable Package"
			],
			[
				"taril",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"prettier",
				"Preferences: JsPrettier Settings - User"
			],
			[
				"stylus",
				"Set Syntax: Stylus"
			],
			[
				"lista",
				"Package Control: List Packages"
			],
			[
				"trail",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"html ",
				"HTMLPrettify"
			],
			[
				"theme",
				"UI: Select Theme"
			],
			[
				"color scheme",
				"UI: Select Color Scheme"
			],
			[
				"yaml",
				"Set Syntax: YAML"
			],
			[
				"line",
				"Line Endings Unify"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"instla",
				"Package Control: Install Package"
			],
			[
				"beatu",
				"HTMLBeautify"
			],
			[
				"bash",
				"Set Syntax: Shell Script (Bash)"
			],
			[
				"batch",
				"Set Syntax: Batch File"
			],
			[
				"pretty ",
				"Pretty JSON: Format and Sort JSON"
			],
			[
				"sidebar",
				"View: Toggle Open Files in Side Bar"
			],
			[
				"tri",
				"Trailing Spaces: Delete Trailing Spaces"
			]
		],
		"width": 540.0
	},
	"console":
	{
		"height": 247.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/bmcminn/github/starter-api",
		"/C/Users/bmcminn/github/starter-api/__test",
		"/C/Users/bmcminn/github/starter-api/app",
		"/C/Users/bmcminn/github/starter-api/public"
	],
	"file_history":
	[
		"/C/Users/bmcminn/github/starter-api/data/init-db.sql",
		"/C/Users/bmcminn/github/starter-api/composer.json",
		"/C/Users/bmcminn/github/starter-api/.env",
		"/C/Users/bmcminn/github/starter-api/public/index.php",
		"/C/Users/bmcminn/github/starter-api/app/helpers.php",
		"/C/Users/bmcminn/github/starter-api/app/bootstrap.php",
		"/C/Users/bmcminn/github/starter-api/data/db-init.sql",
		"/C/Users/bmcminn/github/starter-api/.gitignore",
		"/E/tmdev/Code/amapp/src/environments/environment.staging.ts",
		"/E/tmdev/Code/amapp/src/environments/environment.prod.ts",
		"/C/Users/bmcminn/github/starter-api/__test/test.php",
		"/C/Users/bmcminn/github/starter-api/app/settings.php",
		"/C/Users/bmcminn/github/starter-api/README.md",
		"/E/tmdev/Code/amapp/src/services/new-campaign.service.ts",
		"/E/tmdev/Code/amapp/src/views/new-campaign-step-3/new-campaign-step-3.view.ts",
		"/E/tmdev/Code/amapp/src/views/new-campaign-step-4/new-campaign-step-4.view.ts",
		"/E/tmdev/Code/amapp/src/views/new-campaign-step-2/new-campaign-step-2.view.ts",
		"/E/tmdev/Code/amapp/src/views/new-campaign-step-1/new-campaign-step-1.view.html",
		"/E/tmdev/Code/amapp/src/components/series-preview/series-preview.component.html",
		"/E/tmdev/Code/amapp/src/views/new-campaign-step-2/new-campaign-step-2.view.html",
		"/E/tmdev/Code/amapp/src/views/new-campaign-step-4/new-campaign-step-4.view.html",
		"/E/tmdev/Code/amapp/src/views/new-campaign-success/new-campaign-success.view.html",
		"/E/tmdev/Code/amapp/src/views/campaign-billing/campaign-billing.view.html",
		"/E/tmdev/Code/amapp/src/views/campaign-order-details/campaign-order-details.view.html",
		"/E/tmdev/Code/amapp/src/components/order-progress/order-progress.component.html",
		"/E/tmdev/Code/amapp/src/components/series-grid/series-grid.component.sass",
		"/E/tmdev/Code/amapp/src/views/new-campaign-success/new-campaign-success.view.ts",
		"/E/tmdev/Code/amapp/src/assets/styles/imports/modules/_app-switcher.sass",
		"/E/tmdev/Code/amapp/src/views/campaign-recipients/campaign-recipients.view.html",
		"/E/tmdev/Code/amapp/src/components/app-switcher/app-switcher.component.sass",
		"/E/tmdev/Code/amapp/src/labels/en-us.json.ts",
		"/E/tmdev/Code/amapp/src/components/recipients-table/recipients-table.component.html",
		"/E/tmdev/Code/amapp/src/views/new-campaign-step-3/new-campaign-step-3.view.html",
		"/E/tmdev/Code/amapp/src/views/campaign-success/campaign-success.view.ts",
		"/E/tmdev/Code/amapp/src/services/recipients-table.service.ts",
		"/E/tmdev/Code/amapp/src/components/series-preview/series-preview.component.ts",
		"/E/tmdev/Code/amapp/src/components/series-grid/series-grid.component.html",
		"/E/tmdev/Code/amapp/src/components/series-grid/series-grid.component.ts",
		"/E/tmdev/Code/amapp/src/components/responses-list/responses-list.component.html",
		"/E/tmdev/Code/amapp/src/components/responses-list/responses-list.component.ts",
		"/E/tmdev/Code/amapi/app/Http/Controllers/Campaigns/CampaignDetailsController.php",
		"/E/tmdev/Code/amapp/src/views/dashboard/dashboard.view.ts",
		"/E/tmdev/Code/amapi/app/Http/Controllers/Checkout/CheckoutController.php",
		"/E/tmdev/Code/amapp/src/views/new-campaign-step-1/new-campaign-step-1.view.ts",
		"/E/tmdev/Code/amapp/src/views/campaign-details/campaign-details.view.ts",
		"/E/tmdev/Code/amapp/src/views/campaign-list/campaign-list.view.ts",
		"/E/tmdev/Code/amapp/src/components/billing-table/billing-table.component.ts",
		"/E/tmdev/Code/amapp/src/components/upcoming-mailings/upcoming-mailings.component.ts",
		"/E/tmdev/Code/amapp/src/helpers/datagrid.helper.ts",
		"/E/tmdev/Code/amapp/src/components/billing-table/billing-table.component.html",
		"/E/tmdev/Code/amapp/src/components/upcoming-mailings/upcoming-mailings.component.html",
		"/E/tmdev/Code/amapp/src/views/campaign-recipients/campaign-recipients.view.ts",
		"/E/tmdev/Code/amapi/app/Http/Controllers/QXPController.php",
		"/E/tmdev/Code/amapi/storage/logs/lumen-2019-09-04.log",
		"/E/tmdev/Code/amapp/src/views/campaign-details/campaign-details.view.html",
		"/E/tmdev/Code/amapi/app/Http/Controllers/Campaigns/CampaignCheckoutController.php",
		"/E/tmdev/Code/amapp/src/views/sso2/sso2.view.ts",
		"/E/tmdev/Code/amapp/src/views/sso/sso.view.ts",
		"/E/tmdev/Code/amapp/src/views/login/login.view.ts",
		"/E/tmdev/Code/amapp/src/views/campaign-creation/campaign-creation.view.ts",
		"/E/tmdev/Code/amapp/src/views/campaign-billing/campaign-billing.view.ts",
		"/E/tmdev/Code/amapp/src/services/user.service.ts",
		"/E/tmdev/Code/amapp/src/helpers/string.helper.ts",
		"/E/tmdev/Code/amapp/src/helpers/app.helper.ts",
		"/E/tmdev/Code/amapp/src/components/topnav/topnav.component.ts",
		"/E/tmdev/Code/amapp/src/components/toast/toast.component.ts",
		"/E/tmdev/Code/amapp/src/components/response-detail/response-detail.component.ts",
		"/E/tmdev/Code/amapp/src/components/recipients-table/recipients-table.component.ts",
		"/E/tmdev/Code/amapp/src/components/promocode/promocode.component.ts",
		"/E/tmdev/Code/amapp/src/components/main-nav/main-nav.component.ts",
		"/E/tmdev/Code/amapp/src/components/dash-graph/dash-graph.component.ts",
		"/E/tmdev/Code/amapp/src/components/charts/charts.component.ts",
		"/E/tmdev/Code/amapp/src/components/campaign-nav/campaign-nav.component.ts",
		"/E/tmdev/Code/amapp/src/components/back-to-top/back-to-top.component.ts",
		"/E/tmdev/Code/amapp/src/services/logger.service.ts",
		"/E/tmdev/Code/amapp/src/layouts/app.layout.ts",
		"/E/tmdev/Code/amapp/src/components/order-progress/order-progress.component.ts",
		"/E/tmdev/Code/amapi/storage/logs/lumen-2019-09-03.log",
		"/E/tmdev/Code/amapp/src/helpers/storage.helper.ts",
		"/E/tmdev/Code/amapp/src/labels/labels.ts",
		"/E/tmdev/Code/amapp/src/assets/styles/imports/_reset.sass",
		"/E/tmdev/Code/amapp/src/components/changelog-entry/changelog-entry.component.ts",
		"/E/tmdev/Code/amapp/src/services/campaigns.service.ts",
		"/E/tmdev/Code/amapi/routes/api.php",
		"/E/tmdev/deploy/staging-logs.sh",
		"/E/tmdev/Code/amapp/src/modules/app.module.ts",
		"/E/tmdev/Code/amapp/src/modules/new-campaign.module.ts",
		"/E/tmdev/Code/amapp/src/services/base-api.service.ts",
		"/E/tmdev/Code/amapp/src/views/changelog/changelog.view.html",
		"/E/tmdev/Code/amapp/src/views/campaign-creation/campaign-creation.view.html",
		"/E/tmdev/Code/amapp/src/modules/campaigns.module.ts",
		"/E/tmdev/Code/amapp/src/modules/shared.module.ts",
		"/E/tmdev/Code/amapp/src/components/promocode/promocode.component.html",
		"/E/tmdev/Code/amapp/src/stores/new-campaign.store.ts",
		"/E/tmdev/Code/amapp/src/components/new-notice/new-notice.component.ts",
		"/E/tmdev/Code/amapp/src/components/new-notice/new-notice.component.html",
		"/E/tmdev/Code/amapp/src/environments/environment.ts",
		"/E/tmdev/Code/amapp/package.json",
		"/E/tmdev/Code/amapi/database/migrations/2016_03_08_164317_create_users_table.php",
		"/E/tmdev/Code/amapp/src/views/campaign-success/campaign-success.view.html",
		"/E/tmdev/Code/amapp/src/config/app.config.ts",
		"/E/tmdev/Code/amapp/src/models/orders.model.ts",
		"/E/tmdev/Code/amapp/src/services/qxp.service.ts",
		"/E/tmdev/Code/amapi/app/Http/Controllers/SeriesController.php",
		"/E/tmdev/Code/amapi/app/Http/Controllers/Campaigns/CampaignsController.php",
		"/E/tmdev/Code/amapi/config/api.php",
		"/E/tmdev/Code/amapp/src/components/series-preview/series-preview.component.sass",
		"/E/tmdev/Code/amapp/src/components/back-to-top/back-to-top.component.html",
		"/E/tmdev/Code/amapp/src/views/dashboard/dashboard.view.html",
		"/E/tmdev/Code/amapp/src/index.php",
		"/E/tmdev/Code/amapp/src/config.php",
		"/E/tmdev/Code/amapp/src/components/main-nav/main-nav.component.html",
		"/E/tmdev/Code/amapp/src/helpers/date.helper.ts",
		"/E/tmdev/Code/amapp/__test/dynamic-filters.js",
		"/E/tmdev/Code/amapp/src/models/progress-step.model.ts",
		"/E/tmdev/Code/amapp/src/labels/de.json.ts",
		"/E/tmdev/Code/amapp/src/components/order-progress/order-progress.component.sass",
		"/E/tmdev/Code/amapp/src/views/changelog/changelog.view.ts",
		"/E/tmdev/Code/amapp/src/views/new-client-followup-step-1/new-client-followup-step-1.view.ts",
		"/E/tmdev/Code/amapp/src/views/new-client-followup-step-2/new-client-followup-step-2.view.ts",
		"/E/tmdev/Code/amapp/src/views/new-client-followup-step-3/new-client-followup-step-3.view.ts",
		"/E/tmdev/Code/amapp/src/views/new-client-followup-step-4/new-client-followup-step-4.view.ts",
		"/E/tmdev/Code/amapp/src/views/new-client-followup-success/new-client-followup-success.view.ts",
		"/E/tmdev/Code/amapp/src/views/upcoming-mailings/upcoming-mailings.view.ts",
		"/E/tmdev/Code/amapp/src/helpers/qxp.helper.ts",
		"/E/tmdev/Code/amapp/src/assets/styles/imports/_variables.sass",
		"/E/tmdev/Code/amapp/src/modules/new-client-followup.module.ts",
		"/E/tmdev/Code/amapp/src/models/series.model.ts"
	],
	"find":
	{
		"height": 48.0
	},
	"find_in_files":
	{
		"height": 170.0,
		"where_history":
		[
			"*.php",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"'ENV'",
			"ENV",
			"APP_ENV",
			"temp",
			"=",
			";\n\n\n-",
			"$realpath",
			"realpath",
			"= ",
			"path",
			"realpath",
			"buildPath result",
			"logType",
			"timestamp",
			"}\n\n\nfunction",
			"logName",
			"ERROR",
			"logFilename",
			"$logname",
			"$type",
			"stm",
			"buildPath",
			"                ",
			"mysql",
			"Delight\\",
			"Delight",
			"DATA_DIR",
			"ROOT_DIR",
			"utf8mb4",
			"const ",
			"define",
			"\n\n//",
			"bootstrap"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "app/bootstrap.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1637,
						"regions":
						{
						},
						"selection":
						[
							[
								475,
								475
							]
						],
						"settings":
						{
							"editorconfig": true,
							"ensure_newline_at_eof_on_save": true,
							"git_gutter_is_enabled": true,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": ".env",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 423,
						"regions":
						{
						},
						"selection":
						[
							[
								102,
								109
							]
						],
						"settings":
						{
							"editorconfig": true,
							"ensure_newline_at_eof_on_save": true,
							"git_gutter_is_enabled": true,
							"syntax": "Packages/INI/INI.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 240986,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										208,
										211
									],
									[
										347,
										350
									],
									[
										455,
										458
									],
									[
										469,
										472
									],
									[
										590,
										593
									],
									[
										796,
										799
									],
									[
										979,
										982
									],
									[
										1157,
										1160
									],
									[
										1408,
										1411
									],
									[
										1683,
										1686
									],
									[
										1839,
										1842
									],
									[
										1868,
										1871
									],
									[
										1880,
										1883
									],
									[
										1891,
										1894
									],
									[
										1988,
										1991
									],
									[
										2018,
										2021
									],
									[
										2048,
										2051
									],
									[
										2308,
										2311
									],
									[
										2587,
										2590
									],
									[
										2798,
										2801
									],
									[
										2988,
										2991
									],
									[
										3252,
										3255
									],
									[
										3561,
										3564
									],
									[
										3648,
										3651
									],
									[
										3752,
										3755
									],
									[
										3981,
										3984
									],
									[
										4141,
										4144
									],
									[
										4253,
										4256
									],
									[
										4262,
										4265
									],
									[
										4269,
										4272
									],
									[
										4306,
										4309
									],
									[
										4330,
										4333
									],
									[
										4366,
										4369
									],
									[
										4473,
										4476
									],
									[
										4576,
										4579
									],
									[
										4704,
										4707
									],
									[
										4709,
										4712
									],
									[
										4904,
										4907
									],
									[
										5059,
										5062
									],
									[
										5131,
										5134
									],
									[
										5287,
										5290
									],
									[
										5328,
										5331
									],
									[
										5457,
										5460
									],
									[
										5558,
										5561
									],
									[
										5608,
										5611
									],
									[
										5833,
										5836
									],
									[
										6169,
										6172
									],
									[
										6471,
										6474
									],
									[
										6763,
										6766
									],
									[
										6933,
										6936
									],
									[
										7402,
										7405
									],
									[
										7452,
										7455
									],
									[
										7513,
										7516
									],
									[
										7571,
										7574
									],
									[
										7640,
										7643
									],
									[
										7690,
										7693
									],
									[
										8188,
										8191
									],
									[
										8232,
										8235
									],
									[
										8575,
										8578
									],
									[
										8795,
										8798
									],
									[
										8886,
										8889
									],
									[
										9291,
										9294
									],
									[
										9346,
										9349
									],
									[
										9411,
										9414
									],
									[
										9474,
										9477
									],
									[
										9547,
										9550
									],
									[
										9602,
										9605
									],
									[
										10092,
										10095
									],
									[
										10351,
										10354
									],
									[
										10542,
										10545
									],
									[
										10764,
										10767
									],
									[
										11008,
										11011
									],
									[
										11297,
										11300
									],
									[
										11380,
										11383
									],
									[
										11472,
										11475
									],
									[
										11599,
										11602
									],
									[
										11809,
										11812
									],
									[
										12040,
										12043
									],
									[
										12295,
										12298
									],
									[
										12431,
										12434
									],
									[
										12460,
										12463
									],
									[
										12472,
										12475
									],
									[
										12483,
										12486
									],
									[
										12572,
										12575
									],
									[
										12598,
										12601
									],
									[
										12624,
										12627
									],
									[
										12862,
										12865
									],
									[
										12880,
										12883
									],
									[
										12929,
										12932
									],
									[
										12947,
										12950
									],
									[
										13056,
										13059
									],
									[
										13074,
										13077
									],
									[
										13129,
										13132
									],
									[
										13147,
										13150
									],
									[
										13217,
										13220
									],
									[
										13235,
										13238
									],
									[
										13284,
										13287
									],
									[
										13302,
										13305
									],
									[
										13400,
										13403
									],
									[
										13418,
										13421
									],
									[
										13809,
										13812
									],
									[
										14031,
										14034
									],
									[
										14219,
										14222
									],
									[
										14528,
										14531
									],
									[
										14585,
										14588
									],
									[
										14910,
										14913
									],
									[
										14952,
										14955
									],
									[
										14959,
										14962
									],
									[
										15250,
										15253
									],
									[
										15527,
										15530
									],
									[
										15761,
										15764
									],
									[
										16222,
										16225
									],
									[
										16674,
										16677
									],
									[
										16980,
										16983
									],
									[
										17289,
										17292
									],
									[
										17549,
										17552
									],
									[
										17595,
										17598
									],
									[
										17756,
										17759
									],
									[
										17850,
										17853
									],
									[
										17940,
										17943
									],
									[
										18090,
										18093
									],
									[
										18361,
										18364
									],
									[
										18773,
										18776
									],
									[
										19122,
										19125
									],
									[
										19382,
										19385
									],
									[
										19715,
										19718
									],
									[
										19786,
										19789
									],
									[
										19885,
										19888
									],
									[
										19997,
										20000
									],
									[
										20223,
										20226
									],
									[
										20336,
										20339
									],
									[
										20684,
										20687
									],
									[
										21102,
										21105
									],
									[
										21542,
										21545
									],
									[
										21832,
										21835
									],
									[
										21937,
										21940
									],
									[
										22050,
										22053
									],
									[
										22263,
										22266
									],
									[
										22374,
										22377
									],
									[
										22456,
										22459
									],
									[
										22600,
										22603
									],
									[
										22911,
										22914
									],
									[
										22938,
										22941
									],
									[
										23553,
										23556
									],
									[
										23628,
										23631
									],
									[
										23676,
										23679
									],
									[
										24024,
										24027
									],
									[
										24150,
										24153
									],
									[
										24332,
										24335
									],
									[
										24430,
										24433
									],
									[
										24736,
										24739
									],
									[
										25058,
										25061
									],
									[
										25259,
										25262
									],
									[
										25320,
										25323
									],
									[
										25415,
										25418
									],
									[
										25514,
										25517
									],
									[
										25586,
										25589
									],
									[
										25636,
										25639
									],
									[
										25853,
										25856
									],
									[
										26142,
										26145
									],
									[
										26514,
										26517
									],
									[
										26880,
										26883
									],
									[
										27066,
										27069
									],
									[
										27363,
										27366
									],
									[
										27435,
										27438
									],
									[
										27567,
										27570
									],
									[
										27702,
										27705
									],
									[
										27827,
										27830
									],
									[
										27916,
										27919
									],
									[
										28108,
										28111
									],
									[
										28286,
										28289
									],
									[
										28364,
										28367
									],
									[
										28481,
										28484
									],
									[
										28729,
										28732
									],
									[
										28894,
										28897
									],
									[
										29089,
										29092
									],
									[
										29261,
										29264
									],
									[
										29533,
										29536
									],
									[
										29658,
										29661
									],
									[
										29797,
										29800
									],
									[
										30030,
										30033
									],
									[
										30167,
										30170
									],
									[
										30246,
										30249
									],
									[
										30525,
										30528
									],
									[
										30851,
										30854
									],
									[
										31106,
										31109
									],
									[
										31173,
										31176
									],
									[
										31230,
										31233
									],
									[
										31256,
										31259
									],
									[
										31362,
										31365
									],
									[
										31731,
										31734
									],
									[
										32172,
										32175
									],
									[
										32381,
										32384
									],
									[
										32585,
										32588
									],
									[
										32661,
										32664
									],
									[
										32810,
										32813
									],
									[
										33090,
										33093
									],
									[
										33447,
										33450
									],
									[
										33732,
										33735
									],
									[
										41146,
										41149
									],
									[
										41728,
										41731
									],
									[
										85022,
										85025
									],
									[
										85324,
										85327
									],
									[
										85495,
										85498
									],
									[
										85815,
										85818
									],
									[
										86073,
										86076
									],
									[
										86209,
										86212
									],
									[
										86227,
										86230
									],
									[
										86314,
										86317
									],
									[
										86332,
										86335
									],
									[
										86477,
										86480
									],
									[
										86537,
										86540
									],
									[
										86836,
										86839
									],
									[
										86897,
										86900
									],
									[
										86980,
										86983
									],
									[
										87055,
										87058
									],
									[
										87343,
										87346
									],
									[
										87546,
										87549
									],
									[
										87905,
										87908
									],
									[
										88333,
										88336
									],
									[
										88363,
										88366
									],
									[
										88381,
										88384
									],
									[
										88403,
										88406
									],
									[
										88449,
										88452
									],
									[
										88454,
										88457
									],
									[
										88545,
										88548
									],
									[
										88609,
										88612
									],
									[
										88786,
										88789
									],
									[
										88875,
										88878
									],
									[
										89100,
										89103
									],
									[
										89413,
										89416
									],
									[
										89693,
										89696
									],
									[
										89909,
										89912
									],
									[
										90158,
										90161
									],
									[
										90384,
										90387
									],
									[
										90551,
										90554
									],
									[
										90823,
										90826
									],
									[
										90992,
										90995
									],
									[
										91043,
										91046
									],
									[
										91129,
										91132
									],
									[
										91181,
										91184
									],
									[
										91221,
										91224
									],
									[
										91338,
										91341
									],
									[
										91564,
										91567
									],
									[
										91785,
										91788
									],
									[
										92014,
										92017
									],
									[
										92312,
										92315
									],
									[
										92436,
										92439
									],
									[
										92530,
										92533
									],
									[
										92642,
										92645
									],
									[
										92691,
										92694
									],
									[
										92702,
										92705
									],
									[
										92748,
										92751
									],
									[
										92755,
										92758
									],
									[
										92831,
										92834
									],
									[
										92930,
										92933
									],
									[
										92985,
										92988
									],
									[
										93106,
										93109
									],
									[
										93295,
										93298
									],
									[
										93587,
										93590
									],
									[
										93633,
										93636
									],
									[
										93660,
										93663
									],
									[
										93708,
										93711
									],
									[
										93722,
										93725
									],
									[
										93756,
										93759
									],
									[
										93776,
										93779
									],
									[
										93788,
										93791
									],
									[
										93831,
										93834
									],
									[
										93839,
										93842
									],
									[
										93850,
										93853
									],
									[
										93898,
										93901
									],
									[
										93943,
										93946
									],
									[
										93948,
										93951
									],
									[
										94082,
										94085
									],
									[
										94393,
										94396
									],
									[
										94669,
										94672
									],
									[
										94715,
										94718
									],
									[
										94782,
										94785
									],
									[
										95119,
										95122
									],
									[
										95161,
										95164
									],
									[
										95224,
										95227
									],
									[
										95495,
										95498
									],
									[
										95516,
										95519
									],
									[
										95616,
										95619
									],
									[
										95839,
										95842
									],
									[
										95883,
										95886
									],
									[
										96150,
										96153
									],
									[
										96382,
										96385
									],
									[
										96624,
										96627
									],
									[
										96801,
										96804
									],
									[
										97023,
										97026
									],
									[
										97243,
										97246
									],
									[
										97509,
										97512
									],
									[
										97778,
										97781
									],
									[
										98179,
										98182
									],
									[
										98597,
										98600
									],
									[
										98652,
										98655
									],
									[
										98956,
										98959
									],
									[
										99012,
										99015
									],
									[
										99139,
										99142
									],
									[
										99201,
										99204
									],
									[
										99419,
										99422
									],
									[
										99475,
										99478
									],
									[
										99619,
										99622
									],
									[
										99687,
										99690
									],
									[
										99908,
										99911
									],
									[
										99965,
										99968
									],
									[
										100004,
										100007
									],
									[
										100016,
										100019
									],
									[
										100133,
										100136
									],
									[
										100141,
										100144
									],
									[
										100193,
										100196
									],
									[
										100203,
										100206
									],
									[
										100290,
										100293
									],
									[
										100330,
										100333
									],
									[
										100389,
										100392
									],
									[
										100621,
										100624
									],
									[
										100675,
										100678
									],
									[
										100693,
										100696
									],
									[
										100818,
										100821
									],
									[
										100886,
										100889
									],
									[
										101086,
										101089
									],
									[
										101163,
										101166
									],
									[
										101269,
										101272
									],
									[
										101521,
										101524
									],
									[
										101726,
										101729
									],
									[
										102124,
										102127
									],
									[
										102189,
										102192
									],
									[
										102438,
										102441
									],
									[
										102773,
										102776
									],
									[
										103089,
										103092
									],
									[
										103389,
										103392
									],
									[
										103580,
										103583
									],
									[
										103776,
										103779
									],
									[
										103991,
										103994
									],
									[
										104060,
										104063
									],
									[
										104298,
										104301
									],
									[
										104512,
										104515
									],
									[
										104764,
										104767
									],
									[
										104941,
										104944
									],
									[
										105136,
										105139
									],
									[
										105328,
										105331
									],
									[
										105526,
										105529
									],
									[
										105725,
										105728
									],
									[
										105905,
										105908
									],
									[
										106137,
										106140
									],
									[
										106397,
										106400
									],
									[
										106480,
										106483
									],
									[
										106520,
										106523
									],
									[
										106615,
										106618
									],
									[
										106783,
										106786
									],
									[
										106974,
										106977
									],
									[
										107209,
										107212
									],
									[
										107286,
										107289
									],
									[
										107489,
										107492
									],
									[
										107561,
										107564
									],
									[
										107784,
										107787
									],
									[
										108017,
										108020
									],
									[
										108209,
										108212
									],
									[
										108399,
										108402
									],
									[
										108552,
										108555
									],
									[
										108854,
										108857
									],
									[
										108908,
										108911
									],
									[
										108968,
										108971
									],
									[
										109153,
										109156
									],
									[
										109387,
										109390
									],
									[
										109577,
										109580
									],
									[
										109805,
										109808
									],
									[
										109995,
										109998
									],
									[
										110064,
										110067
									],
									[
										110285,
										110288
									],
									[
										110568,
										110571
									],
									[
										110758,
										110761
									],
									[
										110874,
										110877
									],
									[
										111015,
										111018
									],
									[
										111265,
										111268
									],
									[
										111455,
										111458
									],
									[
										111571,
										111574
									],
									[
										111728,
										111731
									],
									[
										111973,
										111976
									],
									[
										112163,
										112166
									],
									[
										112279,
										112282
									],
									[
										112420,
										112423
									],
									[
										112475,
										112478
									],
									[
										112567,
										112570
									],
									[
										112756,
										112759
									],
									[
										112956,
										112959
									],
									[
										113126,
										113129
									],
									[
										113296,
										113299
									],
									[
										113470,
										113473
									],
									[
										113621,
										113624
									],
									[
										113773,
										113776
									],
									[
										113928,
										113931
									],
									[
										114094,
										114097
									],
									[
										114259,
										114262
									],
									[
										114435,
										114438
									],
									[
										114594,
										114597
									],
									[
										114768,
										114771
									],
									[
										114992,
										114995
									],
									[
										115201,
										115204
									],
									[
										115507,
										115510
									],
									[
										115813,
										115816
									],
									[
										115987,
										115990
									],
									[
										116199,
										116202
									],
									[
										116453,
										116456
									],
									[
										116678,
										116681
									],
									[
										116902,
										116905
									],
									[
										116988,
										116991
									],
									[
										117361,
										117364
									],
									[
										117702,
										117705
									],
									[
										118069,
										118072
									],
									[
										118240,
										118243
									],
									[
										118497,
										118500
									],
									[
										118721,
										118724
									],
									[
										119033,
										119036
									],
									[
										119285,
										119288
									],
									[
										119344,
										119347
									],
									[
										119650,
										119653
									],
									[
										119684,
										119687
									],
									[
										119723,
										119726
									],
									[
										120047,
										120050
									],
									[
										120370,
										120373
									],
									[
										120769,
										120772
									],
									[
										121100,
										121103
									],
									[
										121468,
										121471
									],
									[
										121604,
										121607
									],
									[
										121989,
										121992
									],
									[
										122243,
										122246
									],
									[
										122335,
										122338
									],
									[
										122615,
										122618
									],
									[
										122826,
										122829
									],
									[
										123183,
										123186
									],
									[
										123483,
										123486
									],
									[
										123575,
										123578
									],
									[
										123863,
										123866
									],
									[
										124263,
										124266
									],
									[
										124566,
										124569
									],
									[
										124927,
										124930
									],
									[
										125138,
										125141
									],
									[
										125536,
										125539
									],
									[
										125944,
										125947
									],
									[
										126233,
										126236
									],
									[
										126368,
										126371
									],
									[
										126700,
										126703
									],
									[
										126792,
										126795
									],
									[
										126982,
										126985
									],
									[
										127210,
										127213
									],
									[
										127249,
										127252
									],
									[
										127278,
										127281
									],
									[
										127290,
										127293
									],
									[
										127301,
										127304
									],
									[
										127363,
										127366
									],
									[
										127373,
										127376
									],
									[
										127380,
										127383
									],
									[
										127539,
										127542
									],
									[
										127703,
										127706
									],
									[
										127730,
										127733
									],
									[
										127734,
										127737
									],
									[
										127749,
										127752
									],
									[
										127775,
										127778
									],
									[
										127779,
										127782
									],
									[
										127823,
										127826
									],
									[
										127903,
										127906
									],
									[
										127967,
										127970
									],
									[
										128026,
										128029
									],
									[
										128076,
										128079
									],
									[
										128176,
										128179
									],
									[
										128285,
										128288
									],
									[
										128338,
										128341
									],
									[
										128457,
										128460
									],
									[
										128649,
										128652
									],
									[
										128653,
										128656
									],
									[
										128688,
										128691
									],
									[
										128739,
										128742
									],
									[
										128746,
										128749
									],
									[
										128846,
										128849
									],
									[
										128980,
										128983
									],
									[
										129007,
										129010
									],
									[
										129028,
										129031
									],
									[
										129132,
										129135
									],
									[
										129209,
										129212
									],
									[
										129248,
										129251
									],
									[
										129386,
										129389
									],
									[
										129501,
										129504
									],
									[
										129639,
										129642
									],
									[
										129716,
										129719
									],
									[
										129755,
										129758
									],
									[
										129927,
										129930
									],
									[
										129966,
										129969
									],
									[
										130150,
										130153
									],
									[
										130321,
										130324
									],
									[
										130458,
										130461
									],
									[
										130501,
										130504
									],
									[
										130602,
										130605
									],
									[
										130682,
										130685
									],
									[
										130849,
										130852
									],
									[
										130949,
										130952
									],
									[
										131175,
										131178
									],
									[
										131202,
										131205
									],
									[
										131206,
										131209
									],
									[
										131250,
										131253
									],
									[
										131300,
										131303
									],
									[
										131401,
										131404
									],
									[
										131468,
										131471
									],
									[
										131472,
										131475
									],
									[
										131538,
										131541
									],
									[
										131591,
										131594
									],
									[
										131660,
										131663
									],
									[
										131664,
										131667
									],
									[
										131732,
										131735
									],
									[
										131795,
										131798
									],
									[
										131838,
										131841
									],
									[
										132005,
										132008
									],
									[
										132009,
										132012
									],
									[
										132039,
										132042
									],
									[
										132250,
										132253
									],
									[
										132363,
										132366
									],
									[
										132377,
										132380
									],
									[
										132551,
										132554
									],
									[
										132605,
										132608
									],
									[
										132663,
										132666
									],
									[
										132774,
										132777
									],
									[
										132842,
										132845
									],
									[
										132881,
										132884
									],
									[
										133054,
										133057
									],
									[
										133231,
										133234
									],
									[
										133434,
										133437
									],
									[
										133617,
										133620
									],
									[
										133761,
										133764
									],
									[
										133920,
										133923
									],
									[
										134045,
										134048
									],
									[
										134307,
										134310
									],
									[
										134502,
										134505
									],
									[
										134758,
										134761
									],
									[
										134958,
										134961
									],
									[
										135143,
										135146
									],
									[
										135212,
										135215
									],
									[
										135295,
										135298
									],
									[
										135448,
										135451
									],
									[
										135572,
										135575
									],
									[
										135665,
										135668
									],
									[
										135842,
										135845
									],
									[
										135904,
										135907
									],
									[
										135998,
										136001
									],
									[
										136117,
										136120
									],
									[
										136319,
										136322
									],
									[
										136346,
										136349
									],
									[
										136469,
										136472
									],
									[
										136608,
										136611
									],
									[
										136765,
										136768
									],
									[
										136922,
										136925
									],
									[
										137079,
										137082
									],
									[
										137201,
										137204
									],
									[
										137373,
										137376
									],
									[
										137601,
										137604
									],
									[
										137628,
										137631
									],
									[
										137760,
										137763
									],
									[
										137908,
										137911
									],
									[
										138013,
										138016
									],
									[
										138188,
										138191
									],
									[
										138262,
										138265
									],
									[
										138440,
										138443
									],
									[
										138514,
										138517
									],
									[
										138692,
										138695
									],
									[
										138766,
										138769
									],
									[
										138919,
										138922
									],
									[
										138993,
										138996
									],
									[
										139164,
										139167
									],
									[
										139238,
										139241
									],
									[
										139494,
										139497
									],
									[
										139777,
										139780
									],
									[
										140035,
										140038
									],
									[
										140039,
										140042
									],
									[
										140074,
										140077
									],
									[
										140078,
										140081
									],
									[
										140246,
										140249
									],
									[
										140250,
										140253
									],
									[
										140376,
										140379
									],
									[
										140509,
										140512
									],
									[
										140629,
										140632
									],
									[
										140749,
										140752
									],
									[
										140898,
										140901
									],
									[
										140967,
										140970
									],
									[
										140987,
										140990
									],
									[
										141198,
										141201
									],
									[
										141325,
										141328
									],
									[
										141447,
										141450
									],
									[
										141577,
										141580
									],
									[
										141701,
										141704
									],
									[
										141925,
										141928
									],
									[
										141929,
										141932
									],
									[
										141964,
										141967
									],
									[
										141968,
										141971
									],
									[
										142020,
										142023
									],
									[
										142024,
										142027
									],
									[
										142073,
										142076
									],
									[
										142077,
										142080
									],
									[
										142097,
										142100
									],
									[
										142128,
										142131
									],
									[
										142132,
										142135
									],
									[
										142155,
										142158
									],
									[
										142181,
										142184
									],
									[
										142185,
										142188
									],
									[
										142288,
										142291
									],
									[
										142346,
										142349
									],
									[
										142488,
										142491
									],
									[
										142492,
										142495
									],
									[
										142631,
										142634
									],
									[
										142635,
										142638
									],
									[
										142793,
										142796
									],
									[
										142797,
										142800
									],
									[
										143067,
										143070
									],
									[
										143119,
										143122
									],
									[
										143320,
										143323
									],
									[
										143392,
										143395
									],
									[
										143396,
										143399
									],
									[
										143520,
										143523
									],
									[
										143632,
										143635
									],
									[
										143704,
										143707
									],
									[
										143708,
										143711
									],
									[
										143841,
										143844
									],
									[
										144039,
										144042
									],
									[
										144043,
										144046
									],
									[
										144119,
										144122
									],
									[
										144179,
										144182
									],
									[
										144321,
										144324
									],
									[
										144325,
										144328
									],
									[
										144464,
										144467
									],
									[
										144468,
										144471
									],
									[
										144539,
										144542
									],
									[
										144543,
										144546
									],
									[
										144735,
										144738
									],
									[
										144885,
										144888
									],
									[
										145012,
										145015
									],
									[
										145222,
										145225
									],
									[
										145226,
										145229
									],
									[
										145273,
										145276
									],
									[
										145463,
										145466
									],
									[
										145535,
										145538
									],
									[
										145539,
										145542
									],
									[
										145683,
										145686
									],
									[
										145755,
										145758
									],
									[
										145759,
										145762
									],
									[
										145993,
										145996
									],
									[
										145997,
										146000
									],
									[
										146076,
										146079
									],
									[
										146231,
										146234
									],
									[
										146355,
										146358
									],
									[
										146492,
										146495
									],
									[
										146612,
										146615
									],
									[
										146739,
										146742
									],
									[
										146957,
										146960
									],
									[
										146961,
										146964
									],
									[
										147074,
										147077
									],
									[
										147208,
										147211
									],
									[
										147335,
										147338
									],
									[
										147550,
										147553
									],
									[
										147554,
										147557
									],
									[
										147719,
										147722
									],
									[
										147755,
										147758
									],
									[
										147819,
										147822
									],
									[
										148007,
										148010
									],
									[
										148128,
										148131
									],
									[
										148342,
										148345
									],
									[
										148395,
										148398
									],
									[
										148500,
										148503
									],
									[
										148714,
										148717
									],
									[
										148718,
										148721
									],
									[
										148824,
										148827
									],
									[
										148958,
										148961
									],
									[
										149085,
										149088
									],
									[
										149302,
										149305
									],
									[
										149306,
										149309
									],
									[
										149410,
										149413
									],
									[
										149528,
										149531
									],
									[
										149714,
										149717
									],
									[
										149763,
										149766
									],
									[
										149851,
										149854
									],
									[
										150015,
										150018
									],
									[
										150095,
										150098
									],
									[
										150247,
										150250
									],
									[
										150427,
										150430
									],
									[
										150431,
										150434
									],
									[
										150513,
										150516
									],
									[
										150678,
										150681
									],
									[
										150742,
										150745
									],
									[
										150926,
										150929
									],
									[
										151003,
										151006
									],
									[
										151168,
										151171
									],
									[
										151248,
										151251
									],
									[
										151395,
										151398
									],
									[
										151579,
										151582
									],
									[
										151583,
										151586
									],
									[
										151689,
										151692
									],
									[
										151823,
										151826
									],
									[
										151950,
										151953
									],
									[
										152160,
										152163
									],
									[
										152336,
										152339
									],
									[
										152538,
										152541
									],
									[
										152739,
										152742
									],
									[
										152914,
										152917
									],
									[
										153041,
										153044
									],
									[
										153201,
										153204
									],
									[
										153363,
										153366
									],
									[
										153567,
										153570
									],
									[
										153698,
										153701
									],
									[
										153891,
										153894
									],
									[
										154098,
										154101
									],
									[
										154332,
										154335
									],
									[
										154459,
										154462
									],
									[
										154631,
										154634
									],
									[
										154847,
										154850
									],
									[
										154974,
										154977
									],
									[
										155134,
										155137
									],
									[
										155296,
										155299
									],
									[
										155539,
										155542
									],
									[
										155651,
										155654
									],
									[
										155660,
										155663
									],
									[
										155667,
										155670
									],
									[
										155704,
										155707
									],
									[
										155728,
										155731
									],
									[
										155764,
										155767
									],
									[
										155871,
										155874
									],
									[
										155974,
										155977
									],
									[
										156102,
										156105
									],
									[
										156107,
										156110
									],
									[
										156302,
										156305
									],
									[
										156457,
										156460
									],
									[
										156529,
										156532
									],
									[
										156685,
										156688
									],
									[
										156726,
										156729
									],
									[
										156855,
										156858
									],
									[
										156956,
										156959
									],
									[
										157006,
										157009
									],
									[
										157231,
										157234
									],
									[
										157744,
										157747
									],
									[
										157794,
										157797
									],
									[
										157855,
										157858
									],
									[
										157913,
										157916
									],
									[
										157982,
										157985
									],
									[
										158032,
										158035
									],
									[
										158530,
										158533
									],
									[
										158574,
										158577
									],
									[
										158917,
										158920
									],
									[
										159137,
										159140
									],
									[
										159228,
										159231
									],
									[
										159633,
										159636
									],
									[
										159688,
										159691
									],
									[
										159753,
										159756
									],
									[
										159816,
										159819
									],
									[
										159889,
										159892
									],
									[
										159944,
										159947
									],
									[
										160393,
										160396
									],
									[
										160615,
										160618
									],
									[
										160803,
										160806
									],
									[
										161112,
										161115
									],
									[
										161169,
										161172
									],
									[
										161494,
										161497
									],
									[
										161536,
										161539
									],
									[
										161543,
										161546
									],
									[
										161834,
										161837
									],
									[
										162111,
										162114
									],
									[
										162345,
										162348
									],
									[
										162709,
										162712
									],
									[
										162803,
										162806
									],
									[
										162893,
										162896
									],
									[
										163043,
										163046
									],
									[
										163314,
										163317
									],
									[
										163726,
										163729
									],
									[
										164075,
										164078
									],
									[
										164335,
										164338
									],
									[
										164683,
										164686
									],
									[
										165090,
										165093
									],
									[
										165216,
										165219
									],
									[
										165398,
										165401
									],
									[
										165496,
										165499
									],
									[
										165802,
										165805
									],
									[
										166124,
										166127
									],
									[
										166325,
										166328
									],
									[
										166386,
										166389
									],
									[
										166481,
										166484
									],
									[
										166580,
										166583
									],
									[
										166652,
										166655
									],
									[
										166702,
										166705
									],
									[
										166919,
										166922
									],
									[
										167208,
										167211
									],
									[
										167580,
										167583
									],
									[
										167946,
										167949
									],
									[
										168132,
										168135
									],
									[
										168429,
										168432
									],
									[
										168501,
										168504
									],
									[
										168633,
										168636
									],
									[
										168768,
										168771
									],
									[
										168893,
										168896
									],
									[
										168982,
										168985
									],
									[
										169174,
										169177
									],
									[
										169352,
										169355
									],
									[
										169430,
										169433
									],
									[
										169547,
										169550
									],
									[
										169795,
										169798
									],
									[
										169960,
										169963
									],
									[
										170155,
										170158
									],
									[
										170327,
										170330
									],
									[
										170599,
										170602
									],
									[
										170724,
										170727
									],
									[
										170863,
										170866
									],
									[
										171096,
										171099
									],
									[
										171233,
										171236
									],
									[
										171312,
										171315
									],
									[
										171591,
										171594
									],
									[
										171917,
										171920
									],
									[
										172172,
										172175
									],
									[
										172239,
										172242
									],
									[
										172296,
										172299
									],
									[
										172322,
										172325
									],
									[
										172428,
										172431
									],
									[
										172777,
										172780
									],
									[
										173099,
										173102
									],
									[
										173384,
										173387
									],
									[
										173628,
										173631
									],
									[
										173930,
										173933
									],
									[
										174135,
										174138
									],
									[
										174165,
										174168
									],
									[
										174183,
										174186
									],
									[
										174205,
										174208
									],
									[
										174251,
										174254
									],
									[
										174256,
										174259
									],
									[
										174347,
										174350
									],
									[
										174411,
										174414
									],
									[
										174588,
										174591
									],
									[
										174677,
										174680
									],
									[
										174902,
										174905
									],
									[
										175215,
										175218
									],
									[
										175495,
										175498
									],
									[
										175711,
										175714
									],
									[
										175960,
										175963
									],
									[
										176186,
										176189
									],
									[
										176353,
										176356
									],
									[
										176625,
										176628
									],
									[
										176794,
										176797
									],
									[
										176845,
										176848
									],
									[
										176931,
										176934
									],
									[
										176983,
										176986
									],
									[
										177023,
										177026
									],
									[
										177140,
										177143
									],
									[
										177366,
										177369
									],
									[
										177587,
										177590
									],
									[
										177816,
										177819
									],
									[
										178114,
										178117
									],
									[
										178238,
										178241
									],
									[
										178332,
										178335
									],
									[
										178444,
										178447
									],
									[
										178493,
										178496
									],
									[
										178504,
										178507
									],
									[
										178550,
										178553
									],
									[
										178557,
										178560
									],
									[
										178633,
										178636
									],
									[
										178732,
										178735
									],
									[
										178787,
										178790
									],
									[
										178908,
										178911
									],
									[
										179097,
										179100
									],
									[
										179389,
										179392
									],
									[
										179435,
										179438
									],
									[
										179462,
										179465
									],
									[
										179510,
										179513
									],
									[
										179524,
										179527
									],
									[
										179558,
										179561
									],
									[
										179578,
										179581
									],
									[
										179590,
										179593
									],
									[
										179633,
										179636
									],
									[
										179641,
										179644
									],
									[
										179652,
										179655
									],
									[
										179700,
										179703
									],
									[
										179745,
										179748
									],
									[
										179750,
										179753
									],
									[
										179884,
										179887
									],
									[
										180195,
										180198
									],
									[
										180466,
										180469
									],
									[
										180510,
										180513
									],
									[
										180777,
										180780
									],
									[
										181001,
										181004
									],
									[
										181178,
										181181
									],
									[
										181400,
										181403
									],
									[
										181620,
										181623
									],
									[
										181886,
										181889
									],
									[
										182155,
										182158
									],
									[
										182556,
										182559
									],
									[
										182974,
										182977
									],
									[
										183029,
										183032
									],
									[
										183333,
										183336
									],
									[
										183389,
										183392
									],
									[
										183516,
										183519
									],
									[
										183578,
										183581
									],
									[
										183796,
										183799
									],
									[
										183852,
										183855
									],
									[
										183996,
										183999
									],
									[
										184064,
										184067
									],
									[
										184285,
										184288
									],
									[
										184342,
										184345
									],
									[
										184381,
										184384
									],
									[
										184393,
										184396
									],
									[
										184510,
										184513
									],
									[
										184518,
										184521
									],
									[
										184570,
										184573
									],
									[
										184580,
										184583
									],
									[
										184667,
										184670
									],
									[
										184707,
										184710
									],
									[
										184766,
										184769
									],
									[
										184998,
										185001
									],
									[
										185052,
										185055
									],
									[
										185070,
										185073
									],
									[
										185195,
										185198
									],
									[
										185263,
										185266
									],
									[
										185463,
										185466
									],
									[
										185540,
										185543
									],
									[
										185646,
										185649
									],
									[
										185898,
										185901
									],
									[
										186103,
										186106
									],
									[
										186501,
										186504
									],
									[
										186566,
										186569
									],
									[
										186815,
										186818
									],
									[
										187211,
										187214
									],
									[
										187401,
										187404
									],
									[
										187554,
										187557
									],
									[
										187856,
										187859
									],
									[
										187910,
										187913
									],
									[
										187970,
										187973
									],
									[
										188155,
										188158
									],
									[
										188389,
										188392
									],
									[
										188579,
										188582
									],
									[
										188807,
										188810
									],
									[
										188997,
										189000
									],
									[
										189066,
										189069
									],
									[
										189287,
										189290
									],
									[
										189570,
										189573
									],
									[
										189760,
										189763
									],
									[
										189876,
										189879
									],
									[
										190017,
										190020
									],
									[
										190267,
										190270
									],
									[
										190457,
										190460
									],
									[
										190573,
										190576
									],
									[
										190730,
										190733
									],
									[
										190975,
										190978
									],
									[
										191165,
										191168
									],
									[
										191281,
										191284
									],
									[
										191422,
										191425
									],
									[
										191477,
										191480
									],
									[
										191569,
										191572
									],
									[
										191758,
										191761
									],
									[
										191958,
										191961
									],
									[
										192128,
										192131
									],
									[
										192298,
										192301
									],
									[
										192472,
										192475
									],
									[
										192623,
										192626
									],
									[
										192775,
										192778
									],
									[
										192930,
										192933
									],
									[
										193096,
										193099
									],
									[
										193261,
										193264
									],
									[
										193437,
										193440
									],
									[
										193596,
										193599
									],
									[
										193770,
										193773
									],
									[
										193994,
										193997
									],
									[
										194203,
										194206
									],
									[
										194409,
										194412
									],
									[
										194583,
										194586
									],
									[
										194795,
										194798
									],
									[
										195049,
										195052
									],
									[
										195274,
										195277
									],
									[
										195498,
										195501
									],
									[
										195584,
										195587
									],
									[
										195957,
										195960
									],
									[
										196298,
										196301
									],
									[
										196665,
										196668
									],
									[
										196836,
										196839
									],
									[
										197093,
										197096
									],
									[
										197317,
										197320
									],
									[
										197629,
										197632
									],
									[
										197948,
										197951
									],
									[
										197982,
										197985
									],
									[
										198021,
										198024
									],
									[
										198345,
										198348
									],
									[
										198668,
										198671
									],
									[
										199067,
										199070
									],
									[
										199398,
										199401
									],
									[
										199766,
										199769
									],
									[
										199902,
										199905
									],
									[
										200287,
										200290
									],
									[
										200541,
										200544
									],
									[
										200633,
										200636
									],
									[
										200913,
										200916
									],
									[
										201124,
										201127
									],
									[
										201481,
										201484
									],
									[
										201781,
										201784
									],
									[
										201873,
										201876
									],
									[
										202161,
										202164
									],
									[
										202561,
										202564
									],
									[
										202864,
										202867
									],
									[
										203225,
										203228
									],
									[
										203436,
										203439
									],
									[
										203834,
										203837
									],
									[
										204242,
										204245
									],
									[
										204531,
										204534
									],
									[
										204666,
										204669
									],
									[
										204998,
										205001
									],
									[
										205090,
										205093
									],
									[
										205280,
										205283
									],
									[
										205508,
										205511
									],
									[
										205535,
										205538
									],
									[
										205539,
										205542
									],
									[
										205554,
										205557
									],
									[
										205580,
										205583
									],
									[
										205584,
										205587
									],
									[
										205628,
										205631
									],
									[
										205708,
										205711
									],
									[
										205772,
										205775
									],
									[
										205831,
										205834
									],
									[
										205881,
										205884
									],
									[
										205981,
										205984
									],
									[
										206090,
										206093
									],
									[
										206143,
										206146
									],
									[
										206262,
										206265
									],
									[
										206454,
										206457
									],
									[
										206458,
										206461
									],
									[
										206493,
										206496
									],
									[
										206544,
										206547
									],
									[
										206551,
										206554
									],
									[
										206651,
										206654
									],
									[
										206785,
										206788
									],
									[
										206812,
										206815
									],
									[
										206833,
										206836
									],
									[
										206937,
										206940
									],
									[
										207014,
										207017
									],
									[
										207053,
										207056
									],
									[
										207191,
										207194
									],
									[
										207306,
										207309
									],
									[
										207444,
										207447
									],
									[
										207521,
										207524
									],
									[
										207560,
										207563
									],
									[
										207732,
										207735
									],
									[
										207771,
										207774
									],
									[
										207955,
										207958
									],
									[
										208126,
										208129
									],
									[
										208263,
										208266
									],
									[
										208306,
										208309
									],
									[
										208407,
										208410
									],
									[
										208487,
										208490
									],
									[
										208654,
										208657
									],
									[
										208754,
										208757
									],
									[
										208980,
										208983
									],
									[
										209007,
										209010
									],
									[
										209011,
										209014
									],
									[
										209055,
										209058
									],
									[
										209105,
										209108
									],
									[
										209206,
										209209
									],
									[
										209273,
										209276
									],
									[
										209277,
										209280
									],
									[
										209343,
										209346
									],
									[
										209396,
										209399
									],
									[
										209465,
										209468
									],
									[
										209469,
										209472
									],
									[
										209537,
										209540
									],
									[
										209600,
										209603
									],
									[
										209643,
										209646
									],
									[
										209810,
										209813
									],
									[
										209814,
										209817
									],
									[
										209844,
										209847
									],
									[
										210055,
										210058
									],
									[
										210168,
										210171
									],
									[
										210182,
										210185
									],
									[
										210356,
										210359
									],
									[
										210410,
										210413
									],
									[
										210468,
										210471
									],
									[
										210579,
										210582
									],
									[
										210647,
										210650
									],
									[
										210686,
										210689
									],
									[
										210859,
										210862
									],
									[
										211036,
										211039
									],
									[
										211239,
										211242
									],
									[
										211422,
										211425
									],
									[
										211566,
										211569
									],
									[
										211725,
										211728
									],
									[
										211850,
										211853
									],
									[
										212112,
										212115
									],
									[
										212307,
										212310
									],
									[
										212563,
										212566
									],
									[
										212763,
										212766
									],
									[
										212948,
										212951
									],
									[
										213017,
										213020
									],
									[
										213100,
										213103
									],
									[
										213253,
										213256
									],
									[
										213377,
										213380
									],
									[
										213470,
										213473
									],
									[
										213647,
										213650
									],
									[
										213709,
										213712
									],
									[
										213803,
										213806
									],
									[
										213922,
										213925
									],
									[
										214124,
										214127
									],
									[
										214151,
										214154
									],
									[
										214274,
										214277
									],
									[
										214413,
										214416
									],
									[
										214570,
										214573
									],
									[
										214727,
										214730
									],
									[
										214884,
										214887
									],
									[
										215006,
										215009
									],
									[
										215178,
										215181
									],
									[
										215406,
										215409
									],
									[
										215433,
										215436
									],
									[
										215565,
										215568
									],
									[
										215713,
										215716
									],
									[
										215818,
										215821
									],
									[
										215993,
										215996
									],
									[
										216067,
										216070
									],
									[
										216245,
										216248
									],
									[
										216319,
										216322
									],
									[
										216497,
										216500
									],
									[
										216571,
										216574
									],
									[
										216724,
										216727
									],
									[
										216798,
										216801
									],
									[
										216969,
										216972
									],
									[
										217043,
										217046
									],
									[
										217299,
										217302
									],
									[
										217582,
										217585
									],
									[
										217840,
										217843
									],
									[
										217844,
										217847
									],
									[
										217879,
										217882
									],
									[
										217883,
										217886
									],
									[
										218051,
										218054
									],
									[
										218055,
										218058
									],
									[
										218181,
										218184
									],
									[
										218314,
										218317
									],
									[
										218434,
										218437
									],
									[
										218554,
										218557
									],
									[
										218703,
										218706
									],
									[
										218772,
										218775
									],
									[
										218792,
										218795
									],
									[
										219003,
										219006
									],
									[
										219130,
										219133
									],
									[
										219252,
										219255
									],
									[
										219382,
										219385
									],
									[
										219506,
										219509
									],
									[
										219730,
										219733
									],
									[
										219734,
										219737
									],
									[
										219769,
										219772
									],
									[
										219773,
										219776
									],
									[
										219825,
										219828
									],
									[
										219829,
										219832
									],
									[
										219878,
										219881
									],
									[
										219882,
										219885
									],
									[
										219902,
										219905
									],
									[
										219933,
										219936
									],
									[
										219937,
										219940
									],
									[
										219960,
										219963
									],
									[
										219986,
										219989
									],
									[
										219990,
										219993
									],
									[
										220093,
										220096
									],
									[
										220151,
										220154
									],
									[
										220293,
										220296
									],
									[
										220297,
										220300
									],
									[
										220436,
										220439
									],
									[
										220440,
										220443
									],
									[
										220598,
										220601
									],
									[
										220602,
										220605
									],
									[
										220872,
										220875
									],
									[
										220924,
										220927
									],
									[
										221125,
										221128
									],
									[
										221197,
										221200
									],
									[
										221201,
										221204
									],
									[
										221325,
										221328
									],
									[
										221437,
										221440
									],
									[
										221509,
										221512
									],
									[
										221513,
										221516
									],
									[
										221646,
										221649
									],
									[
										221844,
										221847
									],
									[
										221848,
										221851
									],
									[
										221924,
										221927
									],
									[
										221984,
										221987
									],
									[
										222126,
										222129
									],
									[
										222130,
										222133
									],
									[
										222269,
										222272
									],
									[
										222273,
										222276
									],
									[
										222344,
										222347
									],
									[
										222348,
										222351
									],
									[
										222540,
										222543
									],
									[
										222690,
										222693
									],
									[
										222817,
										222820
									],
									[
										223027,
										223030
									],
									[
										223031,
										223034
									],
									[
										223078,
										223081
									],
									[
										223268,
										223271
									],
									[
										223340,
										223343
									],
									[
										223344,
										223347
									],
									[
										223488,
										223491
									],
									[
										223560,
										223563
									],
									[
										223564,
										223567
									],
									[
										223798,
										223801
									],
									[
										223802,
										223805
									],
									[
										223881,
										223884
									],
									[
										224036,
										224039
									],
									[
										224160,
										224163
									],
									[
										224297,
										224300
									],
									[
										224417,
										224420
									],
									[
										224544,
										224547
									],
									[
										224762,
										224765
									],
									[
										224766,
										224769
									],
									[
										224879,
										224882
									],
									[
										225013,
										225016
									],
									[
										225140,
										225143
									],
									[
										225355,
										225358
									],
									[
										225359,
										225362
									],
									[
										225524,
										225527
									],
									[
										225560,
										225563
									],
									[
										225624,
										225627
									],
									[
										225812,
										225815
									],
									[
										225933,
										225936
									],
									[
										226147,
										226150
									],
									[
										226200,
										226203
									],
									[
										226305,
										226308
									],
									[
										226519,
										226522
									],
									[
										226523,
										226526
									],
									[
										226629,
										226632
									],
									[
										226763,
										226766
									],
									[
										226890,
										226893
									],
									[
										227107,
										227110
									],
									[
										227111,
										227114
									],
									[
										227215,
										227218
									],
									[
										227333,
										227336
									],
									[
										227519,
										227522
									],
									[
										227568,
										227571
									],
									[
										227656,
										227659
									],
									[
										227820,
										227823
									],
									[
										227900,
										227903
									],
									[
										228052,
										228055
									],
									[
										228232,
										228235
									],
									[
										228236,
										228239
									],
									[
										228318,
										228321
									],
									[
										228483,
										228486
									],
									[
										228547,
										228550
									],
									[
										228731,
										228734
									],
									[
										228808,
										228811
									],
									[
										228973,
										228976
									],
									[
										229053,
										229056
									],
									[
										229200,
										229203
									],
									[
										229384,
										229387
									],
									[
										229388,
										229391
									],
									[
										229494,
										229497
									],
									[
										229628,
										229631
									],
									[
										229755,
										229758
									],
									[
										229965,
										229968
									],
									[
										230141,
										230144
									],
									[
										230343,
										230346
									],
									[
										230544,
										230547
									],
									[
										230719,
										230722
									],
									[
										230846,
										230849
									],
									[
										231006,
										231009
									],
									[
										231168,
										231171
									],
									[
										231372,
										231375
									],
									[
										231503,
										231506
									],
									[
										231696,
										231699
									],
									[
										231903,
										231906
									],
									[
										232137,
										232140
									],
									[
										232264,
										232267
									],
									[
										232436,
										232439
									],
									[
										232652,
										232655
									],
									[
										232779,
										232782
									],
									[
										232939,
										232942
									],
									[
										233101,
										233104
									],
									[
										233359,
										233362
									],
									[
										233530,
										233533
									],
									[
										233633,
										233636
									],
									[
										233766,
										233769
									],
									[
										233914,
										233917
									],
									[
										234179,
										234182
									],
									[
										234401,
										234404
									],
									[
										234826,
										234829
									],
									[
										234833,
										234836
									],
									[
										235030,
										235033
									],
									[
										235100,
										235103
									],
									[
										235346,
										235349
									],
									[
										235386,
										235389
									],
									[
										235503,
										235506
									],
									[
										235729,
										235732
									],
									[
										235950,
										235953
									],
									[
										236237,
										236240
									],
									[
										236281,
										236284
									],
									[
										236548,
										236551
									],
									[
										236772,
										236775
									],
									[
										236949,
										236952
									],
									[
										237171,
										237174
									],
									[
										237391,
										237394
									],
									[
										237657,
										237660
									],
									[
										237926,
										237929
									],
									[
										238277,
										238280
									],
									[
										238544,
										238547
									],
									[
										238671,
										238674
									],
									[
										238908,
										238911
									],
									[
										239052,
										239055
									],
									[
										239276,
										239279
									],
									[
										239483,
										239486
									],
									[
										239746,
										239749
									],
									[
										239920,
										239923
									],
									[
										240260,
										240263
									],
									[
										240623,
										240626
									],
									[
										240672,
										240675
									],
									[
										240799,
										240802
									],
									[
										240923,
										240926
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								233532,
								233532
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"git_gutter_is_enabled": false,
							"line_numbers": false,
							"output_tag": 3,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": ".env.example",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 398,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								398
							]
						],
						"settings":
						{
							"editorconfig": true,
							"ensure_newline_at_eof_on_save": true,
							"git_gutter_is_enabled": true,
							"syntax": "Packages/INI/INI.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "public/index.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2514,
						"regions":
						{
						},
						"selection":
						[
							[
								529,
								529
							]
						],
						"settings":
						{
							"editorconfig": true,
							"ensure_newline_at_eof_on_save": true,
							"git_gutter_is_enabled": true,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "app/settings.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 550,
						"regions":
						{
						},
						"selection":
						[
							[
								272,
								272
							]
						],
						"settings":
						{
							"editorconfig": true,
							"ensure_newline_at_eof_on_save": true,
							"git_gutter_is_enabled": true,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.doc":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 112.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"output.typescript_output":
	{
		"height": 91.0
	},
	"output.unsaved_changes":
	{
		"height": 425.0
	},
	"pinned_build_system": "",
	"project": "_api.sublime-project",
	"replace":
	{
		"height": 44.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"helpers",
				"app\\helpers.php"
			],
			[
				"step-4",
				"amapp\\src\\views\\new-campaign-step-4\\new-campaign-step-4.view.ts"
			],
			[
				"step-3",
				"amapp\\src\\views\\new-campaign-step-3\\new-campaign-step-3.view.ts"
			],
			[
				"step-2",
				"amapp\\src\\views\\new-campaign-step-2\\new-campaign-step-2.view.ts"
			],
			[
				"new-camapign.ser",
				"amapp\\src\\services\\new-campaign.service.ts"
			],
			[
				"-success",
				"amapp\\src\\views\\new-campaign-success\\new-campaign-success.view.html"
			],
			[
				"order-progress",
				"amapp\\src\\components\\order-progress\\order-progress.component.html"
			],
			[
				"series-preivew",
				"amapp\\src\\components\\series-preview\\series-preview.component.html"
			],
			[
				"step-1",
				"amapp\\src\\views\\new-campaign-step-1\\new-campaign-step-1.view.html"
			],
			[
				"new-campaign-succs",
				"amapp\\src\\views\\new-campaign-success\\new-campaign-success.view.ts"
			],
			[
				"success",
				"amapp\\src\\views\\new-campaign-success\\new-campaign-success.view.html"
			],
			[
				"recipients-table",
				"amapp\\src\\services\\recipients-table.service.ts"
			],
			[
				"recipients",
				"amapp\\src\\components\\recipients-table\\recipients-table.component.html"
			],
			[
				"en-sus",
				"amapp\\src\\labels\\en-us.json.ts"
			],
			[
				"app-switcher",
				"amapp\\src\\assets\\styles\\imports\\modules\\_app-switcher.sass"
			],
			[
				"en-us",
				"amapp\\src\\labels\\en-us.json.ts"
			],
			[
				"campaign-recipient",
				"amapp\\src\\views\\campaign-recipients\\campaign-recipients.view.html"
			],
			[
				"series-grid",
				"amapp\\src\\components\\series-grid\\series-grid.component.html"
			],
			[
				"new-camaign.serv",
				"amapp\\src\\services\\new-campaign.service.ts"
			],
			[
				"en-su",
				"amapp\\src\\labels\\en-us.json.ts"
			],
			[
				"new-campaign.servi",
				"amapp\\src\\services\\new-campaign.service.ts"
			],
			[
				"series-grid.sass",
				"amapp\\src\\components\\series-grid\\series-grid.component.sass"
			],
			[
				"seriesgrid",
				"amapp\\src\\components\\series-grid\\series-grid.component.ts"
			],
			[
				"series-preview",
				"amapp\\src\\components\\series-preview\\series-preview.component.ts"
			],
			[
				"responses-list",
				"amapp\\src\\components\\responses-list\\responses-list.component.ts"
			],
			[
				"order-details",
				"amapp\\src\\views\\campaign-order-details\\campaign-order-details.view.html"
			],
			[
				"campaign-biling",
				"amapp\\src\\views\\campaign-billing\\campaign-billing.view.html"
			],
			[
				"billing ",
				"amapp\\src\\components\\billing-table\\billing-table.component.html"
			],
			[
				"datagrid",
				"amapp\\src\\helpers\\datagrid.helper.ts"
			],
			[
				"upcoming",
				"amapp\\src\\components\\upcoming-mailings\\upcoming-mailings.component.html"
			],
			[
				"response-slist",
				"amapp\\src\\components\\responses-list\\responses-list.component.html"
			],
			[
				"campaign-deatils",
				"amapp\\src\\views\\campaign-details\\campaign-details.view.ts"
			],
			[
				"qxp",
				"amapi\\app\\Http\\Controllers\\QXPController.php"
			],
			[
				"campaigncon",
				"amapi\\app\\Http\\Controllers\\Campaigns\\CampaignCheckoutController.php"
			],
			[
				"step 4",
				"amapp\\src\\views\\new-campaign-step-4\\new-campaign-step-4.view.ts"
			],
			[
				"dashboard",
				"amapp\\src\\views\\dashboard\\dashboard.view.ts"
			],
			[
				"campaign-details",
				"amapp\\src\\views\\campaign-details\\campaign-details.view.ts"
			],
			[
				"campaigndeatils",
				"amapi\\app\\Http\\Controllers\\Campaigns\\CampaignDetailsController.php"
			],
			[
				"order-progres",
				"amapp\\src\\components\\order-progress\\order-progress.component.html"
			],
			[
				"step4",
				"amapp\\src\\views\\new-campaign-step-4\\new-campaign-step-4.view.html"
			],
			[
				"storage.he",
				"amapp\\src\\helpers\\storage.helper.ts"
			],
			[
				"campaigndetails",
				"amapi\\app\\Http\\Controllers\\Campaigns\\CampaignDetailsController.php"
			],
			[
				"labels.ts",
				"amapp\\src\\labels\\labels.ts"
			],
			[
				"campaignd-etails",
				"amapp\\src\\views\\campaign-details\\campaign-details.view.html"
			],
			[
				"api.php",
				"amapi\\routes\\api.php"
			],
			[
				"campaigns.service",
				"amapp\\src\\services\\campaigns.service.ts"
			],
			[
				"labesl",
				"amapp\\src\\labels\\labels.ts"
			],
			[
				"baseapi",
				"amapp\\src\\services\\base-api.service.ts"
			],
			[
				"new-campaign",
				"amapp\\src\\modules\\new-campaign.module.ts"
			],
			[
				"new-camapgi",
				"amapp\\src\\services\\new-campaign.service.ts"
			],
			[
				"new-campaign.service",
				"amapp\\src\\services\\new-campaign.service.ts"
			],
			[
				"changelog",
				"amapp\\src\\views\\changelog\\changelog.view.html"
			],
			[
				"campaign-creation",
				"amapp\\src\\views\\campaign-creation\\campaign-creation.view.html"
			],
			[
				"series-prev",
				"amapp\\src\\components\\series-preview\\series-preview.component.html"
			],
			[
				"new-campagin.serv",
				"amapp\\src\\services\\new-campaign.service.ts"
			],
			[
				"campaigns.module",
				"amapp\\src\\modules\\campaigns.module.ts"
			],
			[
				"new-campaign.module",
				"amapp\\src\\modules\\new-campaign.module.ts"
			],
			[
				"shared",
				"amapp\\src\\modules\\shared.module.ts"
			],
			[
				"promocode",
				"amapp\\src\\components\\promocode\\promocode.component.ts"
			],
			[
				"promoc",
				"amapp\\src\\components\\promocode\\promocode.component.html"
			],
			[
				"campaign-creaiton",
				"amapp\\src\\views\\campaign-creation\\campaign-creation.view.ts"
			],
			[
				"new-campaignseriv",
				"amapp\\src\\services\\new-campaign.service.ts"
			],
			[
				"app.helper",
				"amapp\\src\\helpers\\app.helper.ts"
			],
			[
				"new-notice",
				"amapp\\src\\components\\new-notice\\new-notice.component.html"
			],
			[
				"new-compon",
				"amapp\\src\\components\\new-notice\\new-notice.component.ts"
			],
			[
				"order-pgro",
				"amapp\\src\\components\\order-progress\\order-progress.component.ts"
			],
			[
				"data",
				"amapp\\src\\helpers\\datagrid.helper.ts"
			],
			[
				"response-list",
				"amapp\\src\\components\\responses-list\\responses-list.component.html"
			],
			[
				"campaign-recipeit",
				"amapp\\src\\views\\campaign-recipients\\campaign-recipients.view.html"
			],
			[
				"upcomgin",
				"amapp\\src\\components\\upcoming-mailings\\upcoming-mailings.component.ts"
			],
			[
				"environ",
				"amapp\\src\\environments\\environment.staging.ts"
			],
			[
				"20",
				"amapi\\database\\migrations\\2016_03_08_164317_create_users_table.php"
			],
			[
				"order-pro",
				"amapp\\src\\components\\order-progress\\order-progress.component.ts"
			],
			[
				"order-pre",
				"amapp\\src\\components\\order-progress\\order-progress.component.html"
			],
			[
				"campaign-succes",
				"amapp\\src\\views\\campaign-success\\campaign-success.view.html"
			],
			[
				"new-campaign-succes",
				"amapp\\src\\views\\new-campaign-success\\new-campaign-success.view.ts"
			],
			[
				"new-campaign.serv",
				"amapp\\src\\services\\new-campaign.service.ts"
			],
			[
				"billing-table",
				"amapp\\src\\components\\billing-table\\billing-table.component.ts"
			],
			[
				"campaign-recipeint",
				"amapp\\src\\views\\campaign-recipients\\campaign-recipients.view.ts"
			],
			[
				"recipie",
				"amapp\\src\\components\\recipients-table\\recipients-table.component.html"
			],
			[
				"appconf",
				"amapp\\src\\config\\app.config.ts"
			],
			[
				"table.seriv",
				"amapp\\src\\services\\recipients-table.service.ts"
			],
			[
				"qxp.serv",
				"amapp\\src\\services\\qxp.service.ts"
			],
			[
				"campaignscontrol",
				"amapi\\app\\Http\\Controllers\\Campaigns\\CampaignsController.php"
			],
			[
				"recipientstable",
				"amapp\\src\\services\\recipients-table.service.ts"
			],
			[
				"recipients-table.com",
				"amapp\\src\\components\\recipients-table\\recipients-table.component.ts"
			],
			[
				"recipients-tbl",
				"amapp\\src\\services\\recipients-table.service.ts"
			],
			[
				"recipinets",
				"amapp\\src\\components\\recipients-table\\recipients-table.component.html"
			],
			[
				"sharedmo",
				"amapp\\src\\modules\\shared.module.ts"
			],
			[
				"promocode.com",
				"amapp\\src\\components\\promocode\\promocode.component.ts"
			],
			[
				"back",
				"amapp\\src\\components\\back-to-top\\back-to-top.component.ts"
			],
			[
				"config.php",
				"amapp\\src\\config.php"
			],
			[
				"index.php",
				"amapp\\src\\index.php"
			],
			[
				"environem",
				"amapp\\src\\environments\\environment.ts"
			],
			[
				"base-pa",
				"amapp\\src\\services\\base-api.service.ts"
			],
			[
				"dashbaord",
				"amapp\\src\\views\\dashboard\\dashboard.view.html"
			],
			[
				"main-anv",
				"amapp\\src\\components\\main-nav\\main-nav.component.ts"
			],
			[
				"main-nav",
				"amapp\\src\\components\\main-nav\\main-nav.component.html"
			],
			[
				"appconfi",
				"amapp\\src\\config\\app.config.ts"
			],
			[
				"date.help",
				"amapp\\src\\helpers\\date.helper.ts"
			],
			[
				"campaign-reci",
				"amapp\\src\\views\\campaign-recipients\\campaign-recipients.view.ts"
			],
			[
				"campaigns-recip",
				"amapp\\src\\views\\campaign-recipients\\campaign-recipients.view.html"
			],
			[
				"app.config",
				"amapp\\src\\config\\app.config.ts"
			],
			[
				"recipi",
				"amapp\\src\\components\\recipients-table\\recipients-table.component.ts"
			],
			[
				"new-campaign.seriv",
				"amapp\\src\\services\\new-campaign.service.ts"
			],
			[
				"progressstep",
				"amapp\\src\\models\\progress-step.model.ts"
			],
			[
				"order-prores",
				"amapp\\src\\components\\order-progress\\order-progress.component.ts"
			],
			[
				"ste-2",
				"amapp\\src\\views\\new-campaign-step-2\\new-campaign-step-2.view.ts"
			],
			[
				"series-gird",
				"amapp\\src\\components\\series-grid\\series-grid.component.sass"
			],
			[
				"new-campgin-step2",
				"amapp\\src\\views\\new-campaign-step-2\\new-campaign-step-2.view.ts"
			],
			[
				"step2",
				"amapp\\src\\views\\new-campaign-step-2\\new-campaign-step-2.view.html"
			],
			[
				"labels",
				"amapp\\src\\labels\\labels.ts"
			],
			[
				"campaign",
				"amapp\\src\\modules\\campaigns.module.ts"
			],
			[
				"variables",
				"amapp\\src\\assets\\styles\\imports\\_variables.sass"
			],
			[
				"order-progr",
				"amapp\\src\\components\\order-progress\\order-progress.component.html"
			],
			[
				"newcampaignmodel",
				"amapp\\src\\modules\\new-campaign.module.ts"
			],
			[
				"base",
				"amapp\\src\\services\\base-api.service.ts"
			],
			[
				"progress",
				"amapp\\src\\components\\order-progress\\order-progress.component.ts"
			],
			[
				"campaigns.ser",
				"amapp\\src\\services\\campaigns.service.ts"
			],
			[
				"series.model",
				"amapp\\src\\models\\series.model.ts"
			],
			[
				"new-campaign.ser",
				"amapp\\src\\services\\new-campaign.service.ts"
			],
			[
				"order-prorgress",
				"amapp\\src\\components\\order-progress\\order-progress.component.ts"
			],
			[
				"store",
				"amapp\\src\\helpers\\store.helper.ts"
			],
			[
				"pubsub",
				"amapp\\src\\helpers\\pubsub.helper.ts"
			],
			[
				"STORAGE",
				"amapp\\src\\helpers\\storage.helper.ts"
			],
			[
				"shared.module",
				"amapp\\src\\modules\\shared.module.ts"
			],
			[
				"newcampaignserv",
				"amapp\\src\\services\\new-campaign.service.ts"
			],
			[
				"storage.helepr",
				"amapp\\src\\helpers\\storage.helper.ts"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 603.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 202.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
