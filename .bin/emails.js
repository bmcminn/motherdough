const chokidar  = require('chokidar')
const fs        = require('node:fs').promises
const HTML      = require('html-minifier')
const mjml2html = require('mjml')
const path      = require('upath')
const yargs     = require('yargs')


const args = yargs.argv


const opts = {
    outputDir:      args.o      ?? 'emails',
    testOutputDir:  args.t      ?? '__emails',
    watch:          args.w      ?? 'src/views/mjml',
    outputExt:      args.ext    ?? '.twig',
    minify:         args.minify ?? true,
    build:          args.build  ?? false,
    altBodySplit:   args.split  ?? '\n-----\n',
}

console.log(opts)


const mjmlOptions = {
    // fonts: '',
    keepComments: false,
    // beautify: false,
    // minify: true,
    // validationLevel: null,
    // filePath: null,
    // mjmlConfigPath: null,
    // useMjmlConfigOptions: null,
    // minifyOptions: null,
    // juicePreserveTags: null,
}


const minifyOptions = {
    collapseWhitespace: true,
    includeAutoGeneratedTags: true,
    maxLineLength: 80,
    minifyCSS: true,
    removeAttributeQuotes: true,
    removeComments: true,
    removeRedundantAttributes: true,
    removeScriptTypeAttributes: true,
    removeStyleLinkTypeAttributes: true,
    sortClassName: true,
    useShortDoctype: true,
}


const watchPath = path.resolve(process.cwd(), opts.watch)
const watcher   = chokidar.watch(`${watchPath}/**/*.mjml`)

const filepaths = []


async function render(filepath) {
    if (filepath.includes('partials')) { return }

    try {
        let [ mjml, altBody ]   = (await fs.readFile(filepath)).toString().split(opts.altBodySplit).map(el => el.trim())
        const filename          = path.basename(filepath, '.mjml')

        const mjmlpath          = path.dirname(filepath)
        const renderpath        = path.resolve(mjmlpath, '..', opts.outputDir)
        const testpath          = path.resolve(mjmlpath, '..', opts.testOutputDir)

        mjmlOptions.filePath    = filepath

        const res = mjml2html(mjml, mjmlOptions)

        res.errors.forEach(err => {
            console.error(err.formattedMessage)
        })

        if (res.errors.length > 0) {
            console.log(res.errors)
            return
        }

        fs.mkdir(testpath, { recursive: true })
        fs.mkdir(renderpath, { recursive: true })

        if (opts.minify) {
            res.html = HTML.minify(res.html, minifyOptions)
        }

        res.html = [res.html, altBody].join(opts.altBodySplit)

        fs.writeFile(`${testpath}/${filename}.html`, res.html)
        fs.writeFile(`${renderpath}/${filename}${opts.outputExt}`, res.html)

        console.log('rendering', `${filename}${opts.outputExt}`)

    } catch(err) {
        console.error(err)

    }
}


watcher.on('add', (filepath) => {
    filepaths.push(filepath)
    console.log('watching', path.basename(filepath))

})


watcher.on('change', (filepath) => {
    console.log(path.basename(filepath), 'changed...')

    if (!filepath.includes('.mjml')) { return }

    if (filepath.includes('partials')) {
        filepaths.forEach(render)
        return
    }

    render(filepath)
})


watcher.on('ready', () => {
    if (opts.build) {
        filepaths.forEach(render)

        watcher.close().then(() => console.log('closed'));
    }
})
